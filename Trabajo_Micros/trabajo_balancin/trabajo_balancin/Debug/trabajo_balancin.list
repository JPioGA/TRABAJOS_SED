
trabajo_balancin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000429c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004424  08004424  00014424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800443c  0800443c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800443c  0800443c  0001443c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004444  08004444  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004444  08004444  00014444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004448  08004448  00014448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800444c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000178  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000184  20000184  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d336  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c48  00000000  00000000  0002d372  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c80  00000000  00000000  0002efc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ba8  00000000  00000000  0002fc40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000215e2  00000000  00000000  000307e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d900  00000000  00000000  00051dca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2b84  00000000  00000000  0005f6ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013224e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000034a0  00000000  00000000  001322a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800440c 	.word	0x0800440c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800440c 	.word	0x0800440c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <map_acc>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int16_t map_acc(int16_t accel_x, int in_min, int in_max, int out_min, int out_max)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	60b9      	str	r1, [r7, #8]
 80004c8:	607a      	str	r2, [r7, #4]
 80004ca:	603b      	str	r3, [r7, #0]
 80004cc:	4603      	mov	r3, r0
 80004ce:	81fb      	strh	r3, [r7, #14]
	if (accel_x > 16384) return 2500;
 80004d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80004d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80004d8:	dd02      	ble.n	80004e0 <map_acc+0x20>
 80004da:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80004de:	e028      	b.n	8000532 <map_acc+0x72>
	else if (accel_x < -16384) return 600;
 80004e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80004e4:	f513 4f80 	cmn.w	r3, #16384	; 0x4000
 80004e8:	da02      	bge.n	80004f0 <map_acc+0x30>
 80004ea:	f44f 7316 	mov.w	r3, #600	; 0x258
 80004ee:	e020      	b.n	8000532 <map_acc+0x72>
	else if(accel_x < 300 && accel_x > -300) return 1550;
 80004f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80004f4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80004f8:	da07      	bge.n	800050a <map_acc+0x4a>
 80004fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80004fe:	f513 7f96 	cmn.w	r3, #300	; 0x12c
 8000502:	dd02      	ble.n	800050a <map_acc+0x4a>
 8000504:	f240 630e 	movw	r3, #1550	; 0x60e
 8000508:	e013      	b.n	8000532 <map_acc+0x72>
	return (accel_x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800050a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800050e:	68bb      	ldr	r3, [r7, #8]
 8000510:	1ad3      	subs	r3, r2, r3
 8000512:	69b9      	ldr	r1, [r7, #24]
 8000514:	683a      	ldr	r2, [r7, #0]
 8000516:	1a8a      	subs	r2, r1, r2
 8000518:	fb02 f203 	mul.w	r2, r2, r3
 800051c:	6879      	ldr	r1, [r7, #4]
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	1acb      	subs	r3, r1, r3
 8000522:	fb92 f3f3 	sdiv	r3, r2, r3
 8000526:	b29a      	uxth	r2, r3
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	b29b      	uxth	r3, r3
 800052c:	4413      	add	r3, r2
 800052e:	b29b      	uxth	r3, r3
 8000530:	b21b      	sxth	r3, r3
}
 8000532:	4618      	mov	r0, r3
 8000534:	3714      	adds	r7, #20
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr

0800053e <map_adc>:
int16_t map_adc(int16_t adc, int in_min, int in_max, int out_min, int out_max)
{
 800053e:	b480      	push	{r7}
 8000540:	b085      	sub	sp, #20
 8000542:	af00      	add	r7, sp, #0
 8000544:	60b9      	str	r1, [r7, #8]
 8000546:	607a      	str	r2, [r7, #4]
 8000548:	603b      	str	r3, [r7, #0]
 800054a:	4603      	mov	r3, r0
 800054c:	81fb      	strh	r3, [r7, #14]
	return (adc - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800054e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000552:	68bb      	ldr	r3, [r7, #8]
 8000554:	1ad3      	subs	r3, r2, r3
 8000556:	69b9      	ldr	r1, [r7, #24]
 8000558:	683a      	ldr	r2, [r7, #0]
 800055a:	1a8a      	subs	r2, r1, r2
 800055c:	fb02 f203 	mul.w	r2, r2, r3
 8000560:	6879      	ldr	r1, [r7, #4]
 8000562:	68bb      	ldr	r3, [r7, #8]
 8000564:	1acb      	subs	r3, r1, r3
 8000566:	fb92 f3f3 	sdiv	r3, r2, r3
 800056a:	b29a      	uxth	r2, r3
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	b29b      	uxth	r3, r3
 8000570:	4413      	add	r3, r2
 8000572:	b29b      	uxth	r3, r3
 8000574:	b21b      	sxth	r3, r3
}
 8000576:	4618      	mov	r0, r3
 8000578:	3714      	adds	r7, #20
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
	...

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f000 fd87 	bl	800109c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f99b 	bl	80008c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f000 fb01 	bl	8000b98 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000596:	f000 fa01 	bl	800099c <MX_ADC1_Init>
  MX_SPI1_Init();
 800059a:	f000 fa51 	bl	8000a40 <MX_SPI1_Init>
  MX_TIM2_Init();
 800059e:	f000 fa85 	bl	8000aac <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80005a2:	2104      	movs	r1, #4
 80005a4:	48b2      	ldr	r0, [pc, #712]	; (8000870 <main+0x2ec>)
 80005a6:	f002 ffe3 	bl	8003570 <HAL_TIM_PWM_Start>
  	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET); //Aseguro que no haya comunicación antes
 80005aa:	2201      	movs	r2, #1
 80005ac:	2108      	movs	r1, #8
 80005ae:	48b1      	ldr	r0, [pc, #708]	; (8000874 <main+0x2f0>)
 80005b0:	f001 fc70 	bl	8001e94 <HAL_GPIO_WritePin>
  	  HAL_Delay(20);
 80005b4:	2014      	movs	r0, #20
 80005b6:	f000 fdb3 	bl	8001120 <HAL_Delay>

  	  // Activación de los registros para la lectura de datos
  	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET); //Comienzo la transmisión de datos por SPI
 80005ba:	2200      	movs	r2, #0
 80005bc:	2108      	movs	r1, #8
 80005be:	48ad      	ldr	r0, [pc, #692]	; (8000874 <main+0x2f0>)
 80005c0:	f001 fc68 	bl	8001e94 <HAL_GPIO_WritePin>
  	  HAL_Delay(20);
 80005c4:	2014      	movs	r0, #20
 80005c6:	f000 fdab 	bl	8001120 <HAL_Delay>
  	  spiTxBuf[0]=0x20; //Accedo al registro 0x20 (Control Regist 4)
 80005ca:	4bab      	ldr	r3, [pc, #684]	; (8000878 <main+0x2f4>)
 80005cc:	2220      	movs	r2, #32
 80005ce:	701a      	strb	r2, [r3, #0]
  	  spiTxBuf[1]=0x67; //Activo los elementos 0x67 (en decimal = 103; binario = 0110_0111) Para q los outputs vayan a 100Hz de tasa de refresco
 80005d0:	4ba9      	ldr	r3, [pc, #676]	; (8000878 <main+0x2f4>)
 80005d2:	2267      	movs	r2, #103	; 0x67
 80005d4:	705a      	strb	r2, [r3, #1]
  	  HAL_SPI_Transmit(&hspi1,spiTxBuf,2,50);
 80005d6:	2332      	movs	r3, #50	; 0x32
 80005d8:	2202      	movs	r2, #2
 80005da:	49a7      	ldr	r1, [pc, #668]	; (8000878 <main+0x2f4>)
 80005dc:	48a7      	ldr	r0, [pc, #668]	; (800087c <main+0x2f8>)
 80005de:	f002 f98e 	bl	80028fe <HAL_SPI_Transmit>
  	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET); //Fin de la transmisión de datos por SPI
 80005e2:	2201      	movs	r2, #1
 80005e4:	2108      	movs	r1, #8
 80005e6:	48a3      	ldr	r0, [pc, #652]	; (8000874 <main+0x2f0>)
 80005e8:	f001 fc54 	bl	8001e94 <HAL_GPIO_WritePin>
  	  HAL_Delay(20);
 80005ec:	2014      	movs	r0, #20
 80005ee:	f000 fd97 	bl	8001120 <HAL_Delay>

  	  //Lectura de los registros escritos para comprobar que se han escrito correctamente
  	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2108      	movs	r1, #8
 80005f6:	489f      	ldr	r0, [pc, #636]	; (8000874 <main+0x2f0>)
 80005f8:	f001 fc4c 	bl	8001e94 <HAL_GPIO_WritePin>
  	  HAL_Delay(20);
 80005fc:	2014      	movs	r0, #20
 80005fe:	f000 fd8f 	bl	8001120 <HAL_Delay>
  	  spiTxBuf[0]=0x20|0x80; //Accedo al registro 0x20 = 0010_0000 (Control Regist 4) e Indico que voy a LEER 0x80 = 1000_0000
 8000602:	4b9d      	ldr	r3, [pc, #628]	; (8000878 <main+0x2f4>)
 8000604:	22a0      	movs	r2, #160	; 0xa0
 8000606:	701a      	strb	r2, [r3, #0]
  	  HAL_SPI_Transmit(&hspi1,spiTxBuf,1,50); //Indico lo que quiero leer
 8000608:	2332      	movs	r3, #50	; 0x32
 800060a:	2201      	movs	r2, #1
 800060c:	499a      	ldr	r1, [pc, #616]	; (8000878 <main+0x2f4>)
 800060e:	489b      	ldr	r0, [pc, #620]	; (800087c <main+0x2f8>)
 8000610:	f002 f975 	bl	80028fe <HAL_SPI_Transmit>
  	  HAL_SPI_Receive(&hspi1,&spiRxBuf[0],1,50);
 8000614:	2332      	movs	r3, #50	; 0x32
 8000616:	2201      	movs	r2, #1
 8000618:	4999      	ldr	r1, [pc, #612]	; (8000880 <main+0x2fc>)
 800061a:	4898      	ldr	r0, [pc, #608]	; (800087c <main+0x2f8>)
 800061c:	f002 faab 	bl	8002b76 <HAL_SPI_Receive>
  	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET); //Fin de la transmisión de datos por SPI
 8000620:	2201      	movs	r2, #1
 8000622:	2108      	movs	r1, #8
 8000624:	4893      	ldr	r0, [pc, #588]	; (8000874 <main+0x2f0>)
 8000626:	f001 fc35 	bl	8001e94 <HAL_GPIO_WritePin>
  	  HAL_Delay(20);
 800062a:	2014      	movs	r0, #20
 800062c:	f000 fd78 	bl	8001120 <HAL_Delay>

  	  reg_value = spiRxBuf[0];
 8000630:	4b93      	ldr	r3, [pc, #588]	; (8000880 <main+0x2fc>)
 8000632:	781a      	ldrb	r2, [r3, #0]
 8000634:	4b93      	ldr	r3, [pc, #588]	; (8000884 <main+0x300>)
 8000636:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)){
 8000638:	2101      	movs	r1, #1
 800063a:	4893      	ldr	r0, [pc, #588]	; (8000888 <main+0x304>)
 800063c:	f001 fc12 	bl	8001e64 <HAL_GPIO_ReadPin>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d01a      	beq.n	800067c <main+0xf8>
	  		  if(mode == 1)
 8000646:	4b91      	ldr	r3, [pc, #580]	; (800088c <main+0x308>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	2b01      	cmp	r3, #1
 800064c:	d103      	bne.n	8000656 <main+0xd2>
	  		  	  mode = 0;
 800064e:	4b8f      	ldr	r3, [pc, #572]	; (800088c <main+0x308>)
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	e002      	b.n	800065c <main+0xd8>
	  		  else
	  			  mode = 1;
 8000656:	4b8d      	ldr	r3, [pc, #564]	; (800088c <main+0x308>)
 8000658:	2201      	movs	r2, #1
 800065a:	601a      	str	r2, [r3, #0]
	  		tickstart = HAL_GetTick();
 800065c:	f000 fd54 	bl	8001108 <HAL_GetTick>
 8000660:	4603      	mov	r3, r0
 8000662:	4a8b      	ldr	r2, [pc, #556]	; (8000890 <main+0x30c>)
 8000664:	6013      	str	r3, [r2, #0]
	  		while(HAL_GetTick() - tickstart <= 300) continue;
 8000666:	e000      	b.n	800066a <main+0xe6>
 8000668:	bf00      	nop
 800066a:	f000 fd4d 	bl	8001108 <HAL_GetTick>
 800066e:	4602      	mov	r2, r0
 8000670:	4b87      	ldr	r3, [pc, #540]	; (8000890 <main+0x30c>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	1ad3      	subs	r3, r2, r3
 8000676:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800067a:	d9f5      	bls.n	8000668 <main+0xe4>
	  	  }
	  if(mode == 0)
 800067c:	4b83      	ldr	r3, [pc, #524]	; (800088c <main+0x308>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	f040 80c9 	bne.w	8000818 <main+0x294>
	  	  {
	  		  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	2108      	movs	r1, #8
 800068a:	487a      	ldr	r0, [pc, #488]	; (8000874 <main+0x2f0>)
 800068c:	f001 fc02 	bl	8001e94 <HAL_GPIO_WritePin>
	  		  	  	  	  //HAL_Delay(10);
	  		  	  	  	  spiTxBuf[0]=0x28|0x80;
 8000690:	4b79      	ldr	r3, [pc, #484]	; (8000878 <main+0x2f4>)
 8000692:	22a8      	movs	r2, #168	; 0xa8
 8000694:	701a      	strb	r2, [r3, #0]
	  		  	  	  	  HAL_SPI_Transmit(&hspi1,spiTxBuf,1,50);
 8000696:	2332      	movs	r3, #50	; 0x32
 8000698:	2201      	movs	r2, #1
 800069a:	4977      	ldr	r1, [pc, #476]	; (8000878 <main+0x2f4>)
 800069c:	4877      	ldr	r0, [pc, #476]	; (800087c <main+0x2f8>)
 800069e:	f002 f92e 	bl	80028fe <HAL_SPI_Transmit>
	  		  	  	  	  HAL_SPI_Receive(&hspi1,&spiRxBuf[1],1,50);
 80006a2:	2332      	movs	r3, #50	; 0x32
 80006a4:	2201      	movs	r2, #1
 80006a6:	497b      	ldr	r1, [pc, #492]	; (8000894 <main+0x310>)
 80006a8:	4874      	ldr	r0, [pc, #464]	; (800087c <main+0x2f8>)
 80006aa:	f002 fa64 	bl	8002b76 <HAL_SPI_Receive>
	  		  	  	  	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
 80006ae:	2201      	movs	r2, #1
 80006b0:	2108      	movs	r1, #8
 80006b2:	4870      	ldr	r0, [pc, #448]	; (8000874 <main+0x2f0>)
 80006b4:	f001 fbee 	bl	8001e94 <HAL_GPIO_WritePin>
	  		  	  	  	  //HAL_Delay(10);

	  		  	  	  	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 80006b8:	2200      	movs	r2, #0
 80006ba:	2108      	movs	r1, #8
 80006bc:	486d      	ldr	r0, [pc, #436]	; (8000874 <main+0x2f0>)
 80006be:	f001 fbe9 	bl	8001e94 <HAL_GPIO_WritePin>
	  		  	  	  	  //HAL_Delay(10);
	  		  	  	  	  spiTxBuf[0]=0x29|0x80;
 80006c2:	4b6d      	ldr	r3, [pc, #436]	; (8000878 <main+0x2f4>)
 80006c4:	22a9      	movs	r2, #169	; 0xa9
 80006c6:	701a      	strb	r2, [r3, #0]
	  		  	  	  	  HAL_SPI_Transmit(&hspi1,spiTxBuf,1,50);
 80006c8:	2332      	movs	r3, #50	; 0x32
 80006ca:	2201      	movs	r2, #1
 80006cc:	496a      	ldr	r1, [pc, #424]	; (8000878 <main+0x2f4>)
 80006ce:	486b      	ldr	r0, [pc, #428]	; (800087c <main+0x2f8>)
 80006d0:	f002 f915 	bl	80028fe <HAL_SPI_Transmit>
	  		  	  	  	  HAL_SPI_Receive(&hspi1,&spiRxBuf[2],1,50);
 80006d4:	2332      	movs	r3, #50	; 0x32
 80006d6:	2201      	movs	r2, #1
 80006d8:	496f      	ldr	r1, [pc, #444]	; (8000898 <main+0x314>)
 80006da:	4868      	ldr	r0, [pc, #416]	; (800087c <main+0x2f8>)
 80006dc:	f002 fa4b 	bl	8002b76 <HAL_SPI_Receive>
	  		  	  	  	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
 80006e0:	2201      	movs	r2, #1
 80006e2:	2108      	movs	r1, #8
 80006e4:	4863      	ldr	r0, [pc, #396]	; (8000874 <main+0x2f0>)
 80006e6:	f001 fbd5 	bl	8001e94 <HAL_GPIO_WritePin>
	  		  	  	  	  //HAL_Delay(10);

	  		  	  	  	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2108      	movs	r1, #8
 80006ee:	4861      	ldr	r0, [pc, #388]	; (8000874 <main+0x2f0>)
 80006f0:	f001 fbd0 	bl	8001e94 <HAL_GPIO_WritePin>
	  		  	  	  	  //HAL_Delay(10);
	  		  	  	  	  spiTxBuf[0]=0x2a|0x80;
 80006f4:	4b60      	ldr	r3, [pc, #384]	; (8000878 <main+0x2f4>)
 80006f6:	22aa      	movs	r2, #170	; 0xaa
 80006f8:	701a      	strb	r2, [r3, #0]
	  		  	  	  	  HAL_SPI_Transmit(&hspi1,spiTxBuf,1,50);
 80006fa:	2332      	movs	r3, #50	; 0x32
 80006fc:	2201      	movs	r2, #1
 80006fe:	495e      	ldr	r1, [pc, #376]	; (8000878 <main+0x2f4>)
 8000700:	485e      	ldr	r0, [pc, #376]	; (800087c <main+0x2f8>)
 8000702:	f002 f8fc 	bl	80028fe <HAL_SPI_Transmit>
	  		  	  	  	  HAL_SPI_Receive(&hspi1,&spiRxBuf[3],1,50);
 8000706:	2332      	movs	r3, #50	; 0x32
 8000708:	2201      	movs	r2, #1
 800070a:	4964      	ldr	r1, [pc, #400]	; (800089c <main+0x318>)
 800070c:	485b      	ldr	r0, [pc, #364]	; (800087c <main+0x2f8>)
 800070e:	f002 fa32 	bl	8002b76 <HAL_SPI_Receive>
	  		  	  	  	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
 8000712:	2201      	movs	r2, #1
 8000714:	2108      	movs	r1, #8
 8000716:	4857      	ldr	r0, [pc, #348]	; (8000874 <main+0x2f0>)
 8000718:	f001 fbbc 	bl	8001e94 <HAL_GPIO_WritePin>
	  		  	  	  	  //HAL_Delay(10);

	  		  	  	  	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 800071c:	2200      	movs	r2, #0
 800071e:	2108      	movs	r1, #8
 8000720:	4854      	ldr	r0, [pc, #336]	; (8000874 <main+0x2f0>)
 8000722:	f001 fbb7 	bl	8001e94 <HAL_GPIO_WritePin>
	  		  	  	  	  //HAL_Delay(10);
	  		  	  	  	  spiTxBuf[0]=0x2b|0x80;
 8000726:	4b54      	ldr	r3, [pc, #336]	; (8000878 <main+0x2f4>)
 8000728:	22ab      	movs	r2, #171	; 0xab
 800072a:	701a      	strb	r2, [r3, #0]
	  		  	  	  	  HAL_SPI_Transmit(&hspi1,spiTxBuf,1,50);
 800072c:	2332      	movs	r3, #50	; 0x32
 800072e:	2201      	movs	r2, #1
 8000730:	4951      	ldr	r1, [pc, #324]	; (8000878 <main+0x2f4>)
 8000732:	4852      	ldr	r0, [pc, #328]	; (800087c <main+0x2f8>)
 8000734:	f002 f8e3 	bl	80028fe <HAL_SPI_Transmit>
	  		  	  	  	  HAL_SPI_Receive(&hspi1,&spiRxBuf[4],1,50);
 8000738:	2332      	movs	r3, #50	; 0x32
 800073a:	2201      	movs	r2, #1
 800073c:	4958      	ldr	r1, [pc, #352]	; (80008a0 <main+0x31c>)
 800073e:	484f      	ldr	r0, [pc, #316]	; (800087c <main+0x2f8>)
 8000740:	f002 fa19 	bl	8002b76 <HAL_SPI_Receive>
	  		  	  	  	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
 8000744:	2201      	movs	r2, #1
 8000746:	2108      	movs	r1, #8
 8000748:	484a      	ldr	r0, [pc, #296]	; (8000874 <main+0x2f0>)
 800074a:	f001 fba3 	bl	8001e94 <HAL_GPIO_WritePin>
	  		  	  	  	  //HAL_Delay(10);

	  		  	  	  	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	2108      	movs	r1, #8
 8000752:	4848      	ldr	r0, [pc, #288]	; (8000874 <main+0x2f0>)
 8000754:	f001 fb9e 	bl	8001e94 <HAL_GPIO_WritePin>
	  		  	  	  	  //HAL_Delay(10);
	  		  	  	  	  spiTxBuf[0]=0x2c|0x80;
 8000758:	4b47      	ldr	r3, [pc, #284]	; (8000878 <main+0x2f4>)
 800075a:	22ac      	movs	r2, #172	; 0xac
 800075c:	701a      	strb	r2, [r3, #0]
	  		  	  	  	  HAL_SPI_Transmit(&hspi1,spiTxBuf,1,50);
 800075e:	2332      	movs	r3, #50	; 0x32
 8000760:	2201      	movs	r2, #1
 8000762:	4945      	ldr	r1, [pc, #276]	; (8000878 <main+0x2f4>)
 8000764:	4845      	ldr	r0, [pc, #276]	; (800087c <main+0x2f8>)
 8000766:	f002 f8ca 	bl	80028fe <HAL_SPI_Transmit>
	  		  	  	  	  HAL_SPI_Receive(&hspi1,&spiRxBuf[5],1,50);
 800076a:	2332      	movs	r3, #50	; 0x32
 800076c:	2201      	movs	r2, #1
 800076e:	494d      	ldr	r1, [pc, #308]	; (80008a4 <main+0x320>)
 8000770:	4842      	ldr	r0, [pc, #264]	; (800087c <main+0x2f8>)
 8000772:	f002 fa00 	bl	8002b76 <HAL_SPI_Receive>
	  		  	  	  	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
 8000776:	2201      	movs	r2, #1
 8000778:	2108      	movs	r1, #8
 800077a:	483e      	ldr	r0, [pc, #248]	; (8000874 <main+0x2f0>)
 800077c:	f001 fb8a 	bl	8001e94 <HAL_GPIO_WritePin>
	  		  	  	  	  //HAL_Delay(10);

	  		  	  	  	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	2108      	movs	r1, #8
 8000784:	483b      	ldr	r0, [pc, #236]	; (8000874 <main+0x2f0>)
 8000786:	f001 fb85 	bl	8001e94 <HAL_GPIO_WritePin>
	  		  	  	  	  //HAL_Delay(10);
	  		  	  	  	  spiTxBuf[0]=0x2d|0x80;
 800078a:	4b3b      	ldr	r3, [pc, #236]	; (8000878 <main+0x2f4>)
 800078c:	22ad      	movs	r2, #173	; 0xad
 800078e:	701a      	strb	r2, [r3, #0]
	  		  	  	  	  HAL_SPI_Transmit(&hspi1,spiTxBuf,1,50);
 8000790:	2332      	movs	r3, #50	; 0x32
 8000792:	2201      	movs	r2, #1
 8000794:	4938      	ldr	r1, [pc, #224]	; (8000878 <main+0x2f4>)
 8000796:	4839      	ldr	r0, [pc, #228]	; (800087c <main+0x2f8>)
 8000798:	f002 f8b1 	bl	80028fe <HAL_SPI_Transmit>
	  		  	  	  	  HAL_SPI_Receive(&hspi1,&spiRxBuf[6],1,50);
 800079c:	2332      	movs	r3, #50	; 0x32
 800079e:	2201      	movs	r2, #1
 80007a0:	4941      	ldr	r1, [pc, #260]	; (80008a8 <main+0x324>)
 80007a2:	4836      	ldr	r0, [pc, #216]	; (800087c <main+0x2f8>)
 80007a4:	f002 f9e7 	bl	8002b76 <HAL_SPI_Receive>
	  		  	  	  	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
 80007a8:	2201      	movs	r2, #1
 80007aa:	2108      	movs	r1, #8
 80007ac:	4831      	ldr	r0, [pc, #196]	; (8000874 <main+0x2f0>)
 80007ae:	f001 fb71 	bl	8001e94 <HAL_GPIO_WritePin>
	  		  	  	  	  //HAL_Delay(10);

	  		  	  	  	  // Carga de los datos del buffer a las variables
	  		  	  	  	  accel_x = (spiRxBuf[2]<<8)|spiRxBuf[1];
 80007b2:	4b33      	ldr	r3, [pc, #204]	; (8000880 <main+0x2fc>)
 80007b4:	789b      	ldrb	r3, [r3, #2]
 80007b6:	021b      	lsls	r3, r3, #8
 80007b8:	b21a      	sxth	r2, r3
 80007ba:	4b31      	ldr	r3, [pc, #196]	; (8000880 <main+0x2fc>)
 80007bc:	785b      	ldrb	r3, [r3, #1]
 80007be:	b21b      	sxth	r3, r3
 80007c0:	4313      	orrs	r3, r2
 80007c2:	b21a      	sxth	r2, r3
 80007c4:	4b39      	ldr	r3, [pc, #228]	; (80008ac <main+0x328>)
 80007c6:	801a      	strh	r2, [r3, #0]
	  		  	  	  	  accel_y = (spiRxBuf[4]<<8)|spiRxBuf[3];
 80007c8:	4b2d      	ldr	r3, [pc, #180]	; (8000880 <main+0x2fc>)
 80007ca:	791b      	ldrb	r3, [r3, #4]
 80007cc:	021b      	lsls	r3, r3, #8
 80007ce:	b21a      	sxth	r2, r3
 80007d0:	4b2b      	ldr	r3, [pc, #172]	; (8000880 <main+0x2fc>)
 80007d2:	78db      	ldrb	r3, [r3, #3]
 80007d4:	b21b      	sxth	r3, r3
 80007d6:	4313      	orrs	r3, r2
 80007d8:	b21a      	sxth	r2, r3
 80007da:	4b35      	ldr	r3, [pc, #212]	; (80008b0 <main+0x32c>)
 80007dc:	801a      	strh	r2, [r3, #0]
	  		  	  	  	  accel_z = (spiRxBuf[6]<<8)|spiRxBuf[5];
 80007de:	4b28      	ldr	r3, [pc, #160]	; (8000880 <main+0x2fc>)
 80007e0:	799b      	ldrb	r3, [r3, #6]
 80007e2:	021b      	lsls	r3, r3, #8
 80007e4:	b21a      	sxth	r2, r3
 80007e6:	4b26      	ldr	r3, [pc, #152]	; (8000880 <main+0x2fc>)
 80007e8:	795b      	ldrb	r3, [r3, #5]
 80007ea:	b21b      	sxth	r3, r3
 80007ec:	4313      	orrs	r3, r2
 80007ee:	b21a      	sxth	r2, r3
 80007f0:	4b30      	ldr	r3, [pc, #192]	; (80008b4 <main+0x330>)
 80007f2:	801a      	strh	r2, [r3, #0]

	  		  angle = map_acc(accel_x, -16384, 16384, 600, 2500);
 80007f4:	4b2d      	ldr	r3, [pc, #180]	; (80008ac <main+0x328>)
 80007f6:	881b      	ldrh	r3, [r3, #0]
 80007f8:	b218      	sxth	r0, r3
 80007fa:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80007fe:	9300      	str	r3, [sp, #0]
 8000800:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000804:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000808:	492b      	ldr	r1, [pc, #172]	; (80008b8 <main+0x334>)
 800080a:	f7ff fe59 	bl	80004c0 <map_acc>
 800080e:	4603      	mov	r3, r0
 8000810:	461a      	mov	r2, r3
 8000812:	4b2a      	ldr	r3, [pc, #168]	; (80008bc <main+0x338>)
 8000814:	801a      	strh	r2, [r3, #0]
 8000816:	e024      	b.n	8000862 <main+0x2de>
	  	  }
	  	  else
	  	  {
	  		  HAL_ADC_Start(&hadc1);
 8000818:	4829      	ldr	r0, [pc, #164]	; (80008c0 <main+0x33c>)
 800081a:	f000 fce9 	bl	80011f0 <HAL_ADC_Start>
	  		  if(HAL_ADC_PollForConversion(&hadc1, 100)==HAL_OK)
 800081e:	2164      	movs	r1, #100	; 0x64
 8000820:	4827      	ldr	r0, [pc, #156]	; (80008c0 <main+0x33c>)
 8000822:	f000 fdea 	bl	80013fa <HAL_ADC_PollForConversion>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d106      	bne.n	800083a <main+0x2b6>
	  			  adcval = HAL_ADC_GetValue(&hadc1);
 800082c:	4824      	ldr	r0, [pc, #144]	; (80008c0 <main+0x33c>)
 800082e:	f000 fe6f 	bl	8001510 <HAL_ADC_GetValue>
 8000832:	4603      	mov	r3, r0
 8000834:	b21a      	sxth	r2, r3
 8000836:	4b23      	ldr	r3, [pc, #140]	; (80008c4 <main+0x340>)
 8000838:	801a      	strh	r2, [r3, #0]
	  		  HAL_ADC_Stop(&hadc1);
 800083a:	4821      	ldr	r0, [pc, #132]	; (80008c0 <main+0x33c>)
 800083c:	f000 fdaa 	bl	8001394 <HAL_ADC_Stop>
	  		  angle = map_adc(adcval, 0, 4096, 600, 2500);
 8000840:	4b20      	ldr	r3, [pc, #128]	; (80008c4 <main+0x340>)
 8000842:	f9b3 0000 	ldrsh.w	r0, [r3]
 8000846:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800084a:	9300      	str	r3, [sp, #0]
 800084c:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000850:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000854:	2100      	movs	r1, #0
 8000856:	f7ff fe72 	bl	800053e <map_adc>
 800085a:	4603      	mov	r3, r0
 800085c:	461a      	mov	r2, r3
 800085e:	4b17      	ldr	r3, [pc, #92]	; (80008bc <main+0x338>)
 8000860:	801a      	strh	r2, [r3, #0]
	  	  }
	  	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, angle);
 8000862:	4b16      	ldr	r3, [pc, #88]	; (80008bc <main+0x338>)
 8000864:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000868:	4b01      	ldr	r3, [pc, #4]	; (8000870 <main+0x2ec>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	639a      	str	r2, [r3, #56]	; 0x38
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)){
 800086e:	e6e3      	b.n	8000638 <main+0xb4>
 8000870:	200000e8 	.word	0x200000e8
 8000874:	40021000 	.word	0x40021000
 8000878:	20000134 	.word	0x20000134
 800087c:	20000090 	.word	0x20000090
 8000880:	20000030 	.word	0x20000030
 8000884:	20000086 	.word	0x20000086
 8000888:	40020000 	.word	0x40020000
 800088c:	20000028 	.word	0x20000028
 8000890:	2000008c 	.word	0x2000008c
 8000894:	20000031 	.word	0x20000031
 8000898:	20000032 	.word	0x20000032
 800089c:	20000033 	.word	0x20000033
 80008a0:	20000034 	.word	0x20000034
 80008a4:	20000035 	.word	0x20000035
 80008a8:	20000036 	.word	0x20000036
 80008ac:	2000002c 	.word	0x2000002c
 80008b0:	20000038 	.word	0x20000038
 80008b4:	20000130 	.word	0x20000130
 80008b8:	ffffc000 	.word	0xffffc000
 80008bc:	20000084 	.word	0x20000084
 80008c0:	2000003c 	.word	0x2000003c
 80008c4:	20000132 	.word	0x20000132

080008c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b094      	sub	sp, #80	; 0x50
 80008cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ce:	f107 0320 	add.w	r3, r7, #32
 80008d2:	2230      	movs	r2, #48	; 0x30
 80008d4:	2100      	movs	r1, #0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f003 fd90 	bl	80043fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008dc:	f107 030c 	add.w	r3, r7, #12
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ec:	2300      	movs	r3, #0
 80008ee:	60bb      	str	r3, [r7, #8]
 80008f0:	4b28      	ldr	r3, [pc, #160]	; (8000994 <SystemClock_Config+0xcc>)
 80008f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f4:	4a27      	ldr	r2, [pc, #156]	; (8000994 <SystemClock_Config+0xcc>)
 80008f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008fa:	6413      	str	r3, [r2, #64]	; 0x40
 80008fc:	4b25      	ldr	r3, [pc, #148]	; (8000994 <SystemClock_Config+0xcc>)
 80008fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000904:	60bb      	str	r3, [r7, #8]
 8000906:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000908:	2300      	movs	r3, #0
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	4b22      	ldr	r3, [pc, #136]	; (8000998 <SystemClock_Config+0xd0>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a21      	ldr	r2, [pc, #132]	; (8000998 <SystemClock_Config+0xd0>)
 8000912:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000916:	6013      	str	r3, [r2, #0]
 8000918:	4b1f      	ldr	r3, [pc, #124]	; (8000998 <SystemClock_Config+0xd0>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000924:	2301      	movs	r3, #1
 8000926:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000928:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800092e:	2302      	movs	r3, #2
 8000930:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000932:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000936:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000938:	2304      	movs	r3, #4
 800093a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800093c:	23a8      	movs	r3, #168	; 0xa8
 800093e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000940:	2302      	movs	r3, #2
 8000942:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000944:	2307      	movs	r3, #7
 8000946:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000948:	f107 0320 	add.w	r3, r7, #32
 800094c:	4618      	mov	r0, r3
 800094e:	f001 fabb 	bl	8001ec8 <HAL_RCC_OscConfig>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000958:	f000 f9c2 	bl	8000ce0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800095c:	230f      	movs	r3, #15
 800095e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000960:	2302      	movs	r3, #2
 8000962:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000964:	2300      	movs	r3, #0
 8000966:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000968:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800096c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800096e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000972:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000974:	f107 030c 	add.w	r3, r7, #12
 8000978:	2105      	movs	r1, #5
 800097a:	4618      	mov	r0, r3
 800097c:	f001 fd1c 	bl	80023b8 <HAL_RCC_ClockConfig>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000986:	f000 f9ab 	bl	8000ce0 <Error_Handler>
  }
}
 800098a:	bf00      	nop
 800098c:	3750      	adds	r7, #80	; 0x50
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40023800 	.word	0x40023800
 8000998:	40007000 	.word	0x40007000

0800099c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009a2:	463b      	mov	r3, r7
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009ae:	4b21      	ldr	r3, [pc, #132]	; (8000a34 <MX_ADC1_Init+0x98>)
 80009b0:	4a21      	ldr	r2, [pc, #132]	; (8000a38 <MX_ADC1_Init+0x9c>)
 80009b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009b4:	4b1f      	ldr	r3, [pc, #124]	; (8000a34 <MX_ADC1_Init+0x98>)
 80009b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80009ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009bc:	4b1d      	ldr	r3, [pc, #116]	; (8000a34 <MX_ADC1_Init+0x98>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80009c2:	4b1c      	ldr	r3, [pc, #112]	; (8000a34 <MX_ADC1_Init+0x98>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009c8:	4b1a      	ldr	r3, [pc, #104]	; (8000a34 <MX_ADC1_Init+0x98>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009ce:	4b19      	ldr	r3, [pc, #100]	; (8000a34 <MX_ADC1_Init+0x98>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009d6:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <MX_ADC1_Init+0x98>)
 80009d8:	2200      	movs	r2, #0
 80009da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009dc:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <MX_ADC1_Init+0x98>)
 80009de:	4a17      	ldr	r2, [pc, #92]	; (8000a3c <MX_ADC1_Init+0xa0>)
 80009e0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009e2:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <MX_ADC1_Init+0x98>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80009e8:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <MX_ADC1_Init+0x98>)
 80009ea:	2201      	movs	r2, #1
 80009ec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009ee:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <MX_ADC1_Init+0x98>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009f6:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <MX_ADC1_Init+0x98>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009fc:	480d      	ldr	r0, [pc, #52]	; (8000a34 <MX_ADC1_Init+0x98>)
 80009fe:	f000 fbb3 	bl	8001168 <HAL_ADC_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000a08:	f000 f96a 	bl	8000ce0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000a0c:	230a      	movs	r3, #10
 8000a0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a10:	2301      	movs	r3, #1
 8000a12:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a14:	2300      	movs	r3, #0
 8000a16:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a18:	463b      	mov	r3, r7
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4805      	ldr	r0, [pc, #20]	; (8000a34 <MX_ADC1_Init+0x98>)
 8000a1e:	f000 fd85 	bl	800152c <HAL_ADC_ConfigChannel>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a28:	f000 f95a 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a2c:	bf00      	nop
 8000a2e:	3710      	adds	r7, #16
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	2000003c 	.word	0x2000003c
 8000a38:	40012000 	.word	0x40012000
 8000a3c:	0f000001 	.word	0x0f000001

08000a40 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a44:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <MX_SPI1_Init+0x64>)
 8000a46:	4a18      	ldr	r2, [pc, #96]	; (8000aa8 <MX_SPI1_Init+0x68>)
 8000a48:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a4a:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <MX_SPI1_Init+0x64>)
 8000a4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a50:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a52:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <MX_SPI1_Init+0x64>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a58:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <MX_SPI1_Init+0x64>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a5e:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <MX_SPI1_Init+0x64>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a64:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <MX_SPI1_Init+0x64>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <MX_SPI1_Init+0x64>)
 8000a6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a70:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000a72:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <MX_SPI1_Init+0x64>)
 8000a74:	2218      	movs	r2, #24
 8000a76:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a78:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <MX_SPI1_Init+0x64>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a7e:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <MX_SPI1_Init+0x64>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a84:	4b07      	ldr	r3, [pc, #28]	; (8000aa4 <MX_SPI1_Init+0x64>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a8a:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <MX_SPI1_Init+0x64>)
 8000a8c:	220a      	movs	r2, #10
 8000a8e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a90:	4804      	ldr	r0, [pc, #16]	; (8000aa4 <MX_SPI1_Init+0x64>)
 8000a92:	f001 feab 	bl	80027ec <HAL_SPI_Init>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a9c:	f000 f920 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20000090 	.word	0x20000090
 8000aa8:	40013000 	.word	0x40013000

08000aac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08e      	sub	sp, #56	; 0x38
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ab2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
 8000abe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac0:	f107 0320 	add.w	r3, r7, #32
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aca:	1d3b      	adds	r3, r7, #4
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
 8000ad8:	615a      	str	r2, [r3, #20]
 8000ada:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000adc:	4b2d      	ldr	r3, [pc, #180]	; (8000b94 <MX_TIM2_Init+0xe8>)
 8000ade:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ae2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8000ae4:	4b2b      	ldr	r3, [pc, #172]	; (8000b94 <MX_TIM2_Init+0xe8>)
 8000ae6:	2253      	movs	r2, #83	; 0x53
 8000ae8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aea:	4b2a      	ldr	r3, [pc, #168]	; (8000b94 <MX_TIM2_Init+0xe8>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 8000af0:	4b28      	ldr	r3, [pc, #160]	; (8000b94 <MX_TIM2_Init+0xe8>)
 8000af2:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000af6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af8:	4b26      	ldr	r3, [pc, #152]	; (8000b94 <MX_TIM2_Init+0xe8>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000afe:	4b25      	ldr	r3, [pc, #148]	; (8000b94 <MX_TIM2_Init+0xe8>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b04:	4823      	ldr	r0, [pc, #140]	; (8000b94 <MX_TIM2_Init+0xe8>)
 8000b06:	f002 fc19 	bl	800333c <HAL_TIM_Base_Init>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000b10:	f000 f8e6 	bl	8000ce0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b18:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b1e:	4619      	mov	r1, r3
 8000b20:	481c      	ldr	r0, [pc, #112]	; (8000b94 <MX_TIM2_Init+0xe8>)
 8000b22:	f002 ffb7 	bl	8003a94 <HAL_TIM_ConfigClockSource>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000b2c:	f000 f8d8 	bl	8000ce0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b30:	4818      	ldr	r0, [pc, #96]	; (8000b94 <MX_TIM2_Init+0xe8>)
 8000b32:	f002 fcc3 	bl	80034bc <HAL_TIM_PWM_Init>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000b3c:	f000 f8d0 	bl	8000ce0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b40:	2300      	movs	r3, #0
 8000b42:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b44:	2300      	movs	r3, #0
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b48:	f107 0320 	add.w	r3, r7, #32
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4811      	ldr	r0, [pc, #68]	; (8000b94 <MX_TIM2_Init+0xe8>)
 8000b50:	f003 fba0 	bl	8004294 <HAL_TIMEx_MasterConfigSynchronization>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000b5a:	f000 f8c1 	bl	8000ce0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b5e:	2360      	movs	r3, #96	; 0x60
 8000b60:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b66:	2300      	movs	r3, #0
 8000b68:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	2204      	movs	r2, #4
 8000b72:	4619      	mov	r1, r3
 8000b74:	4807      	ldr	r0, [pc, #28]	; (8000b94 <MX_TIM2_Init+0xe8>)
 8000b76:	f002 fecb 	bl	8003910 <HAL_TIM_PWM_ConfigChannel>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000b80:	f000 f8ae 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b84:	4803      	ldr	r0, [pc, #12]	; (8000b94 <MX_TIM2_Init+0xe8>)
 8000b86:	f000 f985 	bl	8000e94 <HAL_TIM_MspPostInit>

}
 8000b8a:	bf00      	nop
 8000b8c:	3738      	adds	r7, #56	; 0x38
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	200000e8 	.word	0x200000e8

08000b98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08a      	sub	sp, #40	; 0x28
 8000b9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9e:	f107 0314 	add.w	r3, r7, #20
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]
 8000baa:	60da      	str	r2, [r3, #12]
 8000bac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	613b      	str	r3, [r7, #16]
 8000bb2:	4b3e      	ldr	r3, [pc, #248]	; (8000cac <MX_GPIO_Init+0x114>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	4a3d      	ldr	r2, [pc, #244]	; (8000cac <MX_GPIO_Init+0x114>)
 8000bb8:	f043 0310 	orr.w	r3, r3, #16
 8000bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbe:	4b3b      	ldr	r3, [pc, #236]	; (8000cac <MX_GPIO_Init+0x114>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	f003 0310 	and.w	r3, r3, #16
 8000bc6:	613b      	str	r3, [r7, #16]
 8000bc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	4b37      	ldr	r3, [pc, #220]	; (8000cac <MX_GPIO_Init+0x114>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	4a36      	ldr	r2, [pc, #216]	; (8000cac <MX_GPIO_Init+0x114>)
 8000bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	4b34      	ldr	r3, [pc, #208]	; (8000cac <MX_GPIO_Init+0x114>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	4b30      	ldr	r3, [pc, #192]	; (8000cac <MX_GPIO_Init+0x114>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a2f      	ldr	r2, [pc, #188]	; (8000cac <MX_GPIO_Init+0x114>)
 8000bf0:	f043 0304 	orr.w	r3, r3, #4
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b2d      	ldr	r3, [pc, #180]	; (8000cac <MX_GPIO_Init+0x114>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0304 	and.w	r3, r3, #4
 8000bfe:	60bb      	str	r3, [r7, #8]
 8000c00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	4b29      	ldr	r3, [pc, #164]	; (8000cac <MX_GPIO_Init+0x114>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a28      	ldr	r2, [pc, #160]	; (8000cac <MX_GPIO_Init+0x114>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b26      	ldr	r3, [pc, #152]	; (8000cac <MX_GPIO_Init+0x114>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	603b      	str	r3, [r7, #0]
 8000c22:	4b22      	ldr	r3, [pc, #136]	; (8000cac <MX_GPIO_Init+0x114>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a21      	ldr	r2, [pc, #132]	; (8000cac <MX_GPIO_Init+0x114>)
 8000c28:	f043 0308 	orr.w	r3, r3, #8
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b1f      	ldr	r3, [pc, #124]	; (8000cac <MX_GPIO_Init+0x114>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0308 	and.w	r3, r3, #8
 8000c36:	603b      	str	r3, [r7, #0]
 8000c38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	2108      	movs	r1, #8
 8000c3e:	481c      	ldr	r0, [pc, #112]	; (8000cb0 <MX_GPIO_Init+0x118>)
 8000c40:	f001 f928 	bl	8001e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000c44:	2200      	movs	r2, #0
 8000c46:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000c4a:	481a      	ldr	r0, [pc, #104]	; (8000cb4 <MX_GPIO_Init+0x11c>)
 8000c4c:	f001 f922 	bl	8001e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c50:	2308      	movs	r3, #8
 8000c52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c54:	2301      	movs	r3, #1
 8000c56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	4619      	mov	r1, r3
 8000c66:	4812      	ldr	r0, [pc, #72]	; (8000cb0 <MX_GPIO_Init+0x118>)
 8000c68:	f000 ff60 	bl	8001b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c70:	2300      	movs	r3, #0
 8000c72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	480e      	ldr	r0, [pc, #56]	; (8000cb8 <MX_GPIO_Init+0x120>)
 8000c80:	f000 ff54 	bl	8001b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000c84:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000c88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c92:	2300      	movs	r3, #0
 8000c94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c96:	f107 0314 	add.w	r3, r7, #20
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4805      	ldr	r0, [pc, #20]	; (8000cb4 <MX_GPIO_Init+0x11c>)
 8000c9e:	f000 ff45 	bl	8001b2c <HAL_GPIO_Init>

}
 8000ca2:	bf00      	nop
 8000ca4:	3728      	adds	r7, #40	; 0x28
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	40020c00 	.word	0x40020c00
 8000cb8:	40020000 	.word	0x40020000

08000cbc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a04      	ldr	r2, [pc, #16]	; (8000cdc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d101      	bne.n	8000cd2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cce:	f000 fa07 	bl	80010e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40010000 	.word	0x40010000

08000ce0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce4:	b672      	cpsid	i
}
 8000ce6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <Error_Handler+0x8>
	...

08000cec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	607b      	str	r3, [r7, #4]
 8000cf6:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <HAL_MspInit+0x4c>)
 8000cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfa:	4a0f      	ldr	r2, [pc, #60]	; (8000d38 <HAL_MspInit+0x4c>)
 8000cfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d00:	6453      	str	r3, [r2, #68]	; 0x44
 8000d02:	4b0d      	ldr	r3, [pc, #52]	; (8000d38 <HAL_MspInit+0x4c>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	603b      	str	r3, [r7, #0]
 8000d12:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <HAL_MspInit+0x4c>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	4a08      	ldr	r2, [pc, #32]	; (8000d38 <HAL_MspInit+0x4c>)
 8000d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d1e:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <HAL_MspInit+0x4c>)
 8000d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d26:	603b      	str	r3, [r7, #0]
 8000d28:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d2a:	2007      	movs	r0, #7
 8000d2c:	f000 fec9 	bl	8001ac2 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d30:	bf00      	nop
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40023800 	.word	0x40023800

08000d3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08a      	sub	sp, #40	; 0x28
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a17      	ldr	r2, [pc, #92]	; (8000db8 <HAL_ADC_MspInit+0x7c>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d127      	bne.n	8000dae <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	613b      	str	r3, [r7, #16]
 8000d62:	4b16      	ldr	r3, [pc, #88]	; (8000dbc <HAL_ADC_MspInit+0x80>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d66:	4a15      	ldr	r2, [pc, #84]	; (8000dbc <HAL_ADC_MspInit+0x80>)
 8000d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d6e:	4b13      	ldr	r3, [pc, #76]	; (8000dbc <HAL_ADC_MspInit+0x80>)
 8000d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <HAL_ADC_MspInit+0x80>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a0e      	ldr	r2, [pc, #56]	; (8000dbc <HAL_ADC_MspInit+0x80>)
 8000d84:	f043 0304 	orr.w	r3, r3, #4
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <HAL_ADC_MspInit+0x80>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f003 0304 	and.w	r3, r3, #4
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d96:	2301      	movs	r3, #1
 8000d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da2:	f107 0314 	add.w	r3, r7, #20
 8000da6:	4619      	mov	r1, r3
 8000da8:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <HAL_ADC_MspInit+0x84>)
 8000daa:	f000 febf 	bl	8001b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000dae:	bf00      	nop
 8000db0:	3728      	adds	r7, #40	; 0x28
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40012000 	.word	0x40012000
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	40020800 	.word	0x40020800

08000dc4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08a      	sub	sp, #40	; 0x28
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a19      	ldr	r2, [pc, #100]	; (8000e48 <HAL_SPI_MspInit+0x84>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d12b      	bne.n	8000e3e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	613b      	str	r3, [r7, #16]
 8000dea:	4b18      	ldr	r3, [pc, #96]	; (8000e4c <HAL_SPI_MspInit+0x88>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dee:	4a17      	ldr	r2, [pc, #92]	; (8000e4c <HAL_SPI_MspInit+0x88>)
 8000df0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000df4:	6453      	str	r3, [r2, #68]	; 0x44
 8000df6:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <HAL_SPI_MspInit+0x88>)
 8000df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dfe:	613b      	str	r3, [r7, #16]
 8000e00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <HAL_SPI_MspInit+0x88>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	4a10      	ldr	r2, [pc, #64]	; (8000e4c <HAL_SPI_MspInit+0x88>)
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	6313      	str	r3, [r2, #48]	; 0x30
 8000e12:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <HAL_SPI_MspInit+0x88>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e1e:	23e0      	movs	r3, #224	; 0xe0
 8000e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e22:	2302      	movs	r3, #2
 8000e24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e2e:	2305      	movs	r3, #5
 8000e30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e32:	f107 0314 	add.w	r3, r7, #20
 8000e36:	4619      	mov	r1, r3
 8000e38:	4805      	ldr	r0, [pc, #20]	; (8000e50 <HAL_SPI_MspInit+0x8c>)
 8000e3a:	f000 fe77 	bl	8001b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e3e:	bf00      	nop
 8000e40:	3728      	adds	r7, #40	; 0x28
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40013000 	.word	0x40013000
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40020000 	.word	0x40020000

08000e54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e64:	d10d      	bne.n	8000e82 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <HAL_TIM_Base_MspInit+0x3c>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6e:	4a08      	ldr	r2, [pc, #32]	; (8000e90 <HAL_TIM_Base_MspInit+0x3c>)
 8000e70:	f043 0301 	orr.w	r3, r3, #1
 8000e74:	6413      	str	r3, [r2, #64]	; 0x40
 8000e76:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <HAL_TIM_Base_MspInit+0x3c>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e82:	bf00      	nop
 8000e84:	3714      	adds	r7, #20
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	40023800 	.word	0x40023800

08000e94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b088      	sub	sp, #32
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9c:	f107 030c 	add.w	r3, r7, #12
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000eb4:	d11d      	bne.n	8000ef2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60bb      	str	r3, [r7, #8]
 8000eba:	4b10      	ldr	r3, [pc, #64]	; (8000efc <HAL_TIM_MspPostInit+0x68>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	4a0f      	ldr	r2, [pc, #60]	; (8000efc <HAL_TIM_MspPostInit+0x68>)
 8000ec0:	f043 0301 	orr.w	r3, r3, #1
 8000ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec6:	4b0d      	ldr	r3, [pc, #52]	; (8000efc <HAL_TIM_MspPostInit+0x68>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	60bb      	str	r3, [r7, #8]
 8000ed0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee6:	f107 030c 	add.w	r3, r7, #12
 8000eea:	4619      	mov	r1, r3
 8000eec:	4804      	ldr	r0, [pc, #16]	; (8000f00 <HAL_TIM_MspPostInit+0x6c>)
 8000eee:	f000 fe1d 	bl	8001b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000ef2:	bf00      	nop
 8000ef4:	3720      	adds	r7, #32
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40023800 	.word	0x40023800
 8000f00:	40020000 	.word	0x40020000

08000f04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08c      	sub	sp, #48	; 0x30
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000f14:	2200      	movs	r2, #0
 8000f16:	6879      	ldr	r1, [r7, #4]
 8000f18:	2019      	movs	r0, #25
 8000f1a:	f000 fddd 	bl	8001ad8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000f1e:	2019      	movs	r0, #25
 8000f20:	f000 fdf6 	bl	8001b10 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000f24:	2300      	movs	r3, #0
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	4b1f      	ldr	r3, [pc, #124]	; (8000fa8 <HAL_InitTick+0xa4>)
 8000f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2c:	4a1e      	ldr	r2, [pc, #120]	; (8000fa8 <HAL_InitTick+0xa4>)
 8000f2e:	f043 0301 	orr.w	r3, r3, #1
 8000f32:	6453      	str	r3, [r2, #68]	; 0x44
 8000f34:	4b1c      	ldr	r3, [pc, #112]	; (8000fa8 <HAL_InitTick+0xa4>)
 8000f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f38:	f003 0301 	and.w	r3, r3, #1
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f40:	f107 0210 	add.w	r2, r7, #16
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	4611      	mov	r1, r2
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f001 fc1c 	bl	8002788 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000f50:	f001 fc06 	bl	8002760 <HAL_RCC_GetPCLK2Freq>
 8000f54:	4603      	mov	r3, r0
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f5c:	4a13      	ldr	r2, [pc, #76]	; (8000fac <HAL_InitTick+0xa8>)
 8000f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f62:	0c9b      	lsrs	r3, r3, #18
 8000f64:	3b01      	subs	r3, #1
 8000f66:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000f68:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <HAL_InitTick+0xac>)
 8000f6a:	4a12      	ldr	r2, [pc, #72]	; (8000fb4 <HAL_InitTick+0xb0>)
 8000f6c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000f6e:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <HAL_InitTick+0xac>)
 8000f70:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f74:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000f76:	4a0e      	ldr	r2, [pc, #56]	; (8000fb0 <HAL_InitTick+0xac>)
 8000f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f7a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <HAL_InitTick+0xac>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f82:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <HAL_InitTick+0xac>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000f88:	4809      	ldr	r0, [pc, #36]	; (8000fb0 <HAL_InitTick+0xac>)
 8000f8a:	f002 f9d7 	bl	800333c <HAL_TIM_Base_Init>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d104      	bne.n	8000f9e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000f94:	4806      	ldr	r0, [pc, #24]	; (8000fb0 <HAL_InitTick+0xac>)
 8000f96:	f002 fa21 	bl	80033dc <HAL_TIM_Base_Start_IT>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	e000      	b.n	8000fa0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3730      	adds	r7, #48	; 0x30
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	431bde83 	.word	0x431bde83
 8000fb0:	20000138 	.word	0x20000138
 8000fb4:	40010000 	.word	0x40010000

08000fb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <NMI_Handler+0x4>

08000fbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc2:	e7fe      	b.n	8000fc2 <HardFault_Handler+0x4>

08000fc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <MemManage_Handler+0x4>

08000fca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fce:	e7fe      	b.n	8000fce <BusFault_Handler+0x4>

08000fd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <UsageFault_Handler+0x4>

08000fd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
	...

08001010 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001014:	4802      	ldr	r0, [pc, #8]	; (8001020 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001016:	f002 fb73 	bl	8003700 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000138 	.word	0x20000138

08001024 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <SystemInit+0x20>)
 800102a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800102e:	4a05      	ldr	r2, [pc, #20]	; (8001044 <SystemInit+0x20>)
 8001030:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001034:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001048:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001080 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800104c:	480d      	ldr	r0, [pc, #52]	; (8001084 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800104e:	490e      	ldr	r1, [pc, #56]	; (8001088 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001050:	4a0e      	ldr	r2, [pc, #56]	; (800108c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001052:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001054:	e002      	b.n	800105c <LoopCopyDataInit>

08001056 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001056:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001058:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800105a:	3304      	adds	r3, #4

0800105c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800105c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800105e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001060:	d3f9      	bcc.n	8001056 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001062:	4a0b      	ldr	r2, [pc, #44]	; (8001090 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001064:	4c0b      	ldr	r4, [pc, #44]	; (8001094 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001066:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001068:	e001      	b.n	800106e <LoopFillZerobss>

0800106a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800106a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800106c:	3204      	adds	r2, #4

0800106e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800106e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001070:	d3fb      	bcc.n	800106a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001072:	f7ff ffd7 	bl	8001024 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001076:	f003 f99d 	bl	80043b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800107a:	f7ff fa83 	bl	8000584 <main>
  bx  lr    
 800107e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001080:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001084:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001088:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800108c:	0800444c 	.word	0x0800444c
  ldr r2, =_sbss
 8001090:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001094:	20000184 	.word	0x20000184

08001098 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001098:	e7fe      	b.n	8001098 <ADC_IRQHandler>
	...

0800109c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010a0:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <HAL_Init+0x40>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a0d      	ldr	r2, [pc, #52]	; (80010dc <HAL_Init+0x40>)
 80010a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010ac:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <HAL_Init+0x40>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a0a      	ldr	r2, [pc, #40]	; (80010dc <HAL_Init+0x40>)
 80010b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010b8:	4b08      	ldr	r3, [pc, #32]	; (80010dc <HAL_Init+0x40>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a07      	ldr	r2, [pc, #28]	; (80010dc <HAL_Init+0x40>)
 80010be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c4:	2003      	movs	r0, #3
 80010c6:	f000 fcfc 	bl	8001ac2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ca:	2000      	movs	r0, #0
 80010cc:	f7ff ff1a 	bl	8000f04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010d0:	f7ff fe0c 	bl	8000cec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40023c00 	.word	0x40023c00

080010e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <HAL_IncTick+0x20>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	461a      	mov	r2, r3
 80010ea:	4b06      	ldr	r3, [pc, #24]	; (8001104 <HAL_IncTick+0x24>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4413      	add	r3, r2
 80010f0:	4a04      	ldr	r2, [pc, #16]	; (8001104 <HAL_IncTick+0x24>)
 80010f2:	6013      	str	r3, [r2, #0]
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	20000008 	.word	0x20000008
 8001104:	20000180 	.word	0x20000180

08001108 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return uwTick;
 800110c:	4b03      	ldr	r3, [pc, #12]	; (800111c <HAL_GetTick+0x14>)
 800110e:	681b      	ldr	r3, [r3, #0]
}
 8001110:	4618      	mov	r0, r3
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	20000180 	.word	0x20000180

08001120 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001128:	f7ff ffee 	bl	8001108 <HAL_GetTick>
 800112c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001138:	d005      	beq.n	8001146 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800113a:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <HAL_Delay+0x44>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	461a      	mov	r2, r3
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4413      	add	r3, r2
 8001144:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001146:	bf00      	nop
 8001148:	f7ff ffde 	bl	8001108 <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	429a      	cmp	r2, r3
 8001156:	d8f7      	bhi.n	8001148 <HAL_Delay+0x28>
  {
  }
}
 8001158:	bf00      	nop
 800115a:	bf00      	nop
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000008 	.word	0x20000008

08001168 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001170:	2300      	movs	r3, #0
 8001172:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d101      	bne.n	800117e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e033      	b.n	80011e6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	2b00      	cmp	r3, #0
 8001184:	d109      	bne.n	800119a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff fdd8 	bl	8000d3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2200      	movs	r2, #0
 8001190:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2200      	movs	r2, #0
 8001196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119e:	f003 0310 	and.w	r3, r3, #16
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d118      	bne.n	80011d8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011aa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011ae:	f023 0302 	bic.w	r3, r3, #2
 80011b2:	f043 0202 	orr.w	r2, r3, #2
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f000 fad8 	bl	8001770 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2200      	movs	r2, #0
 80011c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	f023 0303 	bic.w	r3, r3, #3
 80011ce:	f043 0201 	orr.w	r2, r3, #1
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	641a      	str	r2, [r3, #64]	; 0x40
 80011d6:	e001      	b.n	80011dc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2200      	movs	r2, #0
 80011e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
	...

080011f0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80011f8:	2300      	movs	r3, #0
 80011fa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001202:	2b01      	cmp	r3, #1
 8001204:	d101      	bne.n	800120a <HAL_ADC_Start+0x1a>
 8001206:	2302      	movs	r3, #2
 8001208:	e0b2      	b.n	8001370 <HAL_ADC_Start+0x180>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2201      	movs	r2, #1
 800120e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	2b01      	cmp	r3, #1
 800121e:	d018      	beq.n	8001252 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	689a      	ldr	r2, [r3, #8]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f042 0201 	orr.w	r2, r2, #1
 800122e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001230:	4b52      	ldr	r3, [pc, #328]	; (800137c <HAL_ADC_Start+0x18c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a52      	ldr	r2, [pc, #328]	; (8001380 <HAL_ADC_Start+0x190>)
 8001236:	fba2 2303 	umull	r2, r3, r2, r3
 800123a:	0c9a      	lsrs	r2, r3, #18
 800123c:	4613      	mov	r3, r2
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	4413      	add	r3, r2
 8001242:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001244:	e002      	b.n	800124c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	3b01      	subs	r3, #1
 800124a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d1f9      	bne.n	8001246 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f003 0301 	and.w	r3, r3, #1
 800125c:	2b01      	cmp	r3, #1
 800125e:	d17a      	bne.n	8001356 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001264:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001268:	f023 0301 	bic.w	r3, r3, #1
 800126c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800127e:	2b00      	cmp	r3, #0
 8001280:	d007      	beq.n	8001292 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800128a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800129a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800129e:	d106      	bne.n	80012ae <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a4:	f023 0206 	bic.w	r2, r3, #6
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	645a      	str	r2, [r3, #68]	; 0x44
 80012ac:	e002      	b.n	80012b4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2200      	movs	r2, #0
 80012b2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012bc:	4b31      	ldr	r3, [pc, #196]	; (8001384 <HAL_ADC_Start+0x194>)
 80012be:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80012c8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f003 031f 	and.w	r3, r3, #31
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d12a      	bne.n	800132c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a2b      	ldr	r2, [pc, #172]	; (8001388 <HAL_ADC_Start+0x198>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d015      	beq.n	800130c <HAL_ADC_Start+0x11c>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a29      	ldr	r2, [pc, #164]	; (800138c <HAL_ADC_Start+0x19c>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d105      	bne.n	80012f6 <HAL_ADC_Start+0x106>
 80012ea:	4b26      	ldr	r3, [pc, #152]	; (8001384 <HAL_ADC_Start+0x194>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f003 031f 	and.w	r3, r3, #31
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d00a      	beq.n	800130c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a25      	ldr	r2, [pc, #148]	; (8001390 <HAL_ADC_Start+0x1a0>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d136      	bne.n	800136e <HAL_ADC_Start+0x17e>
 8001300:	4b20      	ldr	r3, [pc, #128]	; (8001384 <HAL_ADC_Start+0x194>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f003 0310 	and.w	r3, r3, #16
 8001308:	2b00      	cmp	r3, #0
 800130a:	d130      	bne.n	800136e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d129      	bne.n	800136e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	689a      	ldr	r2, [r3, #8]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001328:	609a      	str	r2, [r3, #8]
 800132a:	e020      	b.n	800136e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a15      	ldr	r2, [pc, #84]	; (8001388 <HAL_ADC_Start+0x198>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d11b      	bne.n	800136e <HAL_ADC_Start+0x17e>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d114      	bne.n	800136e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	689a      	ldr	r2, [r3, #8]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	e00b      	b.n	800136e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	f043 0210 	orr.w	r2, r3, #16
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001366:	f043 0201 	orr.w	r2, r3, #1
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	3714      	adds	r7, #20
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	20000000 	.word	0x20000000
 8001380:	431bde83 	.word	0x431bde83
 8001384:	40012300 	.word	0x40012300
 8001388:	40012000 	.word	0x40012000
 800138c:	40012100 	.word	0x40012100
 8001390:	40012200 	.word	0x40012200

08001394 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d101      	bne.n	80013aa <HAL_ADC_Stop+0x16>
 80013a6:	2302      	movs	r3, #2
 80013a8:	e021      	b.n	80013ee <HAL_ADC_Stop+0x5a>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2201      	movs	r2, #1
 80013ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	689a      	ldr	r2, [r3, #8]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f022 0201 	bic.w	r2, r2, #1
 80013c0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d109      	bne.n	80013e4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013d8:	f023 0301 	bic.w	r3, r3, #1
 80013dc:	f043 0201 	orr.w	r2, r3, #1
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b084      	sub	sp, #16
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
 8001402:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001404:	2300      	movs	r3, #0
 8001406:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001412:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001416:	d113      	bne.n	8001440 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001422:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001426:	d10b      	bne.n	8001440 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142c:	f043 0220 	orr.w	r2, r3, #32
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2200      	movs	r2, #0
 8001438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e063      	b.n	8001508 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001440:	f7ff fe62 	bl	8001108 <HAL_GetTick>
 8001444:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001446:	e021      	b.n	800148c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800144e:	d01d      	beq.n	800148c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d007      	beq.n	8001466 <HAL_ADC_PollForConversion+0x6c>
 8001456:	f7ff fe57 	bl	8001108 <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	683a      	ldr	r2, [r7, #0]
 8001462:	429a      	cmp	r2, r3
 8001464:	d212      	bcs.n	800148c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0302 	and.w	r3, r3, #2
 8001470:	2b02      	cmp	r3, #2
 8001472:	d00b      	beq.n	800148c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001478:	f043 0204 	orr.w	r2, r3, #4
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e03d      	b.n	8001508 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b02      	cmp	r3, #2
 8001498:	d1d6      	bne.n	8001448 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f06f 0212 	mvn.w	r2, #18
 80014a2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d123      	bne.n	8001506 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d11f      	bne.n	8001506 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014cc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d006      	beq.n	80014e2 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d111      	bne.n	8001506 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d105      	bne.n	8001506 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	f043 0201 	orr.w	r2, r3, #1
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001506:	2300      	movs	r3, #0
}
 8001508:	4618      	mov	r0, r3
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800151e:	4618      	mov	r0, r3
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
	...

0800152c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001536:	2300      	movs	r3, #0
 8001538:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001540:	2b01      	cmp	r3, #1
 8001542:	d101      	bne.n	8001548 <HAL_ADC_ConfigChannel+0x1c>
 8001544:	2302      	movs	r3, #2
 8001546:	e105      	b.n	8001754 <HAL_ADC_ConfigChannel+0x228>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2201      	movs	r2, #1
 800154c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2b09      	cmp	r3, #9
 8001556:	d925      	bls.n	80015a4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	68d9      	ldr	r1, [r3, #12]
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	b29b      	uxth	r3, r3
 8001564:	461a      	mov	r2, r3
 8001566:	4613      	mov	r3, r2
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	4413      	add	r3, r2
 800156c:	3b1e      	subs	r3, #30
 800156e:	2207      	movs	r2, #7
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	43da      	mvns	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	400a      	ands	r2, r1
 800157c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	68d9      	ldr	r1, [r3, #12]
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	b29b      	uxth	r3, r3
 800158e:	4618      	mov	r0, r3
 8001590:	4603      	mov	r3, r0
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	4403      	add	r3, r0
 8001596:	3b1e      	subs	r3, #30
 8001598:	409a      	lsls	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	430a      	orrs	r2, r1
 80015a0:	60da      	str	r2, [r3, #12]
 80015a2:	e022      	b.n	80015ea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	6919      	ldr	r1, [r3, #16]
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	461a      	mov	r2, r3
 80015b2:	4613      	mov	r3, r2
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	4413      	add	r3, r2
 80015b8:	2207      	movs	r2, #7
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	43da      	mvns	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	400a      	ands	r2, r1
 80015c6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6919      	ldr	r1, [r3, #16]
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	689a      	ldr	r2, [r3, #8]
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	4618      	mov	r0, r3
 80015da:	4603      	mov	r3, r0
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	4403      	add	r3, r0
 80015e0:	409a      	lsls	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	430a      	orrs	r2, r1
 80015e8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	2b06      	cmp	r3, #6
 80015f0:	d824      	bhi.n	800163c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685a      	ldr	r2, [r3, #4]
 80015fc:	4613      	mov	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4413      	add	r3, r2
 8001602:	3b05      	subs	r3, #5
 8001604:	221f      	movs	r2, #31
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43da      	mvns	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	400a      	ands	r2, r1
 8001612:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	b29b      	uxth	r3, r3
 8001620:	4618      	mov	r0, r3
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685a      	ldr	r2, [r3, #4]
 8001626:	4613      	mov	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	4413      	add	r3, r2
 800162c:	3b05      	subs	r3, #5
 800162e:	fa00 f203 	lsl.w	r2, r0, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	430a      	orrs	r2, r1
 8001638:	635a      	str	r2, [r3, #52]	; 0x34
 800163a:	e04c      	b.n	80016d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	2b0c      	cmp	r3, #12
 8001642:	d824      	bhi.n	800168e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685a      	ldr	r2, [r3, #4]
 800164e:	4613      	mov	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4413      	add	r3, r2
 8001654:	3b23      	subs	r3, #35	; 0x23
 8001656:	221f      	movs	r2, #31
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	43da      	mvns	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	400a      	ands	r2, r1
 8001664:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	b29b      	uxth	r3, r3
 8001672:	4618      	mov	r0, r3
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685a      	ldr	r2, [r3, #4]
 8001678:	4613      	mov	r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4413      	add	r3, r2
 800167e:	3b23      	subs	r3, #35	; 0x23
 8001680:	fa00 f203 	lsl.w	r2, r0, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	430a      	orrs	r2, r1
 800168a:	631a      	str	r2, [r3, #48]	; 0x30
 800168c:	e023      	b.n	80016d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	4613      	mov	r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	4413      	add	r3, r2
 800169e:	3b41      	subs	r3, #65	; 0x41
 80016a0:	221f      	movs	r2, #31
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	43da      	mvns	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	400a      	ands	r2, r1
 80016ae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	4618      	mov	r0, r3
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685a      	ldr	r2, [r3, #4]
 80016c2:	4613      	mov	r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	4413      	add	r3, r2
 80016c8:	3b41      	subs	r3, #65	; 0x41
 80016ca:	fa00 f203 	lsl.w	r2, r0, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	430a      	orrs	r2, r1
 80016d4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016d6:	4b22      	ldr	r3, [pc, #136]	; (8001760 <HAL_ADC_ConfigChannel+0x234>)
 80016d8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a21      	ldr	r2, [pc, #132]	; (8001764 <HAL_ADC_ConfigChannel+0x238>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d109      	bne.n	80016f8 <HAL_ADC_ConfigChannel+0x1cc>
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b12      	cmp	r3, #18
 80016ea:	d105      	bne.n	80016f8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a19      	ldr	r2, [pc, #100]	; (8001764 <HAL_ADC_ConfigChannel+0x238>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d123      	bne.n	800174a <HAL_ADC_ConfigChannel+0x21e>
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2b10      	cmp	r3, #16
 8001708:	d003      	beq.n	8001712 <HAL_ADC_ConfigChannel+0x1e6>
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2b11      	cmp	r3, #17
 8001710:	d11b      	bne.n	800174a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2b10      	cmp	r3, #16
 8001724:	d111      	bne.n	800174a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001726:	4b10      	ldr	r3, [pc, #64]	; (8001768 <HAL_ADC_ConfigChannel+0x23c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a10      	ldr	r2, [pc, #64]	; (800176c <HAL_ADC_ConfigChannel+0x240>)
 800172c:	fba2 2303 	umull	r2, r3, r2, r3
 8001730:	0c9a      	lsrs	r2, r3, #18
 8001732:	4613      	mov	r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	4413      	add	r3, r2
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800173c:	e002      	b.n	8001744 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	3b01      	subs	r3, #1
 8001742:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d1f9      	bne.n	800173e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001752:	2300      	movs	r3, #0
}
 8001754:	4618      	mov	r0, r3
 8001756:	3714      	adds	r7, #20
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	40012300 	.word	0x40012300
 8001764:	40012000 	.word	0x40012000
 8001768:	20000000 	.word	0x20000000
 800176c:	431bde83 	.word	0x431bde83

08001770 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001778:	4b79      	ldr	r3, [pc, #484]	; (8001960 <ADC_Init+0x1f0>)
 800177a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	685a      	ldr	r2, [r3, #4]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	431a      	orrs	r2, r3
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	685a      	ldr	r2, [r3, #4]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	6859      	ldr	r1, [r3, #4]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	691b      	ldr	r3, [r3, #16]
 80017b0:	021a      	lsls	r2, r3, #8
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	430a      	orrs	r2, r1
 80017b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	685a      	ldr	r2, [r3, #4]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80017c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	6859      	ldr	r1, [r3, #4]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689a      	ldr	r2, [r3, #8]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	430a      	orrs	r2, r1
 80017da:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	689a      	ldr	r2, [r3, #8]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6899      	ldr	r1, [r3, #8]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	68da      	ldr	r2, [r3, #12]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	430a      	orrs	r2, r1
 80017fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001802:	4a58      	ldr	r2, [pc, #352]	; (8001964 <ADC_Init+0x1f4>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d022      	beq.n	800184e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	689a      	ldr	r2, [r3, #8]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001816:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	6899      	ldr	r1, [r3, #8]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	430a      	orrs	r2, r1
 8001828:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	689a      	ldr	r2, [r3, #8]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001838:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6899      	ldr	r1, [r3, #8]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	430a      	orrs	r2, r1
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	e00f      	b.n	800186e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	689a      	ldr	r2, [r3, #8]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800185c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	689a      	ldr	r2, [r3, #8]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800186c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	689a      	ldr	r2, [r3, #8]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f022 0202 	bic.w	r2, r2, #2
 800187c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	6899      	ldr	r1, [r3, #8]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	7e1b      	ldrb	r3, [r3, #24]
 8001888:	005a      	lsls	r2, r3, #1
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	430a      	orrs	r2, r1
 8001890:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d01b      	beq.n	80018d4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	685a      	ldr	r2, [r3, #4]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018aa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	685a      	ldr	r2, [r3, #4]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80018ba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6859      	ldr	r1, [r3, #4]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c6:	3b01      	subs	r3, #1
 80018c8:	035a      	lsls	r2, r3, #13
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	430a      	orrs	r2, r1
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	e007      	b.n	80018e4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	685a      	ldr	r2, [r3, #4]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018e2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80018f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	3b01      	subs	r3, #1
 8001900:	051a      	lsls	r2, r3, #20
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	430a      	orrs	r2, r1
 8001908:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001918:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	6899      	ldr	r1, [r3, #8]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001926:	025a      	lsls	r2, r3, #9
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	430a      	orrs	r2, r1
 800192e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	689a      	ldr	r2, [r3, #8]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800193e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	6899      	ldr	r1, [r3, #8]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	029a      	lsls	r2, r3, #10
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	430a      	orrs	r2, r1
 8001952:	609a      	str	r2, [r3, #8]
}
 8001954:	bf00      	nop
 8001956:	3714      	adds	r7, #20
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	40012300 	.word	0x40012300
 8001964:	0f000001 	.word	0x0f000001

08001968 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001978:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <__NVIC_SetPriorityGrouping+0x44>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001984:	4013      	ands	r3, r2
 8001986:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001990:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001998:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800199a:	4a04      	ldr	r2, [pc, #16]	; (80019ac <__NVIC_SetPriorityGrouping+0x44>)
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	60d3      	str	r3, [r2, #12]
}
 80019a0:	bf00      	nop
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019b4:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <__NVIC_GetPriorityGrouping+0x18>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	0a1b      	lsrs	r3, r3, #8
 80019ba:	f003 0307 	and.w	r3, r3, #7
}
 80019be:	4618      	mov	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	db0b      	blt.n	80019f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019de:	79fb      	ldrb	r3, [r7, #7]
 80019e0:	f003 021f 	and.w	r2, r3, #31
 80019e4:	4907      	ldr	r1, [pc, #28]	; (8001a04 <__NVIC_EnableIRQ+0x38>)
 80019e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ea:	095b      	lsrs	r3, r3, #5
 80019ec:	2001      	movs	r0, #1
 80019ee:	fa00 f202 	lsl.w	r2, r0, r2
 80019f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	e000e100 	.word	0xe000e100

08001a08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	6039      	str	r1, [r7, #0]
 8001a12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	db0a      	blt.n	8001a32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	490c      	ldr	r1, [pc, #48]	; (8001a54 <__NVIC_SetPriority+0x4c>)
 8001a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a26:	0112      	lsls	r2, r2, #4
 8001a28:	b2d2      	uxtb	r2, r2
 8001a2a:	440b      	add	r3, r1
 8001a2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a30:	e00a      	b.n	8001a48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	4908      	ldr	r1, [pc, #32]	; (8001a58 <__NVIC_SetPriority+0x50>)
 8001a38:	79fb      	ldrb	r3, [r7, #7]
 8001a3a:	f003 030f 	and.w	r3, r3, #15
 8001a3e:	3b04      	subs	r3, #4
 8001a40:	0112      	lsls	r2, r2, #4
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	440b      	add	r3, r1
 8001a46:	761a      	strb	r2, [r3, #24]
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	e000e100 	.word	0xe000e100
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b089      	sub	sp, #36	; 0x24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	f1c3 0307 	rsb	r3, r3, #7
 8001a76:	2b04      	cmp	r3, #4
 8001a78:	bf28      	it	cs
 8001a7a:	2304      	movcs	r3, #4
 8001a7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	3304      	adds	r3, #4
 8001a82:	2b06      	cmp	r3, #6
 8001a84:	d902      	bls.n	8001a8c <NVIC_EncodePriority+0x30>
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	3b03      	subs	r3, #3
 8001a8a:	e000      	b.n	8001a8e <NVIC_EncodePriority+0x32>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a90:	f04f 32ff 	mov.w	r2, #4294967295
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43da      	mvns	r2, r3
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	401a      	ands	r2, r3
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8001aae:	43d9      	mvns	r1, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab4:	4313      	orrs	r3, r2
         );
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3724      	adds	r7, #36	; 0x24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b082      	sub	sp, #8
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f7ff ff4c 	bl	8001968 <__NVIC_SetPriorityGrouping>
}
 8001ad0:	bf00      	nop
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
 8001ae4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aea:	f7ff ff61 	bl	80019b0 <__NVIC_GetPriorityGrouping>
 8001aee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	68b9      	ldr	r1, [r7, #8]
 8001af4:	6978      	ldr	r0, [r7, #20]
 8001af6:	f7ff ffb1 	bl	8001a5c <NVIC_EncodePriority>
 8001afa:	4602      	mov	r2, r0
 8001afc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b00:	4611      	mov	r1, r2
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff ff80 	bl	8001a08 <__NVIC_SetPriority>
}
 8001b08:	bf00      	nop
 8001b0a:	3718      	adds	r7, #24
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff ff54 	bl	80019cc <__NVIC_EnableIRQ>
}
 8001b24:	bf00      	nop
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b089      	sub	sp, #36	; 0x24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b36:	2300      	movs	r3, #0
 8001b38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b42:	2300      	movs	r3, #0
 8001b44:	61fb      	str	r3, [r7, #28]
 8001b46:	e16b      	b.n	8001e20 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b48:	2201      	movs	r2, #1
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	f040 815a 	bne.w	8001e1a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f003 0303 	and.w	r3, r3, #3
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d005      	beq.n	8001b7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d130      	bne.n	8001be0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	2203      	movs	r2, #3
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	4013      	ands	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	68da      	ldr	r2, [r3, #12]
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	091b      	lsrs	r3, r3, #4
 8001bca:	f003 0201 	and.w	r2, r3, #1
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 0303 	and.w	r3, r3, #3
 8001be8:	2b03      	cmp	r3, #3
 8001bea:	d017      	beq.n	8001c1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	2203      	movs	r2, #3
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4013      	ands	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	689a      	ldr	r2, [r3, #8]
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f003 0303 	and.w	r3, r3, #3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d123      	bne.n	8001c70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	08da      	lsrs	r2, r3, #3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3208      	adds	r2, #8
 8001c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	f003 0307 	and.w	r3, r3, #7
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	220f      	movs	r2, #15
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	43db      	mvns	r3, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	691a      	ldr	r2, [r3, #16]
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	08da      	lsrs	r2, r3, #3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	3208      	adds	r2, #8
 8001c6a:	69b9      	ldr	r1, [r7, #24]
 8001c6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	2203      	movs	r2, #3
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	43db      	mvns	r3, r3
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4013      	ands	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f003 0203 	and.w	r2, r3, #3
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	f000 80b4 	beq.w	8001e1a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	4b60      	ldr	r3, [pc, #384]	; (8001e38 <HAL_GPIO_Init+0x30c>)
 8001cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cba:	4a5f      	ldr	r2, [pc, #380]	; (8001e38 <HAL_GPIO_Init+0x30c>)
 8001cbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cc2:	4b5d      	ldr	r3, [pc, #372]	; (8001e38 <HAL_GPIO_Init+0x30c>)
 8001cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cce:	4a5b      	ldr	r2, [pc, #364]	; (8001e3c <HAL_GPIO_Init+0x310>)
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	089b      	lsrs	r3, r3, #2
 8001cd4:	3302      	adds	r3, #2
 8001cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	f003 0303 	and.w	r3, r3, #3
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	220f      	movs	r2, #15
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	43db      	mvns	r3, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a52      	ldr	r2, [pc, #328]	; (8001e40 <HAL_GPIO_Init+0x314>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d02b      	beq.n	8001d52 <HAL_GPIO_Init+0x226>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a51      	ldr	r2, [pc, #324]	; (8001e44 <HAL_GPIO_Init+0x318>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d025      	beq.n	8001d4e <HAL_GPIO_Init+0x222>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a50      	ldr	r2, [pc, #320]	; (8001e48 <HAL_GPIO_Init+0x31c>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d01f      	beq.n	8001d4a <HAL_GPIO_Init+0x21e>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a4f      	ldr	r2, [pc, #316]	; (8001e4c <HAL_GPIO_Init+0x320>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d019      	beq.n	8001d46 <HAL_GPIO_Init+0x21a>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a4e      	ldr	r2, [pc, #312]	; (8001e50 <HAL_GPIO_Init+0x324>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d013      	beq.n	8001d42 <HAL_GPIO_Init+0x216>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a4d      	ldr	r2, [pc, #308]	; (8001e54 <HAL_GPIO_Init+0x328>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d00d      	beq.n	8001d3e <HAL_GPIO_Init+0x212>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a4c      	ldr	r2, [pc, #304]	; (8001e58 <HAL_GPIO_Init+0x32c>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d007      	beq.n	8001d3a <HAL_GPIO_Init+0x20e>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a4b      	ldr	r2, [pc, #300]	; (8001e5c <HAL_GPIO_Init+0x330>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d101      	bne.n	8001d36 <HAL_GPIO_Init+0x20a>
 8001d32:	2307      	movs	r3, #7
 8001d34:	e00e      	b.n	8001d54 <HAL_GPIO_Init+0x228>
 8001d36:	2308      	movs	r3, #8
 8001d38:	e00c      	b.n	8001d54 <HAL_GPIO_Init+0x228>
 8001d3a:	2306      	movs	r3, #6
 8001d3c:	e00a      	b.n	8001d54 <HAL_GPIO_Init+0x228>
 8001d3e:	2305      	movs	r3, #5
 8001d40:	e008      	b.n	8001d54 <HAL_GPIO_Init+0x228>
 8001d42:	2304      	movs	r3, #4
 8001d44:	e006      	b.n	8001d54 <HAL_GPIO_Init+0x228>
 8001d46:	2303      	movs	r3, #3
 8001d48:	e004      	b.n	8001d54 <HAL_GPIO_Init+0x228>
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	e002      	b.n	8001d54 <HAL_GPIO_Init+0x228>
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e000      	b.n	8001d54 <HAL_GPIO_Init+0x228>
 8001d52:	2300      	movs	r3, #0
 8001d54:	69fa      	ldr	r2, [r7, #28]
 8001d56:	f002 0203 	and.w	r2, r2, #3
 8001d5a:	0092      	lsls	r2, r2, #2
 8001d5c:	4093      	lsls	r3, r2
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d64:	4935      	ldr	r1, [pc, #212]	; (8001e3c <HAL_GPIO_Init+0x310>)
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	089b      	lsrs	r3, r3, #2
 8001d6a:	3302      	adds	r3, #2
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d72:	4b3b      	ldr	r3, [pc, #236]	; (8001e60 <HAL_GPIO_Init+0x334>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d96:	4a32      	ldr	r2, [pc, #200]	; (8001e60 <HAL_GPIO_Init+0x334>)
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d9c:	4b30      	ldr	r3, [pc, #192]	; (8001e60 <HAL_GPIO_Init+0x334>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	43db      	mvns	r3, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4013      	ands	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d003      	beq.n	8001dc0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dc0:	4a27      	ldr	r2, [pc, #156]	; (8001e60 <HAL_GPIO_Init+0x334>)
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dc6:	4b26      	ldr	r3, [pc, #152]	; (8001e60 <HAL_GPIO_Init+0x334>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	43db      	mvns	r3, r3
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d003      	beq.n	8001dea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dea:	4a1d      	ldr	r2, [pc, #116]	; (8001e60 <HAL_GPIO_Init+0x334>)
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001df0:	4b1b      	ldr	r3, [pc, #108]	; (8001e60 <HAL_GPIO_Init+0x334>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d003      	beq.n	8001e14 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e14:	4a12      	ldr	r2, [pc, #72]	; (8001e60 <HAL_GPIO_Init+0x334>)
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	61fb      	str	r3, [r7, #28]
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	2b0f      	cmp	r3, #15
 8001e24:	f67f ae90 	bls.w	8001b48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e28:	bf00      	nop
 8001e2a:	bf00      	nop
 8001e2c:	3724      	adds	r7, #36	; 0x24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	40013800 	.word	0x40013800
 8001e40:	40020000 	.word	0x40020000
 8001e44:	40020400 	.word	0x40020400
 8001e48:	40020800 	.word	0x40020800
 8001e4c:	40020c00 	.word	0x40020c00
 8001e50:	40021000 	.word	0x40021000
 8001e54:	40021400 	.word	0x40021400
 8001e58:	40021800 	.word	0x40021800
 8001e5c:	40021c00 	.word	0x40021c00
 8001e60:	40013c00 	.word	0x40013c00

08001e64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	691a      	ldr	r2, [r3, #16]
 8001e74:	887b      	ldrh	r3, [r7, #2]
 8001e76:	4013      	ands	r3, r2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d002      	beq.n	8001e82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	73fb      	strb	r3, [r7, #15]
 8001e80:	e001      	b.n	8001e86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e82:	2300      	movs	r3, #0
 8001e84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3714      	adds	r7, #20
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	807b      	strh	r3, [r7, #2]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ea4:	787b      	ldrb	r3, [r7, #1]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eaa:	887a      	ldrh	r2, [r7, #2]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001eb0:	e003      	b.n	8001eba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001eb2:	887b      	ldrh	r3, [r7, #2]
 8001eb4:	041a      	lsls	r2, r3, #16
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	619a      	str	r2, [r3, #24]
}
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
	...

08001ec8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e264      	b.n	80023a4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d075      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ee6:	4ba3      	ldr	r3, [pc, #652]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f003 030c 	and.w	r3, r3, #12
 8001eee:	2b04      	cmp	r3, #4
 8001ef0:	d00c      	beq.n	8001f0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ef2:	4ba0      	ldr	r3, [pc, #640]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001efa:	2b08      	cmp	r3, #8
 8001efc:	d112      	bne.n	8001f24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001efe:	4b9d      	ldr	r3, [pc, #628]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f0a:	d10b      	bne.n	8001f24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f0c:	4b99      	ldr	r3, [pc, #612]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d05b      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x108>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d157      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e23f      	b.n	80023a4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f2c:	d106      	bne.n	8001f3c <HAL_RCC_OscConfig+0x74>
 8001f2e:	4b91      	ldr	r3, [pc, #580]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a90      	ldr	r2, [pc, #576]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 8001f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f38:	6013      	str	r3, [r2, #0]
 8001f3a:	e01d      	b.n	8001f78 <HAL_RCC_OscConfig+0xb0>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f44:	d10c      	bne.n	8001f60 <HAL_RCC_OscConfig+0x98>
 8001f46:	4b8b      	ldr	r3, [pc, #556]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a8a      	ldr	r2, [pc, #552]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 8001f4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f50:	6013      	str	r3, [r2, #0]
 8001f52:	4b88      	ldr	r3, [pc, #544]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a87      	ldr	r2, [pc, #540]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 8001f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f5c:	6013      	str	r3, [r2, #0]
 8001f5e:	e00b      	b.n	8001f78 <HAL_RCC_OscConfig+0xb0>
 8001f60:	4b84      	ldr	r3, [pc, #528]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a83      	ldr	r2, [pc, #524]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 8001f66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f6a:	6013      	str	r3, [r2, #0]
 8001f6c:	4b81      	ldr	r3, [pc, #516]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a80      	ldr	r2, [pc, #512]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 8001f72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d013      	beq.n	8001fa8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f80:	f7ff f8c2 	bl	8001108 <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f88:	f7ff f8be 	bl	8001108 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b64      	cmp	r3, #100	; 0x64
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e204      	b.n	80023a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f9a:	4b76      	ldr	r3, [pc, #472]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d0f0      	beq.n	8001f88 <HAL_RCC_OscConfig+0xc0>
 8001fa6:	e014      	b.n	8001fd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa8:	f7ff f8ae 	bl	8001108 <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fb0:	f7ff f8aa 	bl	8001108 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b64      	cmp	r3, #100	; 0x64
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e1f0      	b.n	80023a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fc2:	4b6c      	ldr	r3, [pc, #432]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1f0      	bne.n	8001fb0 <HAL_RCC_OscConfig+0xe8>
 8001fce:	e000      	b.n	8001fd2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d063      	beq.n	80020a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fde:	4b65      	ldr	r3, [pc, #404]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 030c 	and.w	r3, r3, #12
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00b      	beq.n	8002002 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fea:	4b62      	ldr	r3, [pc, #392]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ff2:	2b08      	cmp	r3, #8
 8001ff4:	d11c      	bne.n	8002030 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ff6:	4b5f      	ldr	r3, [pc, #380]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d116      	bne.n	8002030 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002002:	4b5c      	ldr	r3, [pc, #368]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d005      	beq.n	800201a <HAL_RCC_OscConfig+0x152>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d001      	beq.n	800201a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e1c4      	b.n	80023a4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800201a:	4b56      	ldr	r3, [pc, #344]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	4952      	ldr	r1, [pc, #328]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 800202a:	4313      	orrs	r3, r2
 800202c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800202e:	e03a      	b.n	80020a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d020      	beq.n	800207a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002038:	4b4f      	ldr	r3, [pc, #316]	; (8002178 <HAL_RCC_OscConfig+0x2b0>)
 800203a:	2201      	movs	r2, #1
 800203c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800203e:	f7ff f863 	bl	8001108 <HAL_GetTick>
 8002042:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002044:	e008      	b.n	8002058 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002046:	f7ff f85f 	bl	8001108 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e1a5      	b.n	80023a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002058:	4b46      	ldr	r3, [pc, #280]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d0f0      	beq.n	8002046 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002064:	4b43      	ldr	r3, [pc, #268]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	691b      	ldr	r3, [r3, #16]
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	4940      	ldr	r1, [pc, #256]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 8002074:	4313      	orrs	r3, r2
 8002076:	600b      	str	r3, [r1, #0]
 8002078:	e015      	b.n	80020a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800207a:	4b3f      	ldr	r3, [pc, #252]	; (8002178 <HAL_RCC_OscConfig+0x2b0>)
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002080:	f7ff f842 	bl	8001108 <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002088:	f7ff f83e 	bl	8001108 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e184      	b.n	80023a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800209a:	4b36      	ldr	r3, [pc, #216]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1f0      	bne.n	8002088 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0308 	and.w	r3, r3, #8
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d030      	beq.n	8002114 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	695b      	ldr	r3, [r3, #20]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d016      	beq.n	80020e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020ba:	4b30      	ldr	r3, [pc, #192]	; (800217c <HAL_RCC_OscConfig+0x2b4>)
 80020bc:	2201      	movs	r2, #1
 80020be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c0:	f7ff f822 	bl	8001108 <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020c8:	f7ff f81e 	bl	8001108 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e164      	b.n	80023a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020da:	4b26      	ldr	r3, [pc, #152]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 80020dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d0f0      	beq.n	80020c8 <HAL_RCC_OscConfig+0x200>
 80020e6:	e015      	b.n	8002114 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020e8:	4b24      	ldr	r3, [pc, #144]	; (800217c <HAL_RCC_OscConfig+0x2b4>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ee:	f7ff f80b 	bl	8001108 <HAL_GetTick>
 80020f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020f4:	e008      	b.n	8002108 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020f6:	f7ff f807 	bl	8001108 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e14d      	b.n	80023a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002108:	4b1a      	ldr	r3, [pc, #104]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 800210a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1f0      	bne.n	80020f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0304 	and.w	r3, r3, #4
 800211c:	2b00      	cmp	r3, #0
 800211e:	f000 80a0 	beq.w	8002262 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002122:	2300      	movs	r3, #0
 8002124:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002126:	4b13      	ldr	r3, [pc, #76]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d10f      	bne.n	8002152 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	60bb      	str	r3, [r7, #8]
 8002136:	4b0f      	ldr	r3, [pc, #60]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	4a0e      	ldr	r2, [pc, #56]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 800213c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002140:	6413      	str	r3, [r2, #64]	; 0x40
 8002142:	4b0c      	ldr	r3, [pc, #48]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800214a:	60bb      	str	r3, [r7, #8]
 800214c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800214e:	2301      	movs	r3, #1
 8002150:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002152:	4b0b      	ldr	r3, [pc, #44]	; (8002180 <HAL_RCC_OscConfig+0x2b8>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215a:	2b00      	cmp	r3, #0
 800215c:	d121      	bne.n	80021a2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800215e:	4b08      	ldr	r3, [pc, #32]	; (8002180 <HAL_RCC_OscConfig+0x2b8>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a07      	ldr	r2, [pc, #28]	; (8002180 <HAL_RCC_OscConfig+0x2b8>)
 8002164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002168:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800216a:	f7fe ffcd 	bl	8001108 <HAL_GetTick>
 800216e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002170:	e011      	b.n	8002196 <HAL_RCC_OscConfig+0x2ce>
 8002172:	bf00      	nop
 8002174:	40023800 	.word	0x40023800
 8002178:	42470000 	.word	0x42470000
 800217c:	42470e80 	.word	0x42470e80
 8002180:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002184:	f7fe ffc0 	bl	8001108 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b02      	cmp	r3, #2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e106      	b.n	80023a4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002196:	4b85      	ldr	r3, [pc, #532]	; (80023ac <HAL_RCC_OscConfig+0x4e4>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d0f0      	beq.n	8002184 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d106      	bne.n	80021b8 <HAL_RCC_OscConfig+0x2f0>
 80021aa:	4b81      	ldr	r3, [pc, #516]	; (80023b0 <HAL_RCC_OscConfig+0x4e8>)
 80021ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ae:	4a80      	ldr	r2, [pc, #512]	; (80023b0 <HAL_RCC_OscConfig+0x4e8>)
 80021b0:	f043 0301 	orr.w	r3, r3, #1
 80021b4:	6713      	str	r3, [r2, #112]	; 0x70
 80021b6:	e01c      	b.n	80021f2 <HAL_RCC_OscConfig+0x32a>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	2b05      	cmp	r3, #5
 80021be:	d10c      	bne.n	80021da <HAL_RCC_OscConfig+0x312>
 80021c0:	4b7b      	ldr	r3, [pc, #492]	; (80023b0 <HAL_RCC_OscConfig+0x4e8>)
 80021c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c4:	4a7a      	ldr	r2, [pc, #488]	; (80023b0 <HAL_RCC_OscConfig+0x4e8>)
 80021c6:	f043 0304 	orr.w	r3, r3, #4
 80021ca:	6713      	str	r3, [r2, #112]	; 0x70
 80021cc:	4b78      	ldr	r3, [pc, #480]	; (80023b0 <HAL_RCC_OscConfig+0x4e8>)
 80021ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d0:	4a77      	ldr	r2, [pc, #476]	; (80023b0 <HAL_RCC_OscConfig+0x4e8>)
 80021d2:	f043 0301 	orr.w	r3, r3, #1
 80021d6:	6713      	str	r3, [r2, #112]	; 0x70
 80021d8:	e00b      	b.n	80021f2 <HAL_RCC_OscConfig+0x32a>
 80021da:	4b75      	ldr	r3, [pc, #468]	; (80023b0 <HAL_RCC_OscConfig+0x4e8>)
 80021dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021de:	4a74      	ldr	r2, [pc, #464]	; (80023b0 <HAL_RCC_OscConfig+0x4e8>)
 80021e0:	f023 0301 	bic.w	r3, r3, #1
 80021e4:	6713      	str	r3, [r2, #112]	; 0x70
 80021e6:	4b72      	ldr	r3, [pc, #456]	; (80023b0 <HAL_RCC_OscConfig+0x4e8>)
 80021e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ea:	4a71      	ldr	r2, [pc, #452]	; (80023b0 <HAL_RCC_OscConfig+0x4e8>)
 80021ec:	f023 0304 	bic.w	r3, r3, #4
 80021f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d015      	beq.n	8002226 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021fa:	f7fe ff85 	bl	8001108 <HAL_GetTick>
 80021fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002200:	e00a      	b.n	8002218 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002202:	f7fe ff81 	bl	8001108 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002210:	4293      	cmp	r3, r2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e0c5      	b.n	80023a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002218:	4b65      	ldr	r3, [pc, #404]	; (80023b0 <HAL_RCC_OscConfig+0x4e8>)
 800221a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d0ee      	beq.n	8002202 <HAL_RCC_OscConfig+0x33a>
 8002224:	e014      	b.n	8002250 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002226:	f7fe ff6f 	bl	8001108 <HAL_GetTick>
 800222a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800222c:	e00a      	b.n	8002244 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800222e:	f7fe ff6b 	bl	8001108 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	f241 3288 	movw	r2, #5000	; 0x1388
 800223c:	4293      	cmp	r3, r2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e0af      	b.n	80023a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002244:	4b5a      	ldr	r3, [pc, #360]	; (80023b0 <HAL_RCC_OscConfig+0x4e8>)
 8002246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d1ee      	bne.n	800222e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002250:	7dfb      	ldrb	r3, [r7, #23]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d105      	bne.n	8002262 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002256:	4b56      	ldr	r3, [pc, #344]	; (80023b0 <HAL_RCC_OscConfig+0x4e8>)
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	4a55      	ldr	r2, [pc, #340]	; (80023b0 <HAL_RCC_OscConfig+0x4e8>)
 800225c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002260:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	2b00      	cmp	r3, #0
 8002268:	f000 809b 	beq.w	80023a2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800226c:	4b50      	ldr	r3, [pc, #320]	; (80023b0 <HAL_RCC_OscConfig+0x4e8>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f003 030c 	and.w	r3, r3, #12
 8002274:	2b08      	cmp	r3, #8
 8002276:	d05c      	beq.n	8002332 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	2b02      	cmp	r3, #2
 800227e:	d141      	bne.n	8002304 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002280:	4b4c      	ldr	r3, [pc, #304]	; (80023b4 <HAL_RCC_OscConfig+0x4ec>)
 8002282:	2200      	movs	r2, #0
 8002284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002286:	f7fe ff3f 	bl	8001108 <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800228c:	e008      	b.n	80022a0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800228e:	f7fe ff3b 	bl	8001108 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e081      	b.n	80023a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022a0:	4b43      	ldr	r3, [pc, #268]	; (80023b0 <HAL_RCC_OscConfig+0x4e8>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1f0      	bne.n	800228e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	69da      	ldr	r2, [r3, #28]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a1b      	ldr	r3, [r3, #32]
 80022b4:	431a      	orrs	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ba:	019b      	lsls	r3, r3, #6
 80022bc:	431a      	orrs	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c2:	085b      	lsrs	r3, r3, #1
 80022c4:	3b01      	subs	r3, #1
 80022c6:	041b      	lsls	r3, r3, #16
 80022c8:	431a      	orrs	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ce:	061b      	lsls	r3, r3, #24
 80022d0:	4937      	ldr	r1, [pc, #220]	; (80023b0 <HAL_RCC_OscConfig+0x4e8>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022d6:	4b37      	ldr	r3, [pc, #220]	; (80023b4 <HAL_RCC_OscConfig+0x4ec>)
 80022d8:	2201      	movs	r2, #1
 80022da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022dc:	f7fe ff14 	bl	8001108 <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022e4:	f7fe ff10 	bl	8001108 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e056      	b.n	80023a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022f6:	4b2e      	ldr	r3, [pc, #184]	; (80023b0 <HAL_RCC_OscConfig+0x4e8>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d0f0      	beq.n	80022e4 <HAL_RCC_OscConfig+0x41c>
 8002302:	e04e      	b.n	80023a2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002304:	4b2b      	ldr	r3, [pc, #172]	; (80023b4 <HAL_RCC_OscConfig+0x4ec>)
 8002306:	2200      	movs	r2, #0
 8002308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230a:	f7fe fefd 	bl	8001108 <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002310:	e008      	b.n	8002324 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002312:	f7fe fef9 	bl	8001108 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e03f      	b.n	80023a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002324:	4b22      	ldr	r3, [pc, #136]	; (80023b0 <HAL_RCC_OscConfig+0x4e8>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d1f0      	bne.n	8002312 <HAL_RCC_OscConfig+0x44a>
 8002330:	e037      	b.n	80023a2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d101      	bne.n	800233e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e032      	b.n	80023a4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800233e:	4b1c      	ldr	r3, [pc, #112]	; (80023b0 <HAL_RCC_OscConfig+0x4e8>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d028      	beq.n	800239e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002356:	429a      	cmp	r2, r3
 8002358:	d121      	bne.n	800239e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002364:	429a      	cmp	r2, r3
 8002366:	d11a      	bne.n	800239e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800236e:	4013      	ands	r3, r2
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002374:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002376:	4293      	cmp	r3, r2
 8002378:	d111      	bne.n	800239e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002384:	085b      	lsrs	r3, r3, #1
 8002386:	3b01      	subs	r3, #1
 8002388:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800238a:	429a      	cmp	r2, r3
 800238c:	d107      	bne.n	800239e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002398:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800239a:	429a      	cmp	r2, r3
 800239c:	d001      	beq.n	80023a2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e000      	b.n	80023a4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3718      	adds	r7, #24
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40007000 	.word	0x40007000
 80023b0:	40023800 	.word	0x40023800
 80023b4:	42470060 	.word	0x42470060

080023b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d101      	bne.n	80023cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e0cc      	b.n	8002566 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023cc:	4b68      	ldr	r3, [pc, #416]	; (8002570 <HAL_RCC_ClockConfig+0x1b8>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0307 	and.w	r3, r3, #7
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d90c      	bls.n	80023f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023da:	4b65      	ldr	r3, [pc, #404]	; (8002570 <HAL_RCC_ClockConfig+0x1b8>)
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	b2d2      	uxtb	r2, r2
 80023e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023e2:	4b63      	ldr	r3, [pc, #396]	; (8002570 <HAL_RCC_ClockConfig+0x1b8>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0307 	and.w	r3, r3, #7
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d001      	beq.n	80023f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e0b8      	b.n	8002566 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d020      	beq.n	8002442 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0304 	and.w	r3, r3, #4
 8002408:	2b00      	cmp	r3, #0
 800240a:	d005      	beq.n	8002418 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800240c:	4b59      	ldr	r3, [pc, #356]	; (8002574 <HAL_RCC_ClockConfig+0x1bc>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	4a58      	ldr	r2, [pc, #352]	; (8002574 <HAL_RCC_ClockConfig+0x1bc>)
 8002412:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002416:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0308 	and.w	r3, r3, #8
 8002420:	2b00      	cmp	r3, #0
 8002422:	d005      	beq.n	8002430 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002424:	4b53      	ldr	r3, [pc, #332]	; (8002574 <HAL_RCC_ClockConfig+0x1bc>)
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	4a52      	ldr	r2, [pc, #328]	; (8002574 <HAL_RCC_ClockConfig+0x1bc>)
 800242a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800242e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002430:	4b50      	ldr	r3, [pc, #320]	; (8002574 <HAL_RCC_ClockConfig+0x1bc>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	494d      	ldr	r1, [pc, #308]	; (8002574 <HAL_RCC_ClockConfig+0x1bc>)
 800243e:	4313      	orrs	r3, r2
 8002440:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b00      	cmp	r3, #0
 800244c:	d044      	beq.n	80024d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d107      	bne.n	8002466 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002456:	4b47      	ldr	r3, [pc, #284]	; (8002574 <HAL_RCC_ClockConfig+0x1bc>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d119      	bne.n	8002496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e07f      	b.n	8002566 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	2b02      	cmp	r3, #2
 800246c:	d003      	beq.n	8002476 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002472:	2b03      	cmp	r3, #3
 8002474:	d107      	bne.n	8002486 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002476:	4b3f      	ldr	r3, [pc, #252]	; (8002574 <HAL_RCC_ClockConfig+0x1bc>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d109      	bne.n	8002496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e06f      	b.n	8002566 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002486:	4b3b      	ldr	r3, [pc, #236]	; (8002574 <HAL_RCC_ClockConfig+0x1bc>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e067      	b.n	8002566 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002496:	4b37      	ldr	r3, [pc, #220]	; (8002574 <HAL_RCC_ClockConfig+0x1bc>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f023 0203 	bic.w	r2, r3, #3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	4934      	ldr	r1, [pc, #208]	; (8002574 <HAL_RCC_ClockConfig+0x1bc>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024a8:	f7fe fe2e 	bl	8001108 <HAL_GetTick>
 80024ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ae:	e00a      	b.n	80024c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024b0:	f7fe fe2a 	bl	8001108 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80024be:	4293      	cmp	r3, r2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e04f      	b.n	8002566 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024c6:	4b2b      	ldr	r3, [pc, #172]	; (8002574 <HAL_RCC_ClockConfig+0x1bc>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 020c 	and.w	r2, r3, #12
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d1eb      	bne.n	80024b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024d8:	4b25      	ldr	r3, [pc, #148]	; (8002570 <HAL_RCC_ClockConfig+0x1b8>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0307 	and.w	r3, r3, #7
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d20c      	bcs.n	8002500 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024e6:	4b22      	ldr	r3, [pc, #136]	; (8002570 <HAL_RCC_ClockConfig+0x1b8>)
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	b2d2      	uxtb	r2, r2
 80024ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ee:	4b20      	ldr	r3, [pc, #128]	; (8002570 <HAL_RCC_ClockConfig+0x1b8>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0307 	and.w	r3, r3, #7
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d001      	beq.n	8002500 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e032      	b.n	8002566 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0304 	and.w	r3, r3, #4
 8002508:	2b00      	cmp	r3, #0
 800250a:	d008      	beq.n	800251e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800250c:	4b19      	ldr	r3, [pc, #100]	; (8002574 <HAL_RCC_ClockConfig+0x1bc>)
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	4916      	ldr	r1, [pc, #88]	; (8002574 <HAL_RCC_ClockConfig+0x1bc>)
 800251a:	4313      	orrs	r3, r2
 800251c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0308 	and.w	r3, r3, #8
 8002526:	2b00      	cmp	r3, #0
 8002528:	d009      	beq.n	800253e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800252a:	4b12      	ldr	r3, [pc, #72]	; (8002574 <HAL_RCC_ClockConfig+0x1bc>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	490e      	ldr	r1, [pc, #56]	; (8002574 <HAL_RCC_ClockConfig+0x1bc>)
 800253a:	4313      	orrs	r3, r2
 800253c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800253e:	f000 f821 	bl	8002584 <HAL_RCC_GetSysClockFreq>
 8002542:	4602      	mov	r2, r0
 8002544:	4b0b      	ldr	r3, [pc, #44]	; (8002574 <HAL_RCC_ClockConfig+0x1bc>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	091b      	lsrs	r3, r3, #4
 800254a:	f003 030f 	and.w	r3, r3, #15
 800254e:	490a      	ldr	r1, [pc, #40]	; (8002578 <HAL_RCC_ClockConfig+0x1c0>)
 8002550:	5ccb      	ldrb	r3, [r1, r3]
 8002552:	fa22 f303 	lsr.w	r3, r2, r3
 8002556:	4a09      	ldr	r2, [pc, #36]	; (800257c <HAL_RCC_ClockConfig+0x1c4>)
 8002558:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800255a:	4b09      	ldr	r3, [pc, #36]	; (8002580 <HAL_RCC_ClockConfig+0x1c8>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4618      	mov	r0, r3
 8002560:	f7fe fcd0 	bl	8000f04 <HAL_InitTick>

  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	40023c00 	.word	0x40023c00
 8002574:	40023800 	.word	0x40023800
 8002578:	08004424 	.word	0x08004424
 800257c:	20000000 	.word	0x20000000
 8002580:	20000004 	.word	0x20000004

08002584 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002584:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002588:	b084      	sub	sp, #16
 800258a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800258c:	2300      	movs	r3, #0
 800258e:	607b      	str	r3, [r7, #4]
 8002590:	2300      	movs	r3, #0
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	2300      	movs	r3, #0
 8002596:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002598:	2300      	movs	r3, #0
 800259a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800259c:	4b67      	ldr	r3, [pc, #412]	; (800273c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f003 030c 	and.w	r3, r3, #12
 80025a4:	2b08      	cmp	r3, #8
 80025a6:	d00d      	beq.n	80025c4 <HAL_RCC_GetSysClockFreq+0x40>
 80025a8:	2b08      	cmp	r3, #8
 80025aa:	f200 80bd 	bhi.w	8002728 <HAL_RCC_GetSysClockFreq+0x1a4>
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d002      	beq.n	80025b8 <HAL_RCC_GetSysClockFreq+0x34>
 80025b2:	2b04      	cmp	r3, #4
 80025b4:	d003      	beq.n	80025be <HAL_RCC_GetSysClockFreq+0x3a>
 80025b6:	e0b7      	b.n	8002728 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025b8:	4b61      	ldr	r3, [pc, #388]	; (8002740 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80025ba:	60bb      	str	r3, [r7, #8]
       break;
 80025bc:	e0b7      	b.n	800272e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025be:	4b61      	ldr	r3, [pc, #388]	; (8002744 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80025c0:	60bb      	str	r3, [r7, #8]
      break;
 80025c2:	e0b4      	b.n	800272e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025c4:	4b5d      	ldr	r3, [pc, #372]	; (800273c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025cc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025ce:	4b5b      	ldr	r3, [pc, #364]	; (800273c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d04d      	beq.n	8002676 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025da:	4b58      	ldr	r3, [pc, #352]	; (800273c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	099b      	lsrs	r3, r3, #6
 80025e0:	461a      	mov	r2, r3
 80025e2:	f04f 0300 	mov.w	r3, #0
 80025e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80025ea:	f04f 0100 	mov.w	r1, #0
 80025ee:	ea02 0800 	and.w	r8, r2, r0
 80025f2:	ea03 0901 	and.w	r9, r3, r1
 80025f6:	4640      	mov	r0, r8
 80025f8:	4649      	mov	r1, r9
 80025fa:	f04f 0200 	mov.w	r2, #0
 80025fe:	f04f 0300 	mov.w	r3, #0
 8002602:	014b      	lsls	r3, r1, #5
 8002604:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002608:	0142      	lsls	r2, r0, #5
 800260a:	4610      	mov	r0, r2
 800260c:	4619      	mov	r1, r3
 800260e:	ebb0 0008 	subs.w	r0, r0, r8
 8002612:	eb61 0109 	sbc.w	r1, r1, r9
 8002616:	f04f 0200 	mov.w	r2, #0
 800261a:	f04f 0300 	mov.w	r3, #0
 800261e:	018b      	lsls	r3, r1, #6
 8002620:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002624:	0182      	lsls	r2, r0, #6
 8002626:	1a12      	subs	r2, r2, r0
 8002628:	eb63 0301 	sbc.w	r3, r3, r1
 800262c:	f04f 0000 	mov.w	r0, #0
 8002630:	f04f 0100 	mov.w	r1, #0
 8002634:	00d9      	lsls	r1, r3, #3
 8002636:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800263a:	00d0      	lsls	r0, r2, #3
 800263c:	4602      	mov	r2, r0
 800263e:	460b      	mov	r3, r1
 8002640:	eb12 0208 	adds.w	r2, r2, r8
 8002644:	eb43 0309 	adc.w	r3, r3, r9
 8002648:	f04f 0000 	mov.w	r0, #0
 800264c:	f04f 0100 	mov.w	r1, #0
 8002650:	0259      	lsls	r1, r3, #9
 8002652:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002656:	0250      	lsls	r0, r2, #9
 8002658:	4602      	mov	r2, r0
 800265a:	460b      	mov	r3, r1
 800265c:	4610      	mov	r0, r2
 800265e:	4619      	mov	r1, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	461a      	mov	r2, r3
 8002664:	f04f 0300 	mov.w	r3, #0
 8002668:	f7fd fdae 	bl	80001c8 <__aeabi_uldivmod>
 800266c:	4602      	mov	r2, r0
 800266e:	460b      	mov	r3, r1
 8002670:	4613      	mov	r3, r2
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	e04a      	b.n	800270c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002676:	4b31      	ldr	r3, [pc, #196]	; (800273c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	099b      	lsrs	r3, r3, #6
 800267c:	461a      	mov	r2, r3
 800267e:	f04f 0300 	mov.w	r3, #0
 8002682:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002686:	f04f 0100 	mov.w	r1, #0
 800268a:	ea02 0400 	and.w	r4, r2, r0
 800268e:	ea03 0501 	and.w	r5, r3, r1
 8002692:	4620      	mov	r0, r4
 8002694:	4629      	mov	r1, r5
 8002696:	f04f 0200 	mov.w	r2, #0
 800269a:	f04f 0300 	mov.w	r3, #0
 800269e:	014b      	lsls	r3, r1, #5
 80026a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80026a4:	0142      	lsls	r2, r0, #5
 80026a6:	4610      	mov	r0, r2
 80026a8:	4619      	mov	r1, r3
 80026aa:	1b00      	subs	r0, r0, r4
 80026ac:	eb61 0105 	sbc.w	r1, r1, r5
 80026b0:	f04f 0200 	mov.w	r2, #0
 80026b4:	f04f 0300 	mov.w	r3, #0
 80026b8:	018b      	lsls	r3, r1, #6
 80026ba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80026be:	0182      	lsls	r2, r0, #6
 80026c0:	1a12      	subs	r2, r2, r0
 80026c2:	eb63 0301 	sbc.w	r3, r3, r1
 80026c6:	f04f 0000 	mov.w	r0, #0
 80026ca:	f04f 0100 	mov.w	r1, #0
 80026ce:	00d9      	lsls	r1, r3, #3
 80026d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80026d4:	00d0      	lsls	r0, r2, #3
 80026d6:	4602      	mov	r2, r0
 80026d8:	460b      	mov	r3, r1
 80026da:	1912      	adds	r2, r2, r4
 80026dc:	eb45 0303 	adc.w	r3, r5, r3
 80026e0:	f04f 0000 	mov.w	r0, #0
 80026e4:	f04f 0100 	mov.w	r1, #0
 80026e8:	0299      	lsls	r1, r3, #10
 80026ea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80026ee:	0290      	lsls	r0, r2, #10
 80026f0:	4602      	mov	r2, r0
 80026f2:	460b      	mov	r3, r1
 80026f4:	4610      	mov	r0, r2
 80026f6:	4619      	mov	r1, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	461a      	mov	r2, r3
 80026fc:	f04f 0300 	mov.w	r3, #0
 8002700:	f7fd fd62 	bl	80001c8 <__aeabi_uldivmod>
 8002704:	4602      	mov	r2, r0
 8002706:	460b      	mov	r3, r1
 8002708:	4613      	mov	r3, r2
 800270a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800270c:	4b0b      	ldr	r3, [pc, #44]	; (800273c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	0c1b      	lsrs	r3, r3, #16
 8002712:	f003 0303 	and.w	r3, r3, #3
 8002716:	3301      	adds	r3, #1
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	fbb2 f3f3 	udiv	r3, r2, r3
 8002724:	60bb      	str	r3, [r7, #8]
      break;
 8002726:	e002      	b.n	800272e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002728:	4b05      	ldr	r3, [pc, #20]	; (8002740 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800272a:	60bb      	str	r3, [r7, #8]
      break;
 800272c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800272e:	68bb      	ldr	r3, [r7, #8]
}
 8002730:	4618      	mov	r0, r3
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800273a:	bf00      	nop
 800273c:	40023800 	.word	0x40023800
 8002740:	00f42400 	.word	0x00f42400
 8002744:	007a1200 	.word	0x007a1200

08002748 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800274c:	4b03      	ldr	r3, [pc, #12]	; (800275c <HAL_RCC_GetHCLKFreq+0x14>)
 800274e:	681b      	ldr	r3, [r3, #0]
}
 8002750:	4618      	mov	r0, r3
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	20000000 	.word	0x20000000

08002760 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002764:	f7ff fff0 	bl	8002748 <HAL_RCC_GetHCLKFreq>
 8002768:	4602      	mov	r2, r0
 800276a:	4b05      	ldr	r3, [pc, #20]	; (8002780 <HAL_RCC_GetPCLK2Freq+0x20>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	0b5b      	lsrs	r3, r3, #13
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	4903      	ldr	r1, [pc, #12]	; (8002784 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002776:	5ccb      	ldrb	r3, [r1, r3]
 8002778:	fa22 f303 	lsr.w	r3, r2, r3
}
 800277c:	4618      	mov	r0, r3
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40023800 	.word	0x40023800
 8002784:	08004434 	.word	0x08004434

08002788 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	220f      	movs	r2, #15
 8002796:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002798:	4b12      	ldr	r3, [pc, #72]	; (80027e4 <HAL_RCC_GetClockConfig+0x5c>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f003 0203 	and.w	r2, r3, #3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80027a4:	4b0f      	ldr	r3, [pc, #60]	; (80027e4 <HAL_RCC_GetClockConfig+0x5c>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80027b0:	4b0c      	ldr	r3, [pc, #48]	; (80027e4 <HAL_RCC_GetClockConfig+0x5c>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80027bc:	4b09      	ldr	r3, [pc, #36]	; (80027e4 <HAL_RCC_GetClockConfig+0x5c>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	08db      	lsrs	r3, r3, #3
 80027c2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80027ca:	4b07      	ldr	r3, [pc, #28]	; (80027e8 <HAL_RCC_GetClockConfig+0x60>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0207 	and.w	r2, r3, #7
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	601a      	str	r2, [r3, #0]
}
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	40023800 	.word	0x40023800
 80027e8:	40023c00 	.word	0x40023c00

080027ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e07b      	b.n	80028f6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002802:	2b00      	cmp	r3, #0
 8002804:	d108      	bne.n	8002818 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800280e:	d009      	beq.n	8002824 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	61da      	str	r2, [r3, #28]
 8002816:	e005      	b.n	8002824 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d106      	bne.n	8002844 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f7fe fac0 	bl	8000dc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2202      	movs	r2, #2
 8002848:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800285a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800286c:	431a      	orrs	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002876:	431a      	orrs	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	431a      	orrs	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	431a      	orrs	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002894:	431a      	orrs	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800289e:	431a      	orrs	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a8:	ea42 0103 	orr.w	r1, r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	430a      	orrs	r2, r1
 80028ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	0c1b      	lsrs	r3, r3, #16
 80028c2:	f003 0104 	and.w	r1, r3, #4
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ca:	f003 0210 	and.w	r2, r3, #16
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	430a      	orrs	r2, r1
 80028d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	69da      	ldr	r2, [r3, #28]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b088      	sub	sp, #32
 8002902:	af00      	add	r7, sp, #0
 8002904:	60f8      	str	r0, [r7, #12]
 8002906:	60b9      	str	r1, [r7, #8]
 8002908:	603b      	str	r3, [r7, #0]
 800290a:	4613      	mov	r3, r2
 800290c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800290e:	2300      	movs	r3, #0
 8002910:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002918:	2b01      	cmp	r3, #1
 800291a:	d101      	bne.n	8002920 <HAL_SPI_Transmit+0x22>
 800291c:	2302      	movs	r3, #2
 800291e:	e126      	b.n	8002b6e <HAL_SPI_Transmit+0x270>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002928:	f7fe fbee 	bl	8001108 <HAL_GetTick>
 800292c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800292e:	88fb      	ldrh	r3, [r7, #6]
 8002930:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b01      	cmp	r3, #1
 800293c:	d002      	beq.n	8002944 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800293e:	2302      	movs	r3, #2
 8002940:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002942:	e10b      	b.n	8002b5c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d002      	beq.n	8002950 <HAL_SPI_Transmit+0x52>
 800294a:	88fb      	ldrh	r3, [r7, #6]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d102      	bne.n	8002956 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002954:	e102      	b.n	8002b5c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2203      	movs	r2, #3
 800295a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	68ba      	ldr	r2, [r7, #8]
 8002968:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	88fa      	ldrh	r2, [r7, #6]
 800296e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	88fa      	ldrh	r2, [r7, #6]
 8002974:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800299c:	d10f      	bne.n	80029be <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c8:	2b40      	cmp	r3, #64	; 0x40
 80029ca:	d007      	beq.n	80029dc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029e4:	d14b      	bne.n	8002a7e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d002      	beq.n	80029f4 <HAL_SPI_Transmit+0xf6>
 80029ee:	8afb      	ldrh	r3, [r7, #22]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d13e      	bne.n	8002a72 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f8:	881a      	ldrh	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a04:	1c9a      	adds	r2, r3, #2
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	3b01      	subs	r3, #1
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a18:	e02b      	b.n	8002a72 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d112      	bne.n	8002a4e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2c:	881a      	ldrh	r2, [r3, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a38:	1c9a      	adds	r2, r3, #2
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	3b01      	subs	r3, #1
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	86da      	strh	r2, [r3, #54]	; 0x36
 8002a4c:	e011      	b.n	8002a72 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a4e:	f7fe fb5b 	bl	8001108 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d803      	bhi.n	8002a66 <HAL_SPI_Transmit+0x168>
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a64:	d102      	bne.n	8002a6c <HAL_SPI_Transmit+0x16e>
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d102      	bne.n	8002a72 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002a70:	e074      	b.n	8002b5c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1ce      	bne.n	8002a1a <HAL_SPI_Transmit+0x11c>
 8002a7c:	e04c      	b.n	8002b18 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d002      	beq.n	8002a8c <HAL_SPI_Transmit+0x18e>
 8002a86:	8afb      	ldrh	r3, [r7, #22]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d140      	bne.n	8002b0e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	330c      	adds	r3, #12
 8002a96:	7812      	ldrb	r2, [r2, #0]
 8002a98:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9e:	1c5a      	adds	r2, r3, #1
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	b29a      	uxth	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002ab2:	e02c      	b.n	8002b0e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d113      	bne.n	8002aea <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	330c      	adds	r3, #12
 8002acc:	7812      	ldrb	r2, [r2, #0]
 8002ace:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad4:	1c5a      	adds	r2, r3, #1
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	86da      	strh	r2, [r3, #54]	; 0x36
 8002ae8:	e011      	b.n	8002b0e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002aea:	f7fe fb0d 	bl	8001108 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d803      	bhi.n	8002b02 <HAL_SPI_Transmit+0x204>
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b00:	d102      	bne.n	8002b08 <HAL_SPI_Transmit+0x20a>
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d102      	bne.n	8002b0e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002b0c:	e026      	b.n	8002b5c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1cd      	bne.n	8002ab4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	6839      	ldr	r1, [r7, #0]
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f000 fbcb 	bl	80032b8 <SPI_EndRxTxTransaction>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d002      	beq.n	8002b2e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2220      	movs	r2, #32
 8002b2c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10a      	bne.n	8002b4c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b36:	2300      	movs	r3, #0
 8002b38:	613b      	str	r3, [r7, #16]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	613b      	str	r3, [r7, #16]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	613b      	str	r3, [r7, #16]
 8002b4a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d002      	beq.n	8002b5a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	77fb      	strb	r3, [r7, #31]
 8002b58:	e000      	b.n	8002b5c <HAL_SPI_Transmit+0x25e>
  }

error:
 8002b5a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002b6c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3720      	adds	r7, #32
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b088      	sub	sp, #32
 8002b7a:	af02      	add	r7, sp, #8
 8002b7c:	60f8      	str	r0, [r7, #12]
 8002b7e:	60b9      	str	r1, [r7, #8]
 8002b80:	603b      	str	r3, [r7, #0]
 8002b82:	4613      	mov	r3, r2
 8002b84:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b86:	2300      	movs	r3, #0
 8002b88:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b92:	d112      	bne.n	8002bba <HAL_SPI_Receive+0x44>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d10e      	bne.n	8002bba <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2204      	movs	r2, #4
 8002ba0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002ba4:	88fa      	ldrh	r2, [r7, #6]
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	9300      	str	r3, [sp, #0]
 8002baa:	4613      	mov	r3, r2
 8002bac:	68ba      	ldr	r2, [r7, #8]
 8002bae:	68b9      	ldr	r1, [r7, #8]
 8002bb0:	68f8      	ldr	r0, [r7, #12]
 8002bb2:	f000 f8f1 	bl	8002d98 <HAL_SPI_TransmitReceive>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	e0ea      	b.n	8002d90 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d101      	bne.n	8002bc8 <HAL_SPI_Receive+0x52>
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	e0e3      	b.n	8002d90 <HAL_SPI_Receive+0x21a>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bd0:	f7fe fa9a 	bl	8001108 <HAL_GetTick>
 8002bd4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d002      	beq.n	8002be8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002be2:	2302      	movs	r3, #2
 8002be4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002be6:	e0ca      	b.n	8002d7e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d002      	beq.n	8002bf4 <HAL_SPI_Receive+0x7e>
 8002bee:	88fb      	ldrh	r3, [r7, #6]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d102      	bne.n	8002bfa <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002bf8:	e0c1      	b.n	8002d7e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2204      	movs	r2, #4
 8002bfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	68ba      	ldr	r2, [r7, #8]
 8002c0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	88fa      	ldrh	r2, [r7, #6]
 8002c12:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	88fa      	ldrh	r2, [r7, #6]
 8002c18:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c40:	d10f      	bne.n	8002c62 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c50:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002c60:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c6c:	2b40      	cmp	r3, #64	; 0x40
 8002c6e:	d007      	beq.n	8002c80 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c7e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d162      	bne.n	8002d4e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002c88:	e02e      	b.n	8002ce8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d115      	bne.n	8002cc4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f103 020c 	add.w	r2, r3, #12
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca4:	7812      	ldrb	r2, [r2, #0]
 8002ca6:	b2d2      	uxtb	r2, r2
 8002ca8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cae:	1c5a      	adds	r2, r3, #1
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002cc2:	e011      	b.n	8002ce8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cc4:	f7fe fa20 	bl	8001108 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d803      	bhi.n	8002cdc <HAL_SPI_Receive+0x166>
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cda:	d102      	bne.n	8002ce2 <HAL_SPI_Receive+0x16c>
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d102      	bne.n	8002ce8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002ce6:	e04a      	b.n	8002d7e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1cb      	bne.n	8002c8a <HAL_SPI_Receive+0x114>
 8002cf2:	e031      	b.n	8002d58 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d113      	bne.n	8002d2a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68da      	ldr	r2, [r3, #12]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0c:	b292      	uxth	r2, r2
 8002d0e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d14:	1c9a      	adds	r2, r3, #2
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	3b01      	subs	r3, #1
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d28:	e011      	b.n	8002d4e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d2a:	f7fe f9ed 	bl	8001108 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d803      	bhi.n	8002d42 <HAL_SPI_Receive+0x1cc>
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d40:	d102      	bne.n	8002d48 <HAL_SPI_Receive+0x1d2>
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d102      	bne.n	8002d4e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002d4c:	e017      	b.n	8002d7e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1cd      	bne.n	8002cf4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	6839      	ldr	r1, [r7, #0]
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f000 fa45 	bl	80031ec <SPI_EndRxTransaction>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d002      	beq.n	8002d6e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d002      	beq.n	8002d7c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	75fb      	strb	r3, [r7, #23]
 8002d7a:	e000      	b.n	8002d7e <HAL_SPI_Receive+0x208>
  }

error :
 8002d7c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002d8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3718      	adds	r7, #24
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b08c      	sub	sp, #48	; 0x30
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
 8002da4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002da6:	2301      	movs	r3, #1
 8002da8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002daa:	2300      	movs	r3, #0
 8002dac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d101      	bne.n	8002dbe <HAL_SPI_TransmitReceive+0x26>
 8002dba:	2302      	movs	r3, #2
 8002dbc:	e18a      	b.n	80030d4 <HAL_SPI_TransmitReceive+0x33c>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002dc6:	f7fe f99f 	bl	8001108 <HAL_GetTick>
 8002dca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002dd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002ddc:	887b      	ldrh	r3, [r7, #2]
 8002dde:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002de0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d00f      	beq.n	8002e08 <HAL_SPI_TransmitReceive+0x70>
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002dee:	d107      	bne.n	8002e00 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d103      	bne.n	8002e00 <HAL_SPI_TransmitReceive+0x68>
 8002df8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	d003      	beq.n	8002e08 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002e00:	2302      	movs	r3, #2
 8002e02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002e06:	e15b      	b.n	80030c0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d005      	beq.n	8002e1a <HAL_SPI_TransmitReceive+0x82>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d002      	beq.n	8002e1a <HAL_SPI_TransmitReceive+0x82>
 8002e14:	887b      	ldrh	r3, [r7, #2]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d103      	bne.n	8002e22 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002e20:	e14e      	b.n	80030c0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b04      	cmp	r3, #4
 8002e2c:	d003      	beq.n	8002e36 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2205      	movs	r2, #5
 8002e32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	887a      	ldrh	r2, [r7, #2]
 8002e46:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	887a      	ldrh	r2, [r7, #2]
 8002e4c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	68ba      	ldr	r2, [r7, #8]
 8002e52:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	887a      	ldrh	r2, [r7, #2]
 8002e58:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	887a      	ldrh	r2, [r7, #2]
 8002e5e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e76:	2b40      	cmp	r3, #64	; 0x40
 8002e78:	d007      	beq.n	8002e8a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e88:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e92:	d178      	bne.n	8002f86 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d002      	beq.n	8002ea2 <HAL_SPI_TransmitReceive+0x10a>
 8002e9c:	8b7b      	ldrh	r3, [r7, #26]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d166      	bne.n	8002f70 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	881a      	ldrh	r2, [r3, #0]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb2:	1c9a      	adds	r2, r3, #2
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ec6:	e053      	b.n	8002f70 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d11b      	bne.n	8002f0e <HAL_SPI_TransmitReceive+0x176>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d016      	beq.n	8002f0e <HAL_SPI_TransmitReceive+0x176>
 8002ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d113      	bne.n	8002f0e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eea:	881a      	ldrh	r2, [r3, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef6:	1c9a      	adds	r2, r3, #2
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	3b01      	subs	r3, #1
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d119      	bne.n	8002f50 <HAL_SPI_TransmitReceive+0x1b8>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d014      	beq.n	8002f50 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68da      	ldr	r2, [r3, #12]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f30:	b292      	uxth	r2, r2
 8002f32:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f38:	1c9a      	adds	r2, r3, #2
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	3b01      	subs	r3, #1
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f50:	f7fe f8da 	bl	8001108 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d807      	bhi.n	8002f70 <HAL_SPI_TransmitReceive+0x1d8>
 8002f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f66:	d003      	beq.n	8002f70 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002f6e:	e0a7      	b.n	80030c0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1a6      	bne.n	8002ec8 <HAL_SPI_TransmitReceive+0x130>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1a1      	bne.n	8002ec8 <HAL_SPI_TransmitReceive+0x130>
 8002f84:	e07c      	b.n	8003080 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d002      	beq.n	8002f94 <HAL_SPI_TransmitReceive+0x1fc>
 8002f8e:	8b7b      	ldrh	r3, [r7, #26]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d16b      	bne.n	800306c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	330c      	adds	r3, #12
 8002f9e:	7812      	ldrb	r2, [r2, #0]
 8002fa0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa6:	1c5a      	adds	r2, r3, #1
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fba:	e057      	b.n	800306c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d11c      	bne.n	8003004 <HAL_SPI_TransmitReceive+0x26c>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d017      	beq.n	8003004 <HAL_SPI_TransmitReceive+0x26c>
 8002fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d114      	bne.n	8003004 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	330c      	adds	r3, #12
 8002fe4:	7812      	ldrb	r2, [r2, #0]
 8002fe6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fec:	1c5a      	adds	r2, r3, #1
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003000:	2300      	movs	r3, #0
 8003002:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b01      	cmp	r3, #1
 8003010:	d119      	bne.n	8003046 <HAL_SPI_TransmitReceive+0x2ae>
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003016:	b29b      	uxth	r3, r3
 8003018:	2b00      	cmp	r3, #0
 800301a:	d014      	beq.n	8003046 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68da      	ldr	r2, [r3, #12]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003026:	b2d2      	uxtb	r2, r2
 8003028:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302e:	1c5a      	adds	r2, r3, #1
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003038:	b29b      	uxth	r3, r3
 800303a:	3b01      	subs	r3, #1
 800303c:	b29a      	uxth	r2, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003042:	2301      	movs	r3, #1
 8003044:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003046:	f7fe f85f 	bl	8001108 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003052:	429a      	cmp	r2, r3
 8003054:	d803      	bhi.n	800305e <HAL_SPI_TransmitReceive+0x2c6>
 8003056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800305c:	d102      	bne.n	8003064 <HAL_SPI_TransmitReceive+0x2cc>
 800305e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003060:	2b00      	cmp	r3, #0
 8003062:	d103      	bne.n	800306c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800306a:	e029      	b.n	80030c0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003070:	b29b      	uxth	r3, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1a2      	bne.n	8002fbc <HAL_SPI_TransmitReceive+0x224>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800307a:	b29b      	uxth	r3, r3
 800307c:	2b00      	cmp	r3, #0
 800307e:	d19d      	bne.n	8002fbc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003082:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f000 f917 	bl	80032b8 <SPI_EndRxTxTransaction>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d006      	beq.n	800309e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2220      	movs	r2, #32
 800309a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800309c:	e010      	b.n	80030c0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10b      	bne.n	80030be <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030a6:	2300      	movs	r3, #0
 80030a8:	617b      	str	r3, [r7, #20]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	617b      	str	r3, [r7, #20]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	617b      	str	r3, [r7, #20]
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	e000      	b.n	80030c0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80030be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80030d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3730      	adds	r7, #48	; 0x30
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b088      	sub	sp, #32
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	603b      	str	r3, [r7, #0]
 80030e8:	4613      	mov	r3, r2
 80030ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80030ec:	f7fe f80c 	bl	8001108 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f4:	1a9b      	subs	r3, r3, r2
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	4413      	add	r3, r2
 80030fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80030fc:	f7fe f804 	bl	8001108 <HAL_GetTick>
 8003100:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003102:	4b39      	ldr	r3, [pc, #228]	; (80031e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	015b      	lsls	r3, r3, #5
 8003108:	0d1b      	lsrs	r3, r3, #20
 800310a:	69fa      	ldr	r2, [r7, #28]
 800310c:	fb02 f303 	mul.w	r3, r2, r3
 8003110:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003112:	e054      	b.n	80031be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311a:	d050      	beq.n	80031be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800311c:	f7fd fff4 	bl	8001108 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	69fa      	ldr	r2, [r7, #28]
 8003128:	429a      	cmp	r2, r3
 800312a:	d902      	bls.n	8003132 <SPI_WaitFlagStateUntilTimeout+0x56>
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d13d      	bne.n	80031ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	685a      	ldr	r2, [r3, #4]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003140:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800314a:	d111      	bne.n	8003170 <SPI_WaitFlagStateUntilTimeout+0x94>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003154:	d004      	beq.n	8003160 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800315e:	d107      	bne.n	8003170 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800316e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003174:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003178:	d10f      	bne.n	800319a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003198:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e017      	b.n	80031de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80031b4:	2300      	movs	r3, #0
 80031b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	3b01      	subs	r3, #1
 80031bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	4013      	ands	r3, r2
 80031c8:	68ba      	ldr	r2, [r7, #8]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	bf0c      	ite	eq
 80031ce:	2301      	moveq	r3, #1
 80031d0:	2300      	movne	r3, #0
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	461a      	mov	r2, r3
 80031d6:	79fb      	ldrb	r3, [r7, #7]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d19b      	bne.n	8003114 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3720      	adds	r7, #32
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	20000000 	.word	0x20000000

080031ec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af02      	add	r7, sp, #8
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003200:	d111      	bne.n	8003226 <SPI_EndRxTransaction+0x3a>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800320a:	d004      	beq.n	8003216 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003214:	d107      	bne.n	8003226 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003224:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800322e:	d12a      	bne.n	8003286 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003238:	d012      	beq.n	8003260 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	9300      	str	r3, [sp, #0]
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	2200      	movs	r2, #0
 8003242:	2180      	movs	r1, #128	; 0x80
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	f7ff ff49 	bl	80030dc <SPI_WaitFlagStateUntilTimeout>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d02d      	beq.n	80032ac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003254:	f043 0220 	orr.w	r2, r3, #32
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e026      	b.n	80032ae <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	9300      	str	r3, [sp, #0]
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	2200      	movs	r2, #0
 8003268:	2101      	movs	r1, #1
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f7ff ff36 	bl	80030dc <SPI_WaitFlagStateUntilTimeout>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d01a      	beq.n	80032ac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327a:	f043 0220 	orr.w	r2, r3, #32
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e013      	b.n	80032ae <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	9300      	str	r3, [sp, #0]
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	2200      	movs	r2, #0
 800328e:	2101      	movs	r1, #1
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f7ff ff23 	bl	80030dc <SPI_WaitFlagStateUntilTimeout>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d007      	beq.n	80032ac <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a0:	f043 0220 	orr.w	r2, r3, #32
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e000      	b.n	80032ae <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
	...

080032b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b088      	sub	sp, #32
 80032bc:	af02      	add	r7, sp, #8
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80032c4:	4b1b      	ldr	r3, [pc, #108]	; (8003334 <SPI_EndRxTxTransaction+0x7c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a1b      	ldr	r2, [pc, #108]	; (8003338 <SPI_EndRxTxTransaction+0x80>)
 80032ca:	fba2 2303 	umull	r2, r3, r2, r3
 80032ce:	0d5b      	lsrs	r3, r3, #21
 80032d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80032d4:	fb02 f303 	mul.w	r3, r2, r3
 80032d8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032e2:	d112      	bne.n	800330a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	9300      	str	r3, [sp, #0]
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	2200      	movs	r2, #0
 80032ec:	2180      	movs	r1, #128	; 0x80
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	f7ff fef4 	bl	80030dc <SPI_WaitFlagStateUntilTimeout>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d016      	beq.n	8003328 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032fe:	f043 0220 	orr.w	r2, r3, #32
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e00f      	b.n	800332a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00a      	beq.n	8003326 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	3b01      	subs	r3, #1
 8003314:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003320:	2b80      	cmp	r3, #128	; 0x80
 8003322:	d0f2      	beq.n	800330a <SPI_EndRxTxTransaction+0x52>
 8003324:	e000      	b.n	8003328 <SPI_EndRxTxTransaction+0x70>
        break;
 8003326:	bf00      	nop
  }

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3718      	adds	r7, #24
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	20000000 	.word	0x20000000
 8003338:	165e9f81 	.word	0x165e9f81

0800333c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e041      	b.n	80033d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d106      	bne.n	8003368 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f7fd fd76 	bl	8000e54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2202      	movs	r2, #2
 800336c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	3304      	adds	r3, #4
 8003378:	4619      	mov	r1, r3
 800337a:	4610      	mov	r0, r2
 800337c:	f000 fc7a 	bl	8003c74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
	...

080033dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d001      	beq.n	80033f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e04e      	b.n	8003492 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2202      	movs	r2, #2
 80033f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68da      	ldr	r2, [r3, #12]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f042 0201 	orr.w	r2, r2, #1
 800340a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a23      	ldr	r2, [pc, #140]	; (80034a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d022      	beq.n	800345c <HAL_TIM_Base_Start_IT+0x80>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800341e:	d01d      	beq.n	800345c <HAL_TIM_Base_Start_IT+0x80>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a1f      	ldr	r2, [pc, #124]	; (80034a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d018      	beq.n	800345c <HAL_TIM_Base_Start_IT+0x80>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a1e      	ldr	r2, [pc, #120]	; (80034a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d013      	beq.n	800345c <HAL_TIM_Base_Start_IT+0x80>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a1c      	ldr	r2, [pc, #112]	; (80034ac <HAL_TIM_Base_Start_IT+0xd0>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d00e      	beq.n	800345c <HAL_TIM_Base_Start_IT+0x80>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a1b      	ldr	r2, [pc, #108]	; (80034b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d009      	beq.n	800345c <HAL_TIM_Base_Start_IT+0x80>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a19      	ldr	r2, [pc, #100]	; (80034b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d004      	beq.n	800345c <HAL_TIM_Base_Start_IT+0x80>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a18      	ldr	r2, [pc, #96]	; (80034b8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d111      	bne.n	8003480 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f003 0307 	and.w	r3, r3, #7
 8003466:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2b06      	cmp	r3, #6
 800346c:	d010      	beq.n	8003490 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f042 0201 	orr.w	r2, r2, #1
 800347c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800347e:	e007      	b.n	8003490 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f042 0201 	orr.w	r2, r2, #1
 800348e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3714      	adds	r7, #20
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	40010000 	.word	0x40010000
 80034a4:	40000400 	.word	0x40000400
 80034a8:	40000800 	.word	0x40000800
 80034ac:	40000c00 	.word	0x40000c00
 80034b0:	40010400 	.word	0x40010400
 80034b4:	40014000 	.word	0x40014000
 80034b8:	40001800 	.word	0x40001800

080034bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e041      	b.n	8003552 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d106      	bne.n	80034e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 f839 	bl	800355a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2202      	movs	r2, #2
 80034ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	3304      	adds	r3, #4
 80034f8:	4619      	mov	r1, r3
 80034fa:	4610      	mov	r0, r2
 80034fc:	f000 fbba 	bl	8003c74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800355a:	b480      	push	{r7}
 800355c:	b083      	sub	sp, #12
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003562:	bf00      	nop
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
	...

08003570 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d109      	bne.n	8003594 <HAL_TIM_PWM_Start+0x24>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b01      	cmp	r3, #1
 800358a:	bf14      	ite	ne
 800358c:	2301      	movne	r3, #1
 800358e:	2300      	moveq	r3, #0
 8003590:	b2db      	uxtb	r3, r3
 8003592:	e022      	b.n	80035da <HAL_TIM_PWM_Start+0x6a>
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	2b04      	cmp	r3, #4
 8003598:	d109      	bne.n	80035ae <HAL_TIM_PWM_Start+0x3e>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	bf14      	ite	ne
 80035a6:	2301      	movne	r3, #1
 80035a8:	2300      	moveq	r3, #0
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	e015      	b.n	80035da <HAL_TIM_PWM_Start+0x6a>
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	2b08      	cmp	r3, #8
 80035b2:	d109      	bne.n	80035c8 <HAL_TIM_PWM_Start+0x58>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b01      	cmp	r3, #1
 80035be:	bf14      	ite	ne
 80035c0:	2301      	movne	r3, #1
 80035c2:	2300      	moveq	r3, #0
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	e008      	b.n	80035da <HAL_TIM_PWM_Start+0x6a>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	bf14      	ite	ne
 80035d4:	2301      	movne	r3, #1
 80035d6:	2300      	moveq	r3, #0
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e07c      	b.n	80036dc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d104      	bne.n	80035f2 <HAL_TIM_PWM_Start+0x82>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2202      	movs	r2, #2
 80035ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035f0:	e013      	b.n	800361a <HAL_TIM_PWM_Start+0xaa>
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	2b04      	cmp	r3, #4
 80035f6:	d104      	bne.n	8003602 <HAL_TIM_PWM_Start+0x92>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2202      	movs	r2, #2
 80035fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003600:	e00b      	b.n	800361a <HAL_TIM_PWM_Start+0xaa>
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	2b08      	cmp	r3, #8
 8003606:	d104      	bne.n	8003612 <HAL_TIM_PWM_Start+0xa2>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2202      	movs	r2, #2
 800360c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003610:	e003      	b.n	800361a <HAL_TIM_PWM_Start+0xaa>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2202      	movs	r2, #2
 8003616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2201      	movs	r2, #1
 8003620:	6839      	ldr	r1, [r7, #0]
 8003622:	4618      	mov	r0, r3
 8003624:	f000 fe10 	bl	8004248 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a2d      	ldr	r2, [pc, #180]	; (80036e4 <HAL_TIM_PWM_Start+0x174>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d004      	beq.n	800363c <HAL_TIM_PWM_Start+0xcc>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a2c      	ldr	r2, [pc, #176]	; (80036e8 <HAL_TIM_PWM_Start+0x178>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d101      	bne.n	8003640 <HAL_TIM_PWM_Start+0xd0>
 800363c:	2301      	movs	r3, #1
 800363e:	e000      	b.n	8003642 <HAL_TIM_PWM_Start+0xd2>
 8003640:	2300      	movs	r3, #0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d007      	beq.n	8003656 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003654:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a22      	ldr	r2, [pc, #136]	; (80036e4 <HAL_TIM_PWM_Start+0x174>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d022      	beq.n	80036a6 <HAL_TIM_PWM_Start+0x136>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003668:	d01d      	beq.n	80036a6 <HAL_TIM_PWM_Start+0x136>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a1f      	ldr	r2, [pc, #124]	; (80036ec <HAL_TIM_PWM_Start+0x17c>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d018      	beq.n	80036a6 <HAL_TIM_PWM_Start+0x136>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a1d      	ldr	r2, [pc, #116]	; (80036f0 <HAL_TIM_PWM_Start+0x180>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d013      	beq.n	80036a6 <HAL_TIM_PWM_Start+0x136>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a1c      	ldr	r2, [pc, #112]	; (80036f4 <HAL_TIM_PWM_Start+0x184>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d00e      	beq.n	80036a6 <HAL_TIM_PWM_Start+0x136>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a16      	ldr	r2, [pc, #88]	; (80036e8 <HAL_TIM_PWM_Start+0x178>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d009      	beq.n	80036a6 <HAL_TIM_PWM_Start+0x136>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a18      	ldr	r2, [pc, #96]	; (80036f8 <HAL_TIM_PWM_Start+0x188>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d004      	beq.n	80036a6 <HAL_TIM_PWM_Start+0x136>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a16      	ldr	r2, [pc, #88]	; (80036fc <HAL_TIM_PWM_Start+0x18c>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d111      	bne.n	80036ca <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2b06      	cmp	r3, #6
 80036b6:	d010      	beq.n	80036da <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f042 0201 	orr.w	r2, r2, #1
 80036c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036c8:	e007      	b.n	80036da <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f042 0201 	orr.w	r2, r2, #1
 80036d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	40010000 	.word	0x40010000
 80036e8:	40010400 	.word	0x40010400
 80036ec:	40000400 	.word	0x40000400
 80036f0:	40000800 	.word	0x40000800
 80036f4:	40000c00 	.word	0x40000c00
 80036f8:	40014000 	.word	0x40014000
 80036fc:	40001800 	.word	0x40001800

08003700 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b02      	cmp	r3, #2
 8003714:	d122      	bne.n	800375c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	f003 0302 	and.w	r3, r3, #2
 8003720:	2b02      	cmp	r3, #2
 8003722:	d11b      	bne.n	800375c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f06f 0202 	mvn.w	r2, #2
 800372c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2201      	movs	r2, #1
 8003732:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	f003 0303 	and.w	r3, r3, #3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d003      	beq.n	800374a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 fa77 	bl	8003c36 <HAL_TIM_IC_CaptureCallback>
 8003748:	e005      	b.n	8003756 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 fa69 	bl	8003c22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 fa7a 	bl	8003c4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	f003 0304 	and.w	r3, r3, #4
 8003766:	2b04      	cmp	r3, #4
 8003768:	d122      	bne.n	80037b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	f003 0304 	and.w	r3, r3, #4
 8003774:	2b04      	cmp	r3, #4
 8003776:	d11b      	bne.n	80037b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f06f 0204 	mvn.w	r2, #4
 8003780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2202      	movs	r2, #2
 8003786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 fa4d 	bl	8003c36 <HAL_TIM_IC_CaptureCallback>
 800379c:	e005      	b.n	80037aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 fa3f 	bl	8003c22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 fa50 	bl	8003c4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	f003 0308 	and.w	r3, r3, #8
 80037ba:	2b08      	cmp	r3, #8
 80037bc:	d122      	bne.n	8003804 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	f003 0308 	and.w	r3, r3, #8
 80037c8:	2b08      	cmp	r3, #8
 80037ca:	d11b      	bne.n	8003804 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f06f 0208 	mvn.w	r2, #8
 80037d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2204      	movs	r2, #4
 80037da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	69db      	ldr	r3, [r3, #28]
 80037e2:	f003 0303 	and.w	r3, r3, #3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 fa23 	bl	8003c36 <HAL_TIM_IC_CaptureCallback>
 80037f0:	e005      	b.n	80037fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 fa15 	bl	8003c22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 fa26 	bl	8003c4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	f003 0310 	and.w	r3, r3, #16
 800380e:	2b10      	cmp	r3, #16
 8003810:	d122      	bne.n	8003858 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	f003 0310 	and.w	r3, r3, #16
 800381c:	2b10      	cmp	r3, #16
 800381e:	d11b      	bne.n	8003858 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f06f 0210 	mvn.w	r2, #16
 8003828:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2208      	movs	r2, #8
 800382e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	69db      	ldr	r3, [r3, #28]
 8003836:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 f9f9 	bl	8003c36 <HAL_TIM_IC_CaptureCallback>
 8003844:	e005      	b.n	8003852 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 f9eb 	bl	8003c22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 f9fc 	bl	8003c4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b01      	cmp	r3, #1
 8003864:	d10e      	bne.n	8003884 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	f003 0301 	and.w	r3, r3, #1
 8003870:	2b01      	cmp	r3, #1
 8003872:	d107      	bne.n	8003884 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f06f 0201 	mvn.w	r2, #1
 800387c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f7fd fa1c 	bl	8000cbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800388e:	2b80      	cmp	r3, #128	; 0x80
 8003890:	d10e      	bne.n	80038b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800389c:	2b80      	cmp	r3, #128	; 0x80
 800389e:	d107      	bne.n	80038b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 fd78 	bl	80043a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ba:	2b40      	cmp	r3, #64	; 0x40
 80038bc:	d10e      	bne.n	80038dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c8:	2b40      	cmp	r3, #64	; 0x40
 80038ca:	d107      	bne.n	80038dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 f9c1 	bl	8003c5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	f003 0320 	and.w	r3, r3, #32
 80038e6:	2b20      	cmp	r3, #32
 80038e8:	d10e      	bne.n	8003908 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	f003 0320 	and.w	r3, r3, #32
 80038f4:	2b20      	cmp	r3, #32
 80038f6:	d107      	bne.n	8003908 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f06f 0220 	mvn.w	r2, #32
 8003900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 fd42 	bl	800438c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003908:	bf00      	nop
 800390a:	3708      	adds	r7, #8
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b086      	sub	sp, #24
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800391c:	2300      	movs	r3, #0
 800391e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003926:	2b01      	cmp	r3, #1
 8003928:	d101      	bne.n	800392e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800392a:	2302      	movs	r3, #2
 800392c:	e0ae      	b.n	8003a8c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2b0c      	cmp	r3, #12
 800393a:	f200 809f 	bhi.w	8003a7c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800393e:	a201      	add	r2, pc, #4	; (adr r2, 8003944 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003944:	08003979 	.word	0x08003979
 8003948:	08003a7d 	.word	0x08003a7d
 800394c:	08003a7d 	.word	0x08003a7d
 8003950:	08003a7d 	.word	0x08003a7d
 8003954:	080039b9 	.word	0x080039b9
 8003958:	08003a7d 	.word	0x08003a7d
 800395c:	08003a7d 	.word	0x08003a7d
 8003960:	08003a7d 	.word	0x08003a7d
 8003964:	080039fb 	.word	0x080039fb
 8003968:	08003a7d 	.word	0x08003a7d
 800396c:	08003a7d 	.word	0x08003a7d
 8003970:	08003a7d 	.word	0x08003a7d
 8003974:	08003a3b 	.word	0x08003a3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68b9      	ldr	r1, [r7, #8]
 800397e:	4618      	mov	r0, r3
 8003980:	f000 fa18 	bl	8003db4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	699a      	ldr	r2, [r3, #24]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f042 0208 	orr.w	r2, r2, #8
 8003992:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	699a      	ldr	r2, [r3, #24]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 0204 	bic.w	r2, r2, #4
 80039a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	6999      	ldr	r1, [r3, #24]
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	691a      	ldr	r2, [r3, #16]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	430a      	orrs	r2, r1
 80039b4:	619a      	str	r2, [r3, #24]
      break;
 80039b6:	e064      	b.n	8003a82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68b9      	ldr	r1, [r7, #8]
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 fa68 	bl	8003e94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	699a      	ldr	r2, [r3, #24]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	699a      	ldr	r2, [r3, #24]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6999      	ldr	r1, [r3, #24]
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	021a      	lsls	r2, r3, #8
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	430a      	orrs	r2, r1
 80039f6:	619a      	str	r2, [r3, #24]
      break;
 80039f8:	e043      	b.n	8003a82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68b9      	ldr	r1, [r7, #8]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f000 fabd 	bl	8003f80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	69da      	ldr	r2, [r3, #28]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f042 0208 	orr.w	r2, r2, #8
 8003a14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	69da      	ldr	r2, [r3, #28]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 0204 	bic.w	r2, r2, #4
 8003a24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	69d9      	ldr	r1, [r3, #28]
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	691a      	ldr	r2, [r3, #16]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	430a      	orrs	r2, r1
 8003a36:	61da      	str	r2, [r3, #28]
      break;
 8003a38:	e023      	b.n	8003a82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68b9      	ldr	r1, [r7, #8]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f000 fb11 	bl	8004068 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	69da      	ldr	r2, [r3, #28]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	69da      	ldr	r2, [r3, #28]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	69d9      	ldr	r1, [r3, #28]
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	021a      	lsls	r2, r3, #8
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	61da      	str	r2, [r3, #28]
      break;
 8003a7a:	e002      	b.n	8003a82 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	75fb      	strb	r3, [r7, #23]
      break;
 8003a80:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3718      	adds	r7, #24
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d101      	bne.n	8003ab0 <HAL_TIM_ConfigClockSource+0x1c>
 8003aac:	2302      	movs	r3, #2
 8003aae:	e0b4      	b.n	8003c1a <HAL_TIM_ConfigClockSource+0x186>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2202      	movs	r2, #2
 8003abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ace:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ad6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68ba      	ldr	r2, [r7, #8]
 8003ade:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ae8:	d03e      	beq.n	8003b68 <HAL_TIM_ConfigClockSource+0xd4>
 8003aea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aee:	f200 8087 	bhi.w	8003c00 <HAL_TIM_ConfigClockSource+0x16c>
 8003af2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af6:	f000 8086 	beq.w	8003c06 <HAL_TIM_ConfigClockSource+0x172>
 8003afa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003afe:	d87f      	bhi.n	8003c00 <HAL_TIM_ConfigClockSource+0x16c>
 8003b00:	2b70      	cmp	r3, #112	; 0x70
 8003b02:	d01a      	beq.n	8003b3a <HAL_TIM_ConfigClockSource+0xa6>
 8003b04:	2b70      	cmp	r3, #112	; 0x70
 8003b06:	d87b      	bhi.n	8003c00 <HAL_TIM_ConfigClockSource+0x16c>
 8003b08:	2b60      	cmp	r3, #96	; 0x60
 8003b0a:	d050      	beq.n	8003bae <HAL_TIM_ConfigClockSource+0x11a>
 8003b0c:	2b60      	cmp	r3, #96	; 0x60
 8003b0e:	d877      	bhi.n	8003c00 <HAL_TIM_ConfigClockSource+0x16c>
 8003b10:	2b50      	cmp	r3, #80	; 0x50
 8003b12:	d03c      	beq.n	8003b8e <HAL_TIM_ConfigClockSource+0xfa>
 8003b14:	2b50      	cmp	r3, #80	; 0x50
 8003b16:	d873      	bhi.n	8003c00 <HAL_TIM_ConfigClockSource+0x16c>
 8003b18:	2b40      	cmp	r3, #64	; 0x40
 8003b1a:	d058      	beq.n	8003bce <HAL_TIM_ConfigClockSource+0x13a>
 8003b1c:	2b40      	cmp	r3, #64	; 0x40
 8003b1e:	d86f      	bhi.n	8003c00 <HAL_TIM_ConfigClockSource+0x16c>
 8003b20:	2b30      	cmp	r3, #48	; 0x30
 8003b22:	d064      	beq.n	8003bee <HAL_TIM_ConfigClockSource+0x15a>
 8003b24:	2b30      	cmp	r3, #48	; 0x30
 8003b26:	d86b      	bhi.n	8003c00 <HAL_TIM_ConfigClockSource+0x16c>
 8003b28:	2b20      	cmp	r3, #32
 8003b2a:	d060      	beq.n	8003bee <HAL_TIM_ConfigClockSource+0x15a>
 8003b2c:	2b20      	cmp	r3, #32
 8003b2e:	d867      	bhi.n	8003c00 <HAL_TIM_ConfigClockSource+0x16c>
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d05c      	beq.n	8003bee <HAL_TIM_ConfigClockSource+0x15a>
 8003b34:	2b10      	cmp	r3, #16
 8003b36:	d05a      	beq.n	8003bee <HAL_TIM_ConfigClockSource+0x15a>
 8003b38:	e062      	b.n	8003c00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6818      	ldr	r0, [r3, #0]
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	6899      	ldr	r1, [r3, #8]
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	f000 fb5d 	bl	8004208 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68ba      	ldr	r2, [r7, #8]
 8003b64:	609a      	str	r2, [r3, #8]
      break;
 8003b66:	e04f      	b.n	8003c08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6818      	ldr	r0, [r3, #0]
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	6899      	ldr	r1, [r3, #8]
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685a      	ldr	r2, [r3, #4]
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	f000 fb46 	bl	8004208 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	689a      	ldr	r2, [r3, #8]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b8a:	609a      	str	r2, [r3, #8]
      break;
 8003b8c:	e03c      	b.n	8003c08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6818      	ldr	r0, [r3, #0]
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	6859      	ldr	r1, [r3, #4]
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	f000 faba 	bl	8004114 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2150      	movs	r1, #80	; 0x50
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 fb13 	bl	80041d2 <TIM_ITRx_SetConfig>
      break;
 8003bac:	e02c      	b.n	8003c08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6818      	ldr	r0, [r3, #0]
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	6859      	ldr	r1, [r3, #4]
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	461a      	mov	r2, r3
 8003bbc:	f000 fad9 	bl	8004172 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2160      	movs	r1, #96	; 0x60
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f000 fb03 	bl	80041d2 <TIM_ITRx_SetConfig>
      break;
 8003bcc:	e01c      	b.n	8003c08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6818      	ldr	r0, [r3, #0]
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	6859      	ldr	r1, [r3, #4]
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	461a      	mov	r2, r3
 8003bdc:	f000 fa9a 	bl	8004114 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2140      	movs	r1, #64	; 0x40
 8003be6:	4618      	mov	r0, r3
 8003be8:	f000 faf3 	bl	80041d2 <TIM_ITRx_SetConfig>
      break;
 8003bec:	e00c      	b.n	8003c08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	4610      	mov	r0, r2
 8003bfa:	f000 faea 	bl	80041d2 <TIM_ITRx_SetConfig>
      break;
 8003bfe:	e003      	b.n	8003c08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	73fb      	strb	r3, [r7, #15]
      break;
 8003c04:	e000      	b.n	8003c08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c22:	b480      	push	{r7}
 8003c24:	b083      	sub	sp, #12
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c2a:	bf00      	nop
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b083      	sub	sp, #12
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c3e:	bf00      	nop
 8003c40:	370c      	adds	r7, #12
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr

08003c4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b083      	sub	sp, #12
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c52:	bf00      	nop
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b083      	sub	sp, #12
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c66:	bf00      	nop
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
	...

08003c74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a40      	ldr	r2, [pc, #256]	; (8003d88 <TIM_Base_SetConfig+0x114>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d013      	beq.n	8003cb4 <TIM_Base_SetConfig+0x40>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c92:	d00f      	beq.n	8003cb4 <TIM_Base_SetConfig+0x40>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a3d      	ldr	r2, [pc, #244]	; (8003d8c <TIM_Base_SetConfig+0x118>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d00b      	beq.n	8003cb4 <TIM_Base_SetConfig+0x40>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a3c      	ldr	r2, [pc, #240]	; (8003d90 <TIM_Base_SetConfig+0x11c>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d007      	beq.n	8003cb4 <TIM_Base_SetConfig+0x40>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a3b      	ldr	r2, [pc, #236]	; (8003d94 <TIM_Base_SetConfig+0x120>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d003      	beq.n	8003cb4 <TIM_Base_SetConfig+0x40>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a3a      	ldr	r2, [pc, #232]	; (8003d98 <TIM_Base_SetConfig+0x124>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d108      	bne.n	8003cc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a2f      	ldr	r2, [pc, #188]	; (8003d88 <TIM_Base_SetConfig+0x114>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d02b      	beq.n	8003d26 <TIM_Base_SetConfig+0xb2>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cd4:	d027      	beq.n	8003d26 <TIM_Base_SetConfig+0xb2>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a2c      	ldr	r2, [pc, #176]	; (8003d8c <TIM_Base_SetConfig+0x118>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d023      	beq.n	8003d26 <TIM_Base_SetConfig+0xb2>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a2b      	ldr	r2, [pc, #172]	; (8003d90 <TIM_Base_SetConfig+0x11c>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d01f      	beq.n	8003d26 <TIM_Base_SetConfig+0xb2>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a2a      	ldr	r2, [pc, #168]	; (8003d94 <TIM_Base_SetConfig+0x120>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d01b      	beq.n	8003d26 <TIM_Base_SetConfig+0xb2>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a29      	ldr	r2, [pc, #164]	; (8003d98 <TIM_Base_SetConfig+0x124>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d017      	beq.n	8003d26 <TIM_Base_SetConfig+0xb2>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a28      	ldr	r2, [pc, #160]	; (8003d9c <TIM_Base_SetConfig+0x128>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d013      	beq.n	8003d26 <TIM_Base_SetConfig+0xb2>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a27      	ldr	r2, [pc, #156]	; (8003da0 <TIM_Base_SetConfig+0x12c>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d00f      	beq.n	8003d26 <TIM_Base_SetConfig+0xb2>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a26      	ldr	r2, [pc, #152]	; (8003da4 <TIM_Base_SetConfig+0x130>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d00b      	beq.n	8003d26 <TIM_Base_SetConfig+0xb2>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a25      	ldr	r2, [pc, #148]	; (8003da8 <TIM_Base_SetConfig+0x134>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d007      	beq.n	8003d26 <TIM_Base_SetConfig+0xb2>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a24      	ldr	r2, [pc, #144]	; (8003dac <TIM_Base_SetConfig+0x138>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d003      	beq.n	8003d26 <TIM_Base_SetConfig+0xb2>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a23      	ldr	r2, [pc, #140]	; (8003db0 <TIM_Base_SetConfig+0x13c>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d108      	bne.n	8003d38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	689a      	ldr	r2, [r3, #8]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a0a      	ldr	r2, [pc, #40]	; (8003d88 <TIM_Base_SetConfig+0x114>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d003      	beq.n	8003d6c <TIM_Base_SetConfig+0xf8>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a0c      	ldr	r2, [pc, #48]	; (8003d98 <TIM_Base_SetConfig+0x124>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d103      	bne.n	8003d74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	691a      	ldr	r2, [r3, #16]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	615a      	str	r2, [r3, #20]
}
 8003d7a:	bf00      	nop
 8003d7c:	3714      	adds	r7, #20
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	40010000 	.word	0x40010000
 8003d8c:	40000400 	.word	0x40000400
 8003d90:	40000800 	.word	0x40000800
 8003d94:	40000c00 	.word	0x40000c00
 8003d98:	40010400 	.word	0x40010400
 8003d9c:	40014000 	.word	0x40014000
 8003da0:	40014400 	.word	0x40014400
 8003da4:	40014800 	.word	0x40014800
 8003da8:	40001800 	.word	0x40001800
 8003dac:	40001c00 	.word	0x40001c00
 8003db0:	40002000 	.word	0x40002000

08003db4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b087      	sub	sp, #28
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a1b      	ldr	r3, [r3, #32]
 8003dc2:	f023 0201 	bic.w	r2, r3, #1
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
 8003dce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003de2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f023 0303 	bic.w	r3, r3, #3
 8003dea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	f023 0302 	bic.w	r3, r3, #2
 8003dfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	697a      	ldr	r2, [r7, #20]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a20      	ldr	r2, [pc, #128]	; (8003e8c <TIM_OC1_SetConfig+0xd8>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d003      	beq.n	8003e18 <TIM_OC1_SetConfig+0x64>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a1f      	ldr	r2, [pc, #124]	; (8003e90 <TIM_OC1_SetConfig+0xdc>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d10c      	bne.n	8003e32 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	f023 0308 	bic.w	r3, r3, #8
 8003e1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	f023 0304 	bic.w	r3, r3, #4
 8003e30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a15      	ldr	r2, [pc, #84]	; (8003e8c <TIM_OC1_SetConfig+0xd8>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d003      	beq.n	8003e42 <TIM_OC1_SetConfig+0x8e>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a14      	ldr	r2, [pc, #80]	; (8003e90 <TIM_OC1_SetConfig+0xdc>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d111      	bne.n	8003e66 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	685a      	ldr	r2, [r3, #4]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	697a      	ldr	r2, [r7, #20]
 8003e7e:	621a      	str	r2, [r3, #32]
}
 8003e80:	bf00      	nop
 8003e82:	371c      	adds	r7, #28
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr
 8003e8c:	40010000 	.word	0x40010000
 8003e90:	40010400 	.word	0x40010400

08003e94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b087      	sub	sp, #28
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	f023 0210 	bic.w	r2, r3, #16
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a1b      	ldr	r3, [r3, #32]
 8003eae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	021b      	lsls	r3, r3, #8
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	f023 0320 	bic.w	r3, r3, #32
 8003ede:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	011b      	lsls	r3, r3, #4
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a22      	ldr	r2, [pc, #136]	; (8003f78 <TIM_OC2_SetConfig+0xe4>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d003      	beq.n	8003efc <TIM_OC2_SetConfig+0x68>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a21      	ldr	r2, [pc, #132]	; (8003f7c <TIM_OC2_SetConfig+0xe8>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d10d      	bne.n	8003f18 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	011b      	lsls	r3, r3, #4
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a17      	ldr	r2, [pc, #92]	; (8003f78 <TIM_OC2_SetConfig+0xe4>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d003      	beq.n	8003f28 <TIM_OC2_SetConfig+0x94>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a16      	ldr	r2, [pc, #88]	; (8003f7c <TIM_OC2_SetConfig+0xe8>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d113      	bne.n	8003f50 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	695b      	ldr	r3, [r3, #20]
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	685a      	ldr	r2, [r3, #4]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	621a      	str	r2, [r3, #32]
}
 8003f6a:	bf00      	nop
 8003f6c:	371c      	adds	r7, #28
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	40010000 	.word	0x40010000
 8003f7c:	40010400 	.word	0x40010400

08003f80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b087      	sub	sp, #28
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f023 0303 	bic.w	r3, r3, #3
 8003fb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	021b      	lsls	r3, r3, #8
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a21      	ldr	r2, [pc, #132]	; (8004060 <TIM_OC3_SetConfig+0xe0>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d003      	beq.n	8003fe6 <TIM_OC3_SetConfig+0x66>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a20      	ldr	r2, [pc, #128]	; (8004064 <TIM_OC3_SetConfig+0xe4>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d10d      	bne.n	8004002 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	021b      	lsls	r3, r3, #8
 8003ff4:	697a      	ldr	r2, [r7, #20]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004000:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a16      	ldr	r2, [pc, #88]	; (8004060 <TIM_OC3_SetConfig+0xe0>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d003      	beq.n	8004012 <TIM_OC3_SetConfig+0x92>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a15      	ldr	r2, [pc, #84]	; (8004064 <TIM_OC3_SetConfig+0xe4>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d113      	bne.n	800403a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004018:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004020:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	011b      	lsls	r3, r3, #4
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	4313      	orrs	r3, r2
 800402c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	011b      	lsls	r3, r3, #4
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	4313      	orrs	r3, r2
 8004038:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	621a      	str	r2, [r3, #32]
}
 8004054:	bf00      	nop
 8004056:	371c      	adds	r7, #28
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr
 8004060:	40010000 	.word	0x40010000
 8004064:	40010400 	.word	0x40010400

08004068 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004068:	b480      	push	{r7}
 800406a:	b087      	sub	sp, #28
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	69db      	ldr	r3, [r3, #28]
 800408e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800409e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	021b      	lsls	r3, r3, #8
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	031b      	lsls	r3, r3, #12
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	4313      	orrs	r3, r2
 80040be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a12      	ldr	r2, [pc, #72]	; (800410c <TIM_OC4_SetConfig+0xa4>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d003      	beq.n	80040d0 <TIM_OC4_SetConfig+0x68>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a11      	ldr	r2, [pc, #68]	; (8004110 <TIM_OC4_SetConfig+0xa8>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d109      	bne.n	80040e4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	695b      	ldr	r3, [r3, #20]
 80040dc:	019b      	lsls	r3, r3, #6
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	685a      	ldr	r2, [r3, #4]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	621a      	str	r2, [r3, #32]
}
 80040fe:	bf00      	nop
 8004100:	371c      	adds	r7, #28
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	40010000 	.word	0x40010000
 8004110:	40010400 	.word	0x40010400

08004114 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004114:	b480      	push	{r7}
 8004116:	b087      	sub	sp, #28
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6a1b      	ldr	r3, [r3, #32]
 8004124:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	f023 0201 	bic.w	r2, r3, #1
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800413e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	011b      	lsls	r3, r3, #4
 8004144:	693a      	ldr	r2, [r7, #16]
 8004146:	4313      	orrs	r3, r2
 8004148:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	f023 030a 	bic.w	r3, r3, #10
 8004150:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	4313      	orrs	r3, r2
 8004158:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	697a      	ldr	r2, [r7, #20]
 8004164:	621a      	str	r2, [r3, #32]
}
 8004166:	bf00      	nop
 8004168:	371c      	adds	r7, #28
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr

08004172 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004172:	b480      	push	{r7}
 8004174:	b087      	sub	sp, #28
 8004176:	af00      	add	r7, sp, #0
 8004178:	60f8      	str	r0, [r7, #12]
 800417a:	60b9      	str	r1, [r7, #8]
 800417c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	f023 0210 	bic.w	r2, r3, #16
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6a1b      	ldr	r3, [r3, #32]
 8004194:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800419c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	031b      	lsls	r3, r3, #12
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	011b      	lsls	r3, r3, #4
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	621a      	str	r2, [r3, #32]
}
 80041c6:	bf00      	nop
 80041c8:	371c      	adds	r7, #28
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr

080041d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b085      	sub	sp, #20
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
 80041da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	f043 0307 	orr.w	r3, r3, #7
 80041f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	609a      	str	r2, [r3, #8]
}
 80041fc:	bf00      	nop
 80041fe:	3714      	adds	r7, #20
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004208:	b480      	push	{r7}
 800420a:	b087      	sub	sp, #28
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
 8004214:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004222:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	021a      	lsls	r2, r3, #8
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	431a      	orrs	r2, r3
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	4313      	orrs	r3, r2
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	4313      	orrs	r3, r2
 8004234:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	609a      	str	r2, [r3, #8]
}
 800423c:	bf00      	nop
 800423e:	371c      	adds	r7, #28
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004248:	b480      	push	{r7}
 800424a:	b087      	sub	sp, #28
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	f003 031f 	and.w	r3, r3, #31
 800425a:	2201      	movs	r2, #1
 800425c:	fa02 f303 	lsl.w	r3, r2, r3
 8004260:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6a1a      	ldr	r2, [r3, #32]
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	43db      	mvns	r3, r3
 800426a:	401a      	ands	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6a1a      	ldr	r2, [r3, #32]
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	f003 031f 	and.w	r3, r3, #31
 800427a:	6879      	ldr	r1, [r7, #4]
 800427c:	fa01 f303 	lsl.w	r3, r1, r3
 8004280:	431a      	orrs	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	621a      	str	r2, [r3, #32]
}
 8004286:	bf00      	nop
 8004288:	371c      	adds	r7, #28
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
	...

08004294 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004294:	b480      	push	{r7}
 8004296:	b085      	sub	sp, #20
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d101      	bne.n	80042ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042a8:	2302      	movs	r3, #2
 80042aa:	e05a      	b.n	8004362 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2202      	movs	r2, #2
 80042b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	4313      	orrs	r3, r2
 80042dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a21      	ldr	r2, [pc, #132]	; (8004370 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d022      	beq.n	8004336 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042f8:	d01d      	beq.n	8004336 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a1d      	ldr	r2, [pc, #116]	; (8004374 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d018      	beq.n	8004336 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a1b      	ldr	r2, [pc, #108]	; (8004378 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d013      	beq.n	8004336 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a1a      	ldr	r2, [pc, #104]	; (800437c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d00e      	beq.n	8004336 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a18      	ldr	r2, [pc, #96]	; (8004380 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d009      	beq.n	8004336 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a17      	ldr	r2, [pc, #92]	; (8004384 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d004      	beq.n	8004336 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a15      	ldr	r2, [pc, #84]	; (8004388 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d10c      	bne.n	8004350 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800433c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	68ba      	ldr	r2, [r7, #8]
 8004344:	4313      	orrs	r3, r2
 8004346:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3714      	adds	r7, #20
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	40010000 	.word	0x40010000
 8004374:	40000400 	.word	0x40000400
 8004378:	40000800 	.word	0x40000800
 800437c:	40000c00 	.word	0x40000c00
 8004380:	40010400 	.word	0x40010400
 8004384:	40014000 	.word	0x40014000
 8004388:	40001800 	.word	0x40001800

0800438c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043a8:	bf00      	nop
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <__libc_init_array>:
 80043b4:	b570      	push	{r4, r5, r6, lr}
 80043b6:	4d0d      	ldr	r5, [pc, #52]	; (80043ec <__libc_init_array+0x38>)
 80043b8:	4c0d      	ldr	r4, [pc, #52]	; (80043f0 <__libc_init_array+0x3c>)
 80043ba:	1b64      	subs	r4, r4, r5
 80043bc:	10a4      	asrs	r4, r4, #2
 80043be:	2600      	movs	r6, #0
 80043c0:	42a6      	cmp	r6, r4
 80043c2:	d109      	bne.n	80043d8 <__libc_init_array+0x24>
 80043c4:	4d0b      	ldr	r5, [pc, #44]	; (80043f4 <__libc_init_array+0x40>)
 80043c6:	4c0c      	ldr	r4, [pc, #48]	; (80043f8 <__libc_init_array+0x44>)
 80043c8:	f000 f820 	bl	800440c <_init>
 80043cc:	1b64      	subs	r4, r4, r5
 80043ce:	10a4      	asrs	r4, r4, #2
 80043d0:	2600      	movs	r6, #0
 80043d2:	42a6      	cmp	r6, r4
 80043d4:	d105      	bne.n	80043e2 <__libc_init_array+0x2e>
 80043d6:	bd70      	pop	{r4, r5, r6, pc}
 80043d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80043dc:	4798      	blx	r3
 80043de:	3601      	adds	r6, #1
 80043e0:	e7ee      	b.n	80043c0 <__libc_init_array+0xc>
 80043e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80043e6:	4798      	blx	r3
 80043e8:	3601      	adds	r6, #1
 80043ea:	e7f2      	b.n	80043d2 <__libc_init_array+0x1e>
 80043ec:	08004444 	.word	0x08004444
 80043f0:	08004444 	.word	0x08004444
 80043f4:	08004444 	.word	0x08004444
 80043f8:	08004448 	.word	0x08004448

080043fc <memset>:
 80043fc:	4402      	add	r2, r0
 80043fe:	4603      	mov	r3, r0
 8004400:	4293      	cmp	r3, r2
 8004402:	d100      	bne.n	8004406 <memset+0xa>
 8004404:	4770      	bx	lr
 8004406:	f803 1b01 	strb.w	r1, [r3], #1
 800440a:	e7f9      	b.n	8004400 <memset+0x4>

0800440c <_init>:
 800440c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800440e:	bf00      	nop
 8004410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004412:	bc08      	pop	{r3}
 8004414:	469e      	mov	lr, r3
 8004416:	4770      	bx	lr

08004418 <_fini>:
 8004418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800441a:	bf00      	nop
 800441c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800441e:	bc08      	pop	{r3}
 8004420:	469e      	mov	lr, r3
 8004422:	4770      	bx	lr
