
Plataforma_autonivelable.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c54  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000850  08007de8  08007de8  00017de8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008638  08008638  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08008638  08008638  00018638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008640  08008640  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008640  08008640  00018640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008644  08008644  00018644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08008648  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          00000678  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000700  20000700  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012b11  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023ee  00000000  00000000  00032bc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001058  00000000  00000000  00034fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f78  00000000  00000000  00036010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023282  00000000  00000000  00036f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000130b9  00000000  00000000  0005a20a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da6b5  00000000  00000000  0006d2c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00147978  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004e28  00000000  00000000  001479cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007dcc 	.word	0x08007dcc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08007dcc 	.word	0x08007dcc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b96e 	b.w	8000e8c <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9d08      	ldr	r5, [sp, #32]
 8000bce:	4604      	mov	r4, r0
 8000bd0:	468c      	mov	ip, r1
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	f040 8083 	bne.w	8000cde <__udivmoddi4+0x116>
 8000bd8:	428a      	cmp	r2, r1
 8000bda:	4617      	mov	r7, r2
 8000bdc:	d947      	bls.n	8000c6e <__udivmoddi4+0xa6>
 8000bde:	fab2 f282 	clz	r2, r2
 8000be2:	b142      	cbz	r2, 8000bf6 <__udivmoddi4+0x2e>
 8000be4:	f1c2 0020 	rsb	r0, r2, #32
 8000be8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bec:	4091      	lsls	r1, r2
 8000bee:	4097      	lsls	r7, r2
 8000bf0:	ea40 0c01 	orr.w	ip, r0, r1
 8000bf4:	4094      	lsls	r4, r2
 8000bf6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bfa:	0c23      	lsrs	r3, r4, #16
 8000bfc:	fbbc f6f8 	udiv	r6, ip, r8
 8000c00:	fa1f fe87 	uxth.w	lr, r7
 8000c04:	fb08 c116 	mls	r1, r8, r6, ip
 8000c08:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c0c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c10:	4299      	cmp	r1, r3
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x60>
 8000c14:	18fb      	adds	r3, r7, r3
 8000c16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c1a:	f080 8119 	bcs.w	8000e50 <__udivmoddi4+0x288>
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	f240 8116 	bls.w	8000e50 <__udivmoddi4+0x288>
 8000c24:	3e02      	subs	r6, #2
 8000c26:	443b      	add	r3, r7
 8000c28:	1a5b      	subs	r3, r3, r1
 8000c2a:	b2a4      	uxth	r4, r4
 8000c2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c30:	fb08 3310 	mls	r3, r8, r0, r3
 8000c34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c38:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c3c:	45a6      	cmp	lr, r4
 8000c3e:	d909      	bls.n	8000c54 <__udivmoddi4+0x8c>
 8000c40:	193c      	adds	r4, r7, r4
 8000c42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c46:	f080 8105 	bcs.w	8000e54 <__udivmoddi4+0x28c>
 8000c4a:	45a6      	cmp	lr, r4
 8000c4c:	f240 8102 	bls.w	8000e54 <__udivmoddi4+0x28c>
 8000c50:	3802      	subs	r0, #2
 8000c52:	443c      	add	r4, r7
 8000c54:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c58:	eba4 040e 	sub.w	r4, r4, lr
 8000c5c:	2600      	movs	r6, #0
 8000c5e:	b11d      	cbz	r5, 8000c68 <__udivmoddi4+0xa0>
 8000c60:	40d4      	lsrs	r4, r2
 8000c62:	2300      	movs	r3, #0
 8000c64:	e9c5 4300 	strd	r4, r3, [r5]
 8000c68:	4631      	mov	r1, r6
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	b902      	cbnz	r2, 8000c72 <__udivmoddi4+0xaa>
 8000c70:	deff      	udf	#255	; 0xff
 8000c72:	fab2 f282 	clz	r2, r2
 8000c76:	2a00      	cmp	r2, #0
 8000c78:	d150      	bne.n	8000d1c <__udivmoddi4+0x154>
 8000c7a:	1bcb      	subs	r3, r1, r7
 8000c7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c80:	fa1f f887 	uxth.w	r8, r7
 8000c84:	2601      	movs	r6, #1
 8000c86:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c8a:	0c21      	lsrs	r1, r4, #16
 8000c8c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c94:	fb08 f30c 	mul.w	r3, r8, ip
 8000c98:	428b      	cmp	r3, r1
 8000c9a:	d907      	bls.n	8000cac <__udivmoddi4+0xe4>
 8000c9c:	1879      	adds	r1, r7, r1
 8000c9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ca2:	d202      	bcs.n	8000caa <__udivmoddi4+0xe2>
 8000ca4:	428b      	cmp	r3, r1
 8000ca6:	f200 80e9 	bhi.w	8000e7c <__udivmoddi4+0x2b4>
 8000caa:	4684      	mov	ip, r0
 8000cac:	1ac9      	subs	r1, r1, r3
 8000cae:	b2a3      	uxth	r3, r4
 8000cb0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cb8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cbc:	fb08 f800 	mul.w	r8, r8, r0
 8000cc0:	45a0      	cmp	r8, r4
 8000cc2:	d907      	bls.n	8000cd4 <__udivmoddi4+0x10c>
 8000cc4:	193c      	adds	r4, r7, r4
 8000cc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cca:	d202      	bcs.n	8000cd2 <__udivmoddi4+0x10a>
 8000ccc:	45a0      	cmp	r8, r4
 8000cce:	f200 80d9 	bhi.w	8000e84 <__udivmoddi4+0x2bc>
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	eba4 0408 	sub.w	r4, r4, r8
 8000cd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cdc:	e7bf      	b.n	8000c5e <__udivmoddi4+0x96>
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d909      	bls.n	8000cf6 <__udivmoddi4+0x12e>
 8000ce2:	2d00      	cmp	r5, #0
 8000ce4:	f000 80b1 	beq.w	8000e4a <__udivmoddi4+0x282>
 8000ce8:	2600      	movs	r6, #0
 8000cea:	e9c5 0100 	strd	r0, r1, [r5]
 8000cee:	4630      	mov	r0, r6
 8000cf0:	4631      	mov	r1, r6
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	fab3 f683 	clz	r6, r3
 8000cfa:	2e00      	cmp	r6, #0
 8000cfc:	d14a      	bne.n	8000d94 <__udivmoddi4+0x1cc>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d302      	bcc.n	8000d08 <__udivmoddi4+0x140>
 8000d02:	4282      	cmp	r2, r0
 8000d04:	f200 80b8 	bhi.w	8000e78 <__udivmoddi4+0x2b0>
 8000d08:	1a84      	subs	r4, r0, r2
 8000d0a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d0e:	2001      	movs	r0, #1
 8000d10:	468c      	mov	ip, r1
 8000d12:	2d00      	cmp	r5, #0
 8000d14:	d0a8      	beq.n	8000c68 <__udivmoddi4+0xa0>
 8000d16:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d1a:	e7a5      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000d1c:	f1c2 0320 	rsb	r3, r2, #32
 8000d20:	fa20 f603 	lsr.w	r6, r0, r3
 8000d24:	4097      	lsls	r7, r2
 8000d26:	fa01 f002 	lsl.w	r0, r1, r2
 8000d2a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d2e:	40d9      	lsrs	r1, r3
 8000d30:	4330      	orrs	r0, r6
 8000d32:	0c03      	lsrs	r3, r0, #16
 8000d34:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d38:	fa1f f887 	uxth.w	r8, r7
 8000d3c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d44:	fb06 f108 	mul.w	r1, r6, r8
 8000d48:	4299      	cmp	r1, r3
 8000d4a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x19c>
 8000d50:	18fb      	adds	r3, r7, r3
 8000d52:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d56:	f080 808d 	bcs.w	8000e74 <__udivmoddi4+0x2ac>
 8000d5a:	4299      	cmp	r1, r3
 8000d5c:	f240 808a 	bls.w	8000e74 <__udivmoddi4+0x2ac>
 8000d60:	3e02      	subs	r6, #2
 8000d62:	443b      	add	r3, r7
 8000d64:	1a5b      	subs	r3, r3, r1
 8000d66:	b281      	uxth	r1, r0
 8000d68:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d6c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d74:	fb00 f308 	mul.w	r3, r0, r8
 8000d78:	428b      	cmp	r3, r1
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0x1c4>
 8000d7c:	1879      	adds	r1, r7, r1
 8000d7e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d82:	d273      	bcs.n	8000e6c <__udivmoddi4+0x2a4>
 8000d84:	428b      	cmp	r3, r1
 8000d86:	d971      	bls.n	8000e6c <__udivmoddi4+0x2a4>
 8000d88:	3802      	subs	r0, #2
 8000d8a:	4439      	add	r1, r7
 8000d8c:	1acb      	subs	r3, r1, r3
 8000d8e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d92:	e778      	b.n	8000c86 <__udivmoddi4+0xbe>
 8000d94:	f1c6 0c20 	rsb	ip, r6, #32
 8000d98:	fa03 f406 	lsl.w	r4, r3, r6
 8000d9c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000da0:	431c      	orrs	r4, r3
 8000da2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000da6:	fa01 f306 	lsl.w	r3, r1, r6
 8000daa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dae:	fa21 f10c 	lsr.w	r1, r1, ip
 8000db2:	431f      	orrs	r7, r3
 8000db4:	0c3b      	lsrs	r3, r7, #16
 8000db6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dba:	fa1f f884 	uxth.w	r8, r4
 8000dbe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dc2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dc6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dca:	458a      	cmp	sl, r1
 8000dcc:	fa02 f206 	lsl.w	r2, r2, r6
 8000dd0:	fa00 f306 	lsl.w	r3, r0, r6
 8000dd4:	d908      	bls.n	8000de8 <__udivmoddi4+0x220>
 8000dd6:	1861      	adds	r1, r4, r1
 8000dd8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ddc:	d248      	bcs.n	8000e70 <__udivmoddi4+0x2a8>
 8000dde:	458a      	cmp	sl, r1
 8000de0:	d946      	bls.n	8000e70 <__udivmoddi4+0x2a8>
 8000de2:	f1a9 0902 	sub.w	r9, r9, #2
 8000de6:	4421      	add	r1, r4
 8000de8:	eba1 010a 	sub.w	r1, r1, sl
 8000dec:	b2bf      	uxth	r7, r7
 8000dee:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000df6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dfa:	fb00 f808 	mul.w	r8, r0, r8
 8000dfe:	45b8      	cmp	r8, r7
 8000e00:	d907      	bls.n	8000e12 <__udivmoddi4+0x24a>
 8000e02:	19e7      	adds	r7, r4, r7
 8000e04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e08:	d22e      	bcs.n	8000e68 <__udivmoddi4+0x2a0>
 8000e0a:	45b8      	cmp	r8, r7
 8000e0c:	d92c      	bls.n	8000e68 <__udivmoddi4+0x2a0>
 8000e0e:	3802      	subs	r0, #2
 8000e10:	4427      	add	r7, r4
 8000e12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e16:	eba7 0708 	sub.w	r7, r7, r8
 8000e1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e1e:	454f      	cmp	r7, r9
 8000e20:	46c6      	mov	lr, r8
 8000e22:	4649      	mov	r1, r9
 8000e24:	d31a      	bcc.n	8000e5c <__udivmoddi4+0x294>
 8000e26:	d017      	beq.n	8000e58 <__udivmoddi4+0x290>
 8000e28:	b15d      	cbz	r5, 8000e42 <__udivmoddi4+0x27a>
 8000e2a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e2e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e32:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e36:	40f2      	lsrs	r2, r6
 8000e38:	ea4c 0202 	orr.w	r2, ip, r2
 8000e3c:	40f7      	lsrs	r7, r6
 8000e3e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e42:	2600      	movs	r6, #0
 8000e44:	4631      	mov	r1, r6
 8000e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e4a:	462e      	mov	r6, r5
 8000e4c:	4628      	mov	r0, r5
 8000e4e:	e70b      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000e50:	4606      	mov	r6, r0
 8000e52:	e6e9      	b.n	8000c28 <__udivmoddi4+0x60>
 8000e54:	4618      	mov	r0, r3
 8000e56:	e6fd      	b.n	8000c54 <__udivmoddi4+0x8c>
 8000e58:	4543      	cmp	r3, r8
 8000e5a:	d2e5      	bcs.n	8000e28 <__udivmoddi4+0x260>
 8000e5c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e60:	eb69 0104 	sbc.w	r1, r9, r4
 8000e64:	3801      	subs	r0, #1
 8000e66:	e7df      	b.n	8000e28 <__udivmoddi4+0x260>
 8000e68:	4608      	mov	r0, r1
 8000e6a:	e7d2      	b.n	8000e12 <__udivmoddi4+0x24a>
 8000e6c:	4660      	mov	r0, ip
 8000e6e:	e78d      	b.n	8000d8c <__udivmoddi4+0x1c4>
 8000e70:	4681      	mov	r9, r0
 8000e72:	e7b9      	b.n	8000de8 <__udivmoddi4+0x220>
 8000e74:	4666      	mov	r6, ip
 8000e76:	e775      	b.n	8000d64 <__udivmoddi4+0x19c>
 8000e78:	4630      	mov	r0, r6
 8000e7a:	e74a      	b.n	8000d12 <__udivmoddi4+0x14a>
 8000e7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e80:	4439      	add	r1, r7
 8000e82:	e713      	b.n	8000cac <__udivmoddi4+0xe4>
 8000e84:	3802      	subs	r0, #2
 8000e86:	443c      	add	r4, r7
 8000e88:	e724      	b.n	8000cd4 <__udivmoddi4+0x10c>
 8000e8a:	bf00      	nop

08000e8c <__aeabi_idiv0>:
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop

08000e90 <HAL_GPIO_EXTI_Callback>:
int16_t lights_x;
int16_t lights_y, lights_y_2;
uint32_t start_x, start_y;


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin==GPIO_PIN_0){
 8000e9a:	88fb      	ldrh	r3, [r7, #6]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d109      	bne.n	8000eb4 <HAL_GPIO_EXTI_Callback+0x24>
			mode = !mode;
 8000ea0:	4b07      	ldr	r3, [pc, #28]	; (8000ec0 <HAL_GPIO_EXTI_Callback+0x30>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	bf0c      	ite	eq
 8000ea8:	2301      	moveq	r3, #1
 8000eaa:	2300      	movne	r3, #0
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	461a      	mov	r2, r3
 8000eb0:	4b03      	ldr	r3, [pc, #12]	; (8000ec0 <HAL_GPIO_EXTI_Callback+0x30>)
 8000eb2:	601a      	str	r2, [r3, #0]
		}
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	2000000c 	.word	0x2000000c

08000ec4 <map_acc>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int16_t map_acc(int16_t accel){
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	80fb      	strh	r3, [r7, #6]
	if (accel > 16384) return  T_lights;
 8000ece:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ed2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000ed6:	dd03      	ble.n	8000ee0 <map_acc+0x1c>
 8000ed8:	4b1c      	ldr	r3, [pc, #112]	; (8000f4c <map_acc+0x88>)
 8000eda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ede:	e02f      	b.n	8000f40 <map_acc+0x7c>
	else if (accel < -16384) return -T_lights;
 8000ee0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ee4:	f513 4f80 	cmn.w	r3, #16384	; 0x4000
 8000ee8:	da07      	bge.n	8000efa <map_acc+0x36>
 8000eea:	4b18      	ldr	r3, [pc, #96]	; (8000f4c <map_acc+0x88>)
 8000eec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	425b      	negs	r3, r3
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	b21b      	sxth	r3, r3
 8000ef8:	e022      	b.n	8000f40 <map_acc+0x7c>
	else if(accel < 100 && accel > -100) return 0;
 8000efa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000efe:	2b63      	cmp	r3, #99	; 0x63
 8000f00:	dc06      	bgt.n	8000f10 <map_acc+0x4c>
 8000f02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f06:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8000f0a:	db01      	blt.n	8000f10 <map_acc+0x4c>
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	e017      	b.n	8000f40 <map_acc+0x7c>
	return (accel - (-16384)) * (T_lights - (-T_lights)) / (16384 - (-16384)) - T_lights;
 8000f10:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <map_acc+0x88>)
 8000f12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f16:	461a      	mov	r2, r3
 8000f18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f1c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000f20:	fb03 f302 	mul.w	r3, r3, r2
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	da02      	bge.n	8000f2e <map_acc+0x6a>
 8000f28:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8000f2c:	333f      	adds	r3, #63	; 0x3f
 8000f2e:	139b      	asrs	r3, r3, #14
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <map_acc+0x88>)
 8000f34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f38:	b29b      	uxth	r3, r3
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	b29b      	uxth	r3, r3
 8000f3e:	b21b      	sxth	r3, r3
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	20000010 	.word	0x20000010

08000f50 <map_adc>:

int16_t map_adc(int16_t adc){
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	80fb      	strh	r3, [r7, #6]
	if (adc > 4095) return T_lights/2;
 8000f5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f62:	db07      	blt.n	8000f74 <map_adc+0x24>
 8000f64:	4b1f      	ldr	r3, [pc, #124]	; (8000fe4 <map_adc+0x94>)
 8000f66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f6a:	0fda      	lsrs	r2, r3, #31
 8000f6c:	4413      	add	r3, r2
 8000f6e:	105b      	asrs	r3, r3, #1
 8000f70:	b21b      	sxth	r3, r3
 8000f72:	e030      	b.n	8000fd6 <map_adc+0x86>
	else if (adc < 0) return -T_lights/2;
 8000f74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	da08      	bge.n	8000f8e <map_adc+0x3e>
 8000f7c:	4b19      	ldr	r3, [pc, #100]	; (8000fe4 <map_adc+0x94>)
 8000f7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f82:	0fda      	lsrs	r2, r3, #31
 8000f84:	4413      	add	r3, r2
 8000f86:	105b      	asrs	r3, r3, #1
 8000f88:	425b      	negs	r3, r3
 8000f8a:	b21b      	sxth	r3, r3
 8000f8c:	e023      	b.n	8000fd6 <map_adc+0x86>
	else if(adc < 2148 && adc > 1947) return 0;
 8000f8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f92:	f640 0263 	movw	r2, #2147	; 0x863
 8000f96:	4293      	cmp	r3, r2
 8000f98:	dc07      	bgt.n	8000faa <map_adc+0x5a>
 8000f9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f9e:	f240 729b 	movw	r2, #1947	; 0x79b
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	dd01      	ble.n	8000faa <map_adc+0x5a>
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	e015      	b.n	8000fd6 <map_adc+0x86>
	return ((adc - 0) * (T_lights - (-T_lights)) / (4096 - 0) - T_lights)/2;
 8000faa:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <map_adc+0x94>)
 8000fac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fb6:	fb03 f302 	mul.w	r3, r3, r2
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	da01      	bge.n	8000fc2 <map_adc+0x72>
 8000fbe:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8000fc2:	12db      	asrs	r3, r3, #11
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4b07      	ldr	r3, [pc, #28]	; (8000fe4 <map_adc+0x94>)
 8000fc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	0fda      	lsrs	r2, r3, #31
 8000fd0:	4413      	add	r3, r2
 8000fd2:	105b      	asrs	r3, r3, #1
 8000fd4:	b21b      	sxth	r3, r3
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	20000010 	.word	0x20000010

08000fe8 <map_angle>:

int16_t map_angle(int16_t light){
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	80fb      	strh	r3, [r7, #6]
	return (light - (-T_lights)) * (2500 - 500) / (T_lights - (-T_lights)) + 500;
 8000ff2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ff6:	4a0c      	ldr	r2, [pc, #48]	; (8001028 <map_angle+0x40>)
 8000ff8:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001002:	fb02 f203 	mul.w	r2, r2, r3
 8001006:	4b08      	ldr	r3, [pc, #32]	; (8001028 <map_angle+0x40>)
 8001008:	f9b3 3000 	ldrsh.w	r3, [r3]
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001012:	b29b      	uxth	r3, r3
 8001014:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001018:	b29b      	uxth	r3, r3
 800101a:	b21b      	sxth	r3, r3
}
 800101c:	4618      	mov	r0, r3
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	20000010 	.word	0x20000010
 800102c:	00000000 	.word	0x00000000

08001030 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001030:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001036:	f001 fb85 	bl	8002744 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800103a:	f000 fb61 	bl	8001700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800103e:	f000 fdeb 	bl	8001c18 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001042:	f000 fc99 	bl	8001978 <MX_SPI1_Init>
  MX_ADC1_Init();
 8001046:	f000 fbc5 	bl	80017d4 <MX_ADC1_Init>
  MX_ADC2_Init();
 800104a:	f000 fc15 	bl	8001878 <MX_ADC2_Init>
  MX_TIM3_Init();
 800104e:	f000 fcc9 	bl	80019e4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001052:	f000 fd49 	bl	8001ae8 <MX_TIM4_Init>
  MX_I2C1_Init();
 8001056:	f000 fc61 	bl	800191c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  SSD1306_Init (); //Inicializo el dispaly OLED
 800105a:	f000 fe67 	bl	8001d2c <SSD1306_Init>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800105e:	2100      	movs	r1, #0
 8001060:	48c7      	ldr	r0, [pc, #796]	; (8001380 <main+0x350>)
 8001062:	f004 faeb 	bl	800563c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001066:	2104      	movs	r1, #4
 8001068:	48c5      	ldr	r0, [pc, #788]	; (8001380 <main+0x350>)
 800106a:	f004 fae7 	bl	800563c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800106e:	2100      	movs	r1, #0
 8001070:	48c4      	ldr	r0, [pc, #784]	; (8001384 <main+0x354>)
 8001072:	f004 fae3 	bl	800563c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001076:	2104      	movs	r1, #4
 8001078:	48c2      	ldr	r0, [pc, #776]	; (8001384 <main+0x354>)
 800107a:	f004 fadf 	bl	800563c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800107e:	2108      	movs	r1, #8
 8001080:	48c0      	ldr	r0, [pc, #768]	; (8001384 <main+0x354>)
 8001082:	f004 fadb 	bl	800563c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001086:	210c      	movs	r1, #12
 8001088:	48be      	ldr	r0, [pc, #760]	; (8001384 <main+0x354>)
 800108a:	f004 fad7 	bl	800563c <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET); //Aseguro que no haya comunicación SPI
 800108e:	2201      	movs	r2, #1
 8001090:	2108      	movs	r1, #8
 8001092:	48bd      	ldr	r0, [pc, #756]	; (8001388 <main+0x358>)
 8001094:	f002 fa76 	bl	8003584 <HAL_GPIO_WritePin>

  //Inicialización de los registros del acelerómetro
  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET); //Comienzo la transmisión de datos por SPI
 8001098:	2200      	movs	r2, #0
 800109a:	2108      	movs	r1, #8
 800109c:	48ba      	ldr	r0, [pc, #744]	; (8001388 <main+0x358>)
 800109e:	f002 fa71 	bl	8003584 <HAL_GPIO_WritePin>
  spiTxBuf[0]=0x20; //Accedo al registro 0x20 (Control Regist 4)
 80010a2:	4bba      	ldr	r3, [pc, #744]	; (800138c <main+0x35c>)
 80010a4:	2220      	movs	r2, #32
 80010a6:	701a      	strb	r2, [r3, #0]
  spiTxBuf[1]=0x67; //Activo los elementos 0x67 (en decimal = 103; binario = 0110_0111) Para q los outputs vayan a 100Hz de tasa de refresco
 80010a8:	4bb8      	ldr	r3, [pc, #736]	; (800138c <main+0x35c>)
 80010aa:	2267      	movs	r2, #103	; 0x67
 80010ac:	705a      	strb	r2, [r3, #1]
  HAL_SPI_Transmit(&hspi1,spiTxBuf,2,50);
 80010ae:	2332      	movs	r3, #50	; 0x32
 80010b0:	2202      	movs	r2, #2
 80010b2:	49b6      	ldr	r1, [pc, #728]	; (800138c <main+0x35c>)
 80010b4:	48b6      	ldr	r0, [pc, #728]	; (8001390 <main+0x360>)
 80010b6:	f003 fcfa 	bl	8004aae <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET); //Fin de la transmisión de datos por SPI
 80010ba:	2201      	movs	r2, #1
 80010bc:	2108      	movs	r1, #8
 80010be:	48b2      	ldr	r0, [pc, #712]	; (8001388 <main+0x358>)
 80010c0:	f002 fa60 	bl	8003584 <HAL_GPIO_WritePin>

  start_x = HAL_GetTick();
 80010c4:	f001 fba4 	bl	8002810 <HAL_GetTick>
 80010c8:	4603      	mov	r3, r0
 80010ca:	4ab2      	ldr	r2, [pc, #712]	; (8001394 <main+0x364>)
 80010cc:	6013      	str	r3, [r2, #0]
  start_y = HAL_GetTick();
 80010ce:	f001 fb9f 	bl	8002810 <HAL_GetTick>
 80010d2:	4603      	mov	r3, r0
 80010d4:	4ab0      	ldr	r2, [pc, #704]	; (8001398 <main+0x368>)
 80010d6:	6013      	str	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 80010d8:	2200      	movs	r2, #0
 80010da:	2108      	movs	r1, #8
 80010dc:	48aa      	ldr	r0, [pc, #680]	; (8001388 <main+0x358>)
 80010de:	f002 fa51 	bl	8003584 <HAL_GPIO_WritePin>
	  spiTxBuf[0]=0x28|0x80; //OUT_X_L
 80010e2:	4baa      	ldr	r3, [pc, #680]	; (800138c <main+0x35c>)
 80010e4:	22a8      	movs	r2, #168	; 0xa8
 80010e6:	701a      	strb	r2, [r3, #0]
	  HAL_SPI_Transmit(&hspi1,spiTxBuf,1,20);
 80010e8:	2314      	movs	r3, #20
 80010ea:	2201      	movs	r2, #1
 80010ec:	49a7      	ldr	r1, [pc, #668]	; (800138c <main+0x35c>)
 80010ee:	48a8      	ldr	r0, [pc, #672]	; (8001390 <main+0x360>)
 80010f0:	f003 fcdd 	bl	8004aae <HAL_SPI_Transmit>
	  HAL_SPI_Receive(&hspi1,&spiRxBuf[1],1,20);
 80010f4:	2314      	movs	r3, #20
 80010f6:	2201      	movs	r2, #1
 80010f8:	49a8      	ldr	r1, [pc, #672]	; (800139c <main+0x36c>)
 80010fa:	48a5      	ldr	r0, [pc, #660]	; (8001390 <main+0x360>)
 80010fc:	f003 fe13 	bl	8004d26 <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
 8001100:	2201      	movs	r2, #1
 8001102:	2108      	movs	r1, #8
 8001104:	48a0      	ldr	r0, [pc, #640]	; (8001388 <main+0x358>)
 8001106:	f002 fa3d 	bl	8003584 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 800110a:	2200      	movs	r2, #0
 800110c:	2108      	movs	r1, #8
 800110e:	489e      	ldr	r0, [pc, #632]	; (8001388 <main+0x358>)
 8001110:	f002 fa38 	bl	8003584 <HAL_GPIO_WritePin>
	  spiTxBuf[0]=0x29|0x80; //OUT_X_H
 8001114:	4b9d      	ldr	r3, [pc, #628]	; (800138c <main+0x35c>)
 8001116:	22a9      	movs	r2, #169	; 0xa9
 8001118:	701a      	strb	r2, [r3, #0]
	  HAL_SPI_Transmit(&hspi1,spiTxBuf,1,20);
 800111a:	2314      	movs	r3, #20
 800111c:	2201      	movs	r2, #1
 800111e:	499b      	ldr	r1, [pc, #620]	; (800138c <main+0x35c>)
 8001120:	489b      	ldr	r0, [pc, #620]	; (8001390 <main+0x360>)
 8001122:	f003 fcc4 	bl	8004aae <HAL_SPI_Transmit>
	  HAL_SPI_Receive(&hspi1,&spiRxBuf[2],1,20);
 8001126:	2314      	movs	r3, #20
 8001128:	2201      	movs	r2, #1
 800112a:	499d      	ldr	r1, [pc, #628]	; (80013a0 <main+0x370>)
 800112c:	4898      	ldr	r0, [pc, #608]	; (8001390 <main+0x360>)
 800112e:	f003 fdfa 	bl	8004d26 <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
 8001132:	2201      	movs	r2, #1
 8001134:	2108      	movs	r1, #8
 8001136:	4894      	ldr	r0, [pc, #592]	; (8001388 <main+0x358>)
 8001138:	f002 fa24 	bl	8003584 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 800113c:	2200      	movs	r2, #0
 800113e:	2108      	movs	r1, #8
 8001140:	4891      	ldr	r0, [pc, #580]	; (8001388 <main+0x358>)
 8001142:	f002 fa1f 	bl	8003584 <HAL_GPIO_WritePin>
	  spiTxBuf[0]=0x2a|0x80; //OUT_Y_L
 8001146:	4b91      	ldr	r3, [pc, #580]	; (800138c <main+0x35c>)
 8001148:	22aa      	movs	r2, #170	; 0xaa
 800114a:	701a      	strb	r2, [r3, #0]
	  HAL_SPI_Transmit(&hspi1,spiTxBuf,1,20);
 800114c:	2314      	movs	r3, #20
 800114e:	2201      	movs	r2, #1
 8001150:	498e      	ldr	r1, [pc, #568]	; (800138c <main+0x35c>)
 8001152:	488f      	ldr	r0, [pc, #572]	; (8001390 <main+0x360>)
 8001154:	f003 fcab 	bl	8004aae <HAL_SPI_Transmit>
	  HAL_SPI_Receive(&hspi1,&spiRxBuf[3],1,20);
 8001158:	2314      	movs	r3, #20
 800115a:	2201      	movs	r2, #1
 800115c:	4991      	ldr	r1, [pc, #580]	; (80013a4 <main+0x374>)
 800115e:	488c      	ldr	r0, [pc, #560]	; (8001390 <main+0x360>)
 8001160:	f003 fde1 	bl	8004d26 <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
 8001164:	2201      	movs	r2, #1
 8001166:	2108      	movs	r1, #8
 8001168:	4887      	ldr	r0, [pc, #540]	; (8001388 <main+0x358>)
 800116a:	f002 fa0b 	bl	8003584 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 800116e:	2200      	movs	r2, #0
 8001170:	2108      	movs	r1, #8
 8001172:	4885      	ldr	r0, [pc, #532]	; (8001388 <main+0x358>)
 8001174:	f002 fa06 	bl	8003584 <HAL_GPIO_WritePin>
	  spiTxBuf[0]=0x2b|0x80; //OUT_Y_H
 8001178:	4b84      	ldr	r3, [pc, #528]	; (800138c <main+0x35c>)
 800117a:	22ab      	movs	r2, #171	; 0xab
 800117c:	701a      	strb	r2, [r3, #0]
	  HAL_SPI_Transmit(&hspi1,spiTxBuf,1,20);
 800117e:	2314      	movs	r3, #20
 8001180:	2201      	movs	r2, #1
 8001182:	4982      	ldr	r1, [pc, #520]	; (800138c <main+0x35c>)
 8001184:	4882      	ldr	r0, [pc, #520]	; (8001390 <main+0x360>)
 8001186:	f003 fc92 	bl	8004aae <HAL_SPI_Transmit>
	  HAL_SPI_Receive(&hspi1,&spiRxBuf[4],1,20);
 800118a:	2314      	movs	r3, #20
 800118c:	2201      	movs	r2, #1
 800118e:	4986      	ldr	r1, [pc, #536]	; (80013a8 <main+0x378>)
 8001190:	487f      	ldr	r0, [pc, #508]	; (8001390 <main+0x360>)
 8001192:	f003 fdc8 	bl	8004d26 <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
 8001196:	2201      	movs	r2, #1
 8001198:	2108      	movs	r1, #8
 800119a:	487b      	ldr	r0, [pc, #492]	; (8001388 <main+0x358>)
 800119c:	f002 f9f2 	bl	8003584 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 80011a0:	2200      	movs	r2, #0
 80011a2:	2108      	movs	r1, #8
 80011a4:	4878      	ldr	r0, [pc, #480]	; (8001388 <main+0x358>)
 80011a6:	f002 f9ed 	bl	8003584 <HAL_GPIO_WritePin>
	  spiTxBuf[0]=0x2c|0x80; //OUT_Z_L
 80011aa:	4b78      	ldr	r3, [pc, #480]	; (800138c <main+0x35c>)
 80011ac:	22ac      	movs	r2, #172	; 0xac
 80011ae:	701a      	strb	r2, [r3, #0]
	  HAL_SPI_Transmit(&hspi1,spiTxBuf,1,20);
 80011b0:	2314      	movs	r3, #20
 80011b2:	2201      	movs	r2, #1
 80011b4:	4975      	ldr	r1, [pc, #468]	; (800138c <main+0x35c>)
 80011b6:	4876      	ldr	r0, [pc, #472]	; (8001390 <main+0x360>)
 80011b8:	f003 fc79 	bl	8004aae <HAL_SPI_Transmit>
	  HAL_SPI_Receive(&hspi1,&spiRxBuf[5],1,20);
 80011bc:	2314      	movs	r3, #20
 80011be:	2201      	movs	r2, #1
 80011c0:	497a      	ldr	r1, [pc, #488]	; (80013ac <main+0x37c>)
 80011c2:	4873      	ldr	r0, [pc, #460]	; (8001390 <main+0x360>)
 80011c4:	f003 fdaf 	bl	8004d26 <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
 80011c8:	2201      	movs	r2, #1
 80011ca:	2108      	movs	r1, #8
 80011cc:	486e      	ldr	r0, [pc, #440]	; (8001388 <main+0x358>)
 80011ce:	f002 f9d9 	bl	8003584 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2108      	movs	r1, #8
 80011d6:	486c      	ldr	r0, [pc, #432]	; (8001388 <main+0x358>)
 80011d8:	f002 f9d4 	bl	8003584 <HAL_GPIO_WritePin>
	  spiTxBuf[0]=0x2d|0x80; //OUT_Z_H
 80011dc:	4b6b      	ldr	r3, [pc, #428]	; (800138c <main+0x35c>)
 80011de:	22ad      	movs	r2, #173	; 0xad
 80011e0:	701a      	strb	r2, [r3, #0]
	  HAL_SPI_Transmit(&hspi1,spiTxBuf,1,20);
 80011e2:	2314      	movs	r3, #20
 80011e4:	2201      	movs	r2, #1
 80011e6:	4969      	ldr	r1, [pc, #420]	; (800138c <main+0x35c>)
 80011e8:	4869      	ldr	r0, [pc, #420]	; (8001390 <main+0x360>)
 80011ea:	f003 fc60 	bl	8004aae <HAL_SPI_Transmit>
	  HAL_SPI_Receive(&hspi1,&spiRxBuf[6],1,20);
 80011ee:	2314      	movs	r3, #20
 80011f0:	2201      	movs	r2, #1
 80011f2:	496f      	ldr	r1, [pc, #444]	; (80013b0 <main+0x380>)
 80011f4:	4866      	ldr	r0, [pc, #408]	; (8001390 <main+0x360>)
 80011f6:	f003 fd96 	bl	8004d26 <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
 80011fa:	2201      	movs	r2, #1
 80011fc:	2108      	movs	r1, #8
 80011fe:	4862      	ldr	r0, [pc, #392]	; (8001388 <main+0x358>)
 8001200:	f002 f9c0 	bl	8003584 <HAL_GPIO_WritePin>

	  // Carga de los datos del buffer a las variables
	  accel_x = (spiRxBuf[2]<<8)|spiRxBuf[1];
 8001204:	4b6b      	ldr	r3, [pc, #428]	; (80013b4 <main+0x384>)
 8001206:	789b      	ldrb	r3, [r3, #2]
 8001208:	021b      	lsls	r3, r3, #8
 800120a:	b21a      	sxth	r2, r3
 800120c:	4b69      	ldr	r3, [pc, #420]	; (80013b4 <main+0x384>)
 800120e:	785b      	ldrb	r3, [r3, #1]
 8001210:	b21b      	sxth	r3, r3
 8001212:	4313      	orrs	r3, r2
 8001214:	b21a      	sxth	r2, r3
 8001216:	4b68      	ldr	r3, [pc, #416]	; (80013b8 <main+0x388>)
 8001218:	801a      	strh	r2, [r3, #0]
	  accel_y = (spiRxBuf[4]<<8)|spiRxBuf[3];
 800121a:	4b66      	ldr	r3, [pc, #408]	; (80013b4 <main+0x384>)
 800121c:	791b      	ldrb	r3, [r3, #4]
 800121e:	021b      	lsls	r3, r3, #8
 8001220:	b21a      	sxth	r2, r3
 8001222:	4b64      	ldr	r3, [pc, #400]	; (80013b4 <main+0x384>)
 8001224:	78db      	ldrb	r3, [r3, #3]
 8001226:	b21b      	sxth	r3, r3
 8001228:	4313      	orrs	r3, r2
 800122a:	b21a      	sxth	r2, r3
 800122c:	4b63      	ldr	r3, [pc, #396]	; (80013bc <main+0x38c>)
 800122e:	801a      	strh	r2, [r3, #0]
	  accel_z = (spiRxBuf[6]<<8)|spiRxBuf[5];
 8001230:	4b60      	ldr	r3, [pc, #384]	; (80013b4 <main+0x384>)
 8001232:	799b      	ldrb	r3, [r3, #6]
 8001234:	021b      	lsls	r3, r3, #8
 8001236:	b21a      	sxth	r2, r3
 8001238:	4b5e      	ldr	r3, [pc, #376]	; (80013b4 <main+0x384>)
 800123a:	795b      	ldrb	r3, [r3, #5]
 800123c:	b21b      	sxth	r3, r3
 800123e:	4313      	orrs	r3, r2
 8001240:	b21a      	sxth	r2, r3
 8001242:	4b5f      	ldr	r3, [pc, #380]	; (80013c0 <main+0x390>)
 8001244:	801a      	strh	r2, [r3, #0]


	  grad_accel_x = atan(-accel_x/sqrt(pow(accel_y,2) + pow(accel_z,2)))*(180.0/3.1416);
 8001246:	4b5c      	ldr	r3, [pc, #368]	; (80013b8 <main+0x388>)
 8001248:	881b      	ldrh	r3, [r3, #0]
 800124a:	b21b      	sxth	r3, r3
 800124c:	425b      	negs	r3, r3
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff f960 	bl	8000514 <__aeabi_i2d>
 8001254:	4604      	mov	r4, r0
 8001256:	460d      	mov	r5, r1
 8001258:	4b58      	ldr	r3, [pc, #352]	; (80013bc <main+0x38c>)
 800125a:	881b      	ldrh	r3, [r3, #0]
 800125c:	b21b      	sxth	r3, r3
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff f958 	bl	8000514 <__aeabi_i2d>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	ed9f 1b41 	vldr	d1, [pc, #260]	; 8001370 <main+0x340>
 800126c:	ec43 2b10 	vmov	d0, r2, r3
 8001270:	f005 fdcc 	bl	8006e0c <pow>
 8001274:	ec59 8b10 	vmov	r8, r9, d0
 8001278:	4b51      	ldr	r3, [pc, #324]	; (80013c0 <main+0x390>)
 800127a:	881b      	ldrh	r3, [r3, #0]
 800127c:	b21b      	sxth	r3, r3
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff f948 	bl	8000514 <__aeabi_i2d>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	ed9f 1b39 	vldr	d1, [pc, #228]	; 8001370 <main+0x340>
 800128c:	ec43 2b10 	vmov	d0, r2, r3
 8001290:	f005 fdbc 	bl	8006e0c <pow>
 8001294:	ec53 2b10 	vmov	r2, r3, d0
 8001298:	4640      	mov	r0, r8
 800129a:	4649      	mov	r1, r9
 800129c:	f7fe ffee 	bl	800027c <__adddf3>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	ec43 2b17 	vmov	d7, r2, r3
 80012a8:	eeb0 0a47 	vmov.f32	s0, s14
 80012ac:	eef0 0a67 	vmov.f32	s1, s15
 80012b0:	f005 fe5a 	bl	8006f68 <sqrt>
 80012b4:	ec53 2b10 	vmov	r2, r3, d0
 80012b8:	4620      	mov	r0, r4
 80012ba:	4629      	mov	r1, r5
 80012bc:	f7ff fabe 	bl	800083c <__aeabi_ddiv>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	ec43 2b17 	vmov	d7, r2, r3
 80012c8:	eeb0 0a47 	vmov.f32	s0, s14
 80012cc:	eef0 0a67 	vmov.f32	s1, s15
 80012d0:	f005 fbf2 	bl	8006ab8 <atan>
 80012d4:	ec51 0b10 	vmov	r0, r1, d0
 80012d8:	a327      	add	r3, pc, #156	; (adr r3, 8001378 <main+0x348>)
 80012da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012de:	f7ff f983 	bl	80005e8 <__aeabi_dmul>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	4610      	mov	r0, r2
 80012e8:	4619      	mov	r1, r3
 80012ea:	f7ff fc2d 	bl	8000b48 <__aeabi_d2iz>
 80012ee:	4603      	mov	r3, r0
 80012f0:	b21a      	sxth	r2, r3
 80012f2:	4b34      	ldr	r3, [pc, #208]	; (80013c4 <main+0x394>)
 80012f4:	801a      	strh	r2, [r3, #0]
	  grad_accel_y = atan(accel_y/sqrt(pow(accel_x,2) + pow(accel_z,2)))*(180.0/3.1416);
 80012f6:	4b31      	ldr	r3, [pc, #196]	; (80013bc <main+0x38c>)
 80012f8:	881b      	ldrh	r3, [r3, #0]
 80012fa:	b21b      	sxth	r3, r3
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff f909 	bl	8000514 <__aeabi_i2d>
 8001302:	4604      	mov	r4, r0
 8001304:	460d      	mov	r5, r1
 8001306:	4b2c      	ldr	r3, [pc, #176]	; (80013b8 <main+0x388>)
 8001308:	881b      	ldrh	r3, [r3, #0]
 800130a:	b21b      	sxth	r3, r3
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff f901 	bl	8000514 <__aeabi_i2d>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	ed9f 1b16 	vldr	d1, [pc, #88]	; 8001370 <main+0x340>
 800131a:	ec43 2b10 	vmov	d0, r2, r3
 800131e:	f005 fd75 	bl	8006e0c <pow>
 8001322:	ec59 8b10 	vmov	r8, r9, d0
 8001326:	4b26      	ldr	r3, [pc, #152]	; (80013c0 <main+0x390>)
 8001328:	881b      	ldrh	r3, [r3, #0]
 800132a:	b21b      	sxth	r3, r3
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff f8f1 	bl	8000514 <__aeabi_i2d>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 8001370 <main+0x340>
 800133a:	ec43 2b10 	vmov	d0, r2, r3
 800133e:	f005 fd65 	bl	8006e0c <pow>
 8001342:	ec53 2b10 	vmov	r2, r3, d0
 8001346:	4640      	mov	r0, r8
 8001348:	4649      	mov	r1, r9
 800134a:	f7fe ff97 	bl	800027c <__adddf3>
 800134e:	4602      	mov	r2, r0
 8001350:	460b      	mov	r3, r1
 8001352:	ec43 2b17 	vmov	d7, r2, r3
 8001356:	eeb0 0a47 	vmov.f32	s0, s14
 800135a:	eef0 0a67 	vmov.f32	s1, s15
 800135e:	f005 fe03 	bl	8006f68 <sqrt>
 8001362:	ec53 2b10 	vmov	r2, r3, d0
 8001366:	4620      	mov	r0, r4
 8001368:	4629      	mov	r1, r5
 800136a:	e02d      	b.n	80013c8 <main+0x398>
 800136c:	f3af 8000 	nop.w
 8001370:	00000000 	.word	0x00000000
 8001374:	40000000 	.word	0x40000000
 8001378:	b6774c14 	.word	0xb6774c14
 800137c:	404ca5d7 	.word	0x404ca5d7
 8001380:	200005cc 	.word	0x200005cc
 8001384:	200004d4 	.word	0x200004d4
 8001388:	40021000 	.word	0x40021000
 800138c:	200006e8 	.word	0x200006e8
 8001390:	20000670 	.word	0x20000670
 8001394:	20000660 	.word	0x20000660
 8001398:	2000051c 	.word	0x2000051c
 800139c:	200004cd 	.word	0x200004cd
 80013a0:	200004ce 	.word	0x200004ce
 80013a4:	200004cf 	.word	0x200004cf
 80013a8:	200004d0 	.word	0x200004d0
 80013ac:	200004d1 	.word	0x200004d1
 80013b0:	200004d2 	.word	0x200004d2
 80013b4:	200004cc 	.word	0x200004cc
 80013b8:	200004c8 	.word	0x200004c8
 80013bc:	20000614 	.word	0x20000614
 80013c0:	200006e4 	.word	0x200006e4
 80013c4:	20000616 	.word	0x20000616
 80013c8:	f7ff fa38 	bl	800083c <__aeabi_ddiv>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	ec43 2b17 	vmov	d7, r2, r3
 80013d4:	eeb0 0a47 	vmov.f32	s0, s14
 80013d8:	eef0 0a67 	vmov.f32	s1, s15
 80013dc:	f005 fb6c 	bl	8006ab8 <atan>
 80013e0:	ec51 0b10 	vmov	r0, r1, d0
 80013e4:	a3c4      	add	r3, pc, #784	; (adr r3, 80016f8 <main+0x6c8>)
 80013e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ea:	f7ff f8fd 	bl	80005e8 <__aeabi_dmul>
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	4610      	mov	r0, r2
 80013f4:	4619      	mov	r1, r3
 80013f6:	f7ff fba7 	bl	8000b48 <__aeabi_d2iz>
 80013fa:	4603      	mov	r3, r0
 80013fc:	b21a      	sxth	r2, r3
 80013fe:	4ba2      	ldr	r3, [pc, #648]	; (8001688 <main+0x658>)
 8001400:	801a      	strh	r2, [r3, #0]


	  if(mode){
 8001402:	4ba2      	ldr	r3, [pc, #648]	; (800168c <main+0x65c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d014      	beq.n	8001434 <main+0x404>
		  lights_x = map_acc(accel_x);
 800140a:	4ba1      	ldr	r3, [pc, #644]	; (8001690 <main+0x660>)
 800140c:	881b      	ldrh	r3, [r3, #0]
 800140e:	b21b      	sxth	r3, r3
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff fd57 	bl	8000ec4 <map_acc>
 8001416:	4603      	mov	r3, r0
 8001418:	461a      	mov	r2, r3
 800141a:	4b9e      	ldr	r3, [pc, #632]	; (8001694 <main+0x664>)
 800141c:	801a      	strh	r2, [r3, #0]
		  lights_y = map_acc(accel_y) ;
 800141e:	4b9e      	ldr	r3, [pc, #632]	; (8001698 <main+0x668>)
 8001420:	881b      	ldrh	r3, [r3, #0]
 8001422:	b21b      	sxth	r3, r3
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff fd4d 	bl	8000ec4 <map_acc>
 800142a:	4603      	mov	r3, r0
 800142c:	461a      	mov	r2, r3
 800142e:	4b9b      	ldr	r3, [pc, #620]	; (800169c <main+0x66c>)
 8001430:	801a      	strh	r2, [r3, #0]
 8001432:	e03b      	b.n	80014ac <main+0x47c>
	  }


	  else{
		  HAL_ADC_Start(&hadc1);
 8001434:	489a      	ldr	r0, [pc, #616]	; (80016a0 <main+0x670>)
 8001436:	f001 fa3b 	bl	80028b0 <HAL_ADC_Start>
		  if(HAL_ADC_PollForConversion(&hadc1, 100)==HAL_OK)
 800143a:	2164      	movs	r1, #100	; 0x64
 800143c:	4898      	ldr	r0, [pc, #608]	; (80016a0 <main+0x670>)
 800143e:	f001 fb3c 	bl	8002aba <HAL_ADC_PollForConversion>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d106      	bne.n	8001456 <main+0x426>
			  adcval_x = HAL_ADC_GetValue(&hadc1); // -450
 8001448:	4895      	ldr	r0, [pc, #596]	; (80016a0 <main+0x670>)
 800144a:	f001 fbc1 	bl	8002bd0 <HAL_ADC_GetValue>
 800144e:	4603      	mov	r3, r0
 8001450:	b21a      	sxth	r2, r3
 8001452:	4b94      	ldr	r3, [pc, #592]	; (80016a4 <main+0x674>)
 8001454:	801a      	strh	r2, [r3, #0]
		  HAL_ADC_Stop(&hadc1);
 8001456:	4892      	ldr	r0, [pc, #584]	; (80016a0 <main+0x670>)
 8001458:	f001 fafc 	bl	8002a54 <HAL_ADC_Stop>

		  HAL_ADC_Start(&hadc2);
 800145c:	4892      	ldr	r0, [pc, #584]	; (80016a8 <main+0x678>)
 800145e:	f001 fa27 	bl	80028b0 <HAL_ADC_Start>
		  if(HAL_ADC_PollForConversion(&hadc2, 100)==HAL_OK)
 8001462:	2164      	movs	r1, #100	; 0x64
 8001464:	4890      	ldr	r0, [pc, #576]	; (80016a8 <main+0x678>)
 8001466:	f001 fb28 	bl	8002aba <HAL_ADC_PollForConversion>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d106      	bne.n	800147e <main+0x44e>
			  adcval_y = HAL_ADC_GetValue(&hadc2);
 8001470:	488d      	ldr	r0, [pc, #564]	; (80016a8 <main+0x678>)
 8001472:	f001 fbad 	bl	8002bd0 <HAL_ADC_GetValue>
 8001476:	4603      	mov	r3, r0
 8001478:	b21a      	sxth	r2, r3
 800147a:	4b8c      	ldr	r3, [pc, #560]	; (80016ac <main+0x67c>)
 800147c:	801a      	strh	r2, [r3, #0]
		  HAL_ADC_Stop(&hadc2);
 800147e:	488a      	ldr	r0, [pc, #552]	; (80016a8 <main+0x678>)
 8001480:	f001 fae8 	bl	8002a54 <HAL_ADC_Stop>

		  lights_x = map_adc(adcval_x);
 8001484:	4b87      	ldr	r3, [pc, #540]	; (80016a4 <main+0x674>)
 8001486:	f9b3 3000 	ldrsh.w	r3, [r3]
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fd60 	bl	8000f50 <map_adc>
 8001490:	4603      	mov	r3, r0
 8001492:	461a      	mov	r2, r3
 8001494:	4b7f      	ldr	r3, [pc, #508]	; (8001694 <main+0x664>)
 8001496:	801a      	strh	r2, [r3, #0]
		  lights_y = map_adc(adcval_y);
 8001498:	4b84      	ldr	r3, [pc, #528]	; (80016ac <main+0x67c>)
 800149a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff fd56 	bl	8000f50 <map_adc>
 80014a4:	4603      	mov	r3, r0
 80014a6:	461a      	mov	r2, r3
 80014a8:	4b7c      	ldr	r3, [pc, #496]	; (800169c <main+0x66c>)
 80014aa:	801a      	strh	r2, [r3, #0]
	  }

	  angle_x = map_angle(lights_x);
 80014ac:	4b79      	ldr	r3, [pc, #484]	; (8001694 <main+0x664>)
 80014ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff fd98 	bl	8000fe8 <map_angle>
 80014b8:	4603      	mov	r3, r0
 80014ba:	461a      	mov	r2, r3
 80014bc:	4b7c      	ldr	r3, [pc, #496]	; (80016b0 <main+0x680>)
 80014be:	801a      	strh	r2, [r3, #0]
	  angle_y = map_angle(-lights_y);
 80014c0:	4b76      	ldr	r3, [pc, #472]	; (800169c <main+0x66c>)
 80014c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	425b      	negs	r3, r3
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	b21b      	sxth	r3, r3
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff fd8a 	bl	8000fe8 <map_angle>
 80014d4:	4603      	mov	r3, r0
 80014d6:	461a      	mov	r2, r3
 80014d8:	4b76      	ldr	r3, [pc, #472]	; (80016b4 <main+0x684>)
 80014da:	801a      	strh	r2, [r3, #0]

	  if(HAL_GetTick() - start_x > 2){
 80014dc:	f001 f998 	bl	8002810 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	4b75      	ldr	r3, [pc, #468]	; (80016b8 <main+0x688>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d91f      	bls.n	800152c <main+0x4fc>
		  if(prev_x < angle_x)
 80014ec:	4b73      	ldr	r3, [pc, #460]	; (80016bc <main+0x68c>)
 80014ee:	881b      	ldrh	r3, [r3, #0]
 80014f0:	b21a      	sxth	r2, r3
 80014f2:	4b6f      	ldr	r3, [pc, #444]	; (80016b0 <main+0x680>)
 80014f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	da09      	bge.n	8001510 <main+0x4e0>
		  	  prev_x += 10;
 80014fc:	4b6f      	ldr	r3, [pc, #444]	; (80016bc <main+0x68c>)
 80014fe:	881b      	ldrh	r3, [r3, #0]
 8001500:	b21b      	sxth	r3, r3
 8001502:	b29b      	uxth	r3, r3
 8001504:	330a      	adds	r3, #10
 8001506:	b29b      	uxth	r3, r3
 8001508:	b21a      	sxth	r2, r3
 800150a:	4b6c      	ldr	r3, [pc, #432]	; (80016bc <main+0x68c>)
 800150c:	801a      	strh	r2, [r3, #0]
 800150e:	e008      	b.n	8001522 <main+0x4f2>
		  else
			  prev_x -= 10;
 8001510:	4b6a      	ldr	r3, [pc, #424]	; (80016bc <main+0x68c>)
 8001512:	881b      	ldrh	r3, [r3, #0]
 8001514:	b21b      	sxth	r3, r3
 8001516:	b29b      	uxth	r3, r3
 8001518:	3b0a      	subs	r3, #10
 800151a:	b29b      	uxth	r3, r3
 800151c:	b21a      	sxth	r2, r3
 800151e:	4b67      	ldr	r3, [pc, #412]	; (80016bc <main+0x68c>)
 8001520:	801a      	strh	r2, [r3, #0]
		  start_x = HAL_GetTick();}
 8001522:	f001 f975 	bl	8002810 <HAL_GetTick>
 8001526:	4603      	mov	r3, r0
 8001528:	4a63      	ldr	r2, [pc, #396]	; (80016b8 <main+0x688>)
 800152a:	6013      	str	r3, [r2, #0]

	  if(HAL_GetTick() - start_y > 2){
 800152c:	f001 f970 	bl	8002810 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	4b63      	ldr	r3, [pc, #396]	; (80016c0 <main+0x690>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b02      	cmp	r3, #2
 800153a:	d91f      	bls.n	800157c <main+0x54c>
		  if(prev_y < angle_y)
 800153c:	4b61      	ldr	r3, [pc, #388]	; (80016c4 <main+0x694>)
 800153e:	881b      	ldrh	r3, [r3, #0]
 8001540:	b21a      	sxth	r2, r3
 8001542:	4b5c      	ldr	r3, [pc, #368]	; (80016b4 <main+0x684>)
 8001544:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001548:	429a      	cmp	r2, r3
 800154a:	da09      	bge.n	8001560 <main+0x530>
			  prev_y += 10;
 800154c:	4b5d      	ldr	r3, [pc, #372]	; (80016c4 <main+0x694>)
 800154e:	881b      	ldrh	r3, [r3, #0]
 8001550:	b21b      	sxth	r3, r3
 8001552:	b29b      	uxth	r3, r3
 8001554:	330a      	adds	r3, #10
 8001556:	b29b      	uxth	r3, r3
 8001558:	b21a      	sxth	r2, r3
 800155a:	4b5a      	ldr	r3, [pc, #360]	; (80016c4 <main+0x694>)
 800155c:	801a      	strh	r2, [r3, #0]
 800155e:	e008      	b.n	8001572 <main+0x542>
		  else
			  prev_y -= 10;
 8001560:	4b58      	ldr	r3, [pc, #352]	; (80016c4 <main+0x694>)
 8001562:	881b      	ldrh	r3, [r3, #0]
 8001564:	b21b      	sxth	r3, r3
 8001566:	b29b      	uxth	r3, r3
 8001568:	3b0a      	subs	r3, #10
 800156a:	b29b      	uxth	r3, r3
 800156c:	b21a      	sxth	r2, r3
 800156e:	4b55      	ldr	r3, [pc, #340]	; (80016c4 <main+0x694>)
 8001570:	801a      	strh	r2, [r3, #0]
		  start_y = HAL_GetTick();}
 8001572:	f001 f94d 	bl	8002810 <HAL_GetTick>
 8001576:	4603      	mov	r3, r0
 8001578:	4a51      	ldr	r2, [pc, #324]	; (80016c0 <main+0x690>)
 800157a:	6013      	str	r3, [r2, #0]

	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, prev_x);
 800157c:	4b4f      	ldr	r3, [pc, #316]	; (80016bc <main+0x68c>)
 800157e:	881b      	ldrh	r3, [r3, #0]
 8001580:	b21a      	sxth	r2, r3
 8001582:	4b51      	ldr	r3, [pc, #324]	; (80016c8 <main+0x698>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, prev_y);
 8001588:	4b4e      	ldr	r3, [pc, #312]	; (80016c4 <main+0x694>)
 800158a:	881b      	ldrh	r3, [r3, #0]
 800158c:	b21a      	sxth	r2, r3
 800158e:	4b4e      	ldr	r3, [pc, #312]	; (80016c8 <main+0x698>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	639a      	str	r2, [r3, #56]	; 0x38

	  //Encendido de las leds por PWM
	  if(lights_x >= 0){
 8001594:	4b3f      	ldr	r3, [pc, #252]	; (8001694 <main+0x664>)
 8001596:	f9b3 3000 	ldrsh.w	r3, [r3]
 800159a:	2b00      	cmp	r3, #0
 800159c:	db0a      	blt.n	80015b4 <main+0x584>
	  	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 800159e:	4b4b      	ldr	r3, [pc, #300]	; (80016cc <main+0x69c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2200      	movs	r2, #0
 80015a4:	635a      	str	r2, [r3, #52]	; 0x34
	  	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, lights_x);
 80015a6:	4b3b      	ldr	r3, [pc, #236]	; (8001694 <main+0x664>)
 80015a8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80015ac:	4b47      	ldr	r3, [pc, #284]	; (80016cc <main+0x69c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	63da      	str	r2, [r3, #60]	; 0x3c
 80015b2:	e00a      	b.n	80015ca <main+0x59a>
	  }
	  else{
	  	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, -lights_x);
 80015b4:	4b37      	ldr	r3, [pc, #220]	; (8001694 <main+0x664>)
 80015b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ba:	425a      	negs	r2, r3
 80015bc:	4b43      	ldr	r3, [pc, #268]	; (80016cc <main+0x69c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	635a      	str	r2, [r3, #52]	; 0x34
	  	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 80015c2:	4b42      	ldr	r3, [pc, #264]	; (80016cc <main+0x69c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2200      	movs	r2, #0
 80015c8:	63da      	str	r2, [r3, #60]	; 0x3c
	  }

	  if(lights_y >= 0){
 80015ca:	4b34      	ldr	r3, [pc, #208]	; (800169c <main+0x66c>)
 80015cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	db0a      	blt.n	80015ea <main+0x5ba>
	  	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, lights_y);
 80015d4:	4b31      	ldr	r3, [pc, #196]	; (800169c <main+0x66c>)
 80015d6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80015da:	4b3c      	ldr	r3, [pc, #240]	; (80016cc <main+0x69c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	639a      	str	r2, [r3, #56]	; 0x38
	  	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 80015e0:	4b3a      	ldr	r3, [pc, #232]	; (80016cc <main+0x69c>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2200      	movs	r2, #0
 80015e6:	641a      	str	r2, [r3, #64]	; 0x40
 80015e8:	e00a      	b.n	8001600 <main+0x5d0>
	  }
	  else{
	  	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 80015ea:	4b38      	ldr	r3, [pc, #224]	; (80016cc <main+0x69c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2200      	movs	r2, #0
 80015f0:	639a      	str	r2, [r3, #56]	; 0x38
	  	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, -lights_y);
 80015f2:	4b2a      	ldr	r3, [pc, #168]	; (800169c <main+0x66c>)
 80015f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015f8:	425a      	negs	r2, r3
 80015fa:	4b34      	ldr	r3, [pc, #208]	; (80016cc <main+0x69c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	641a      	str	r2, [r3, #64]	; 0x40
	  }
	  //Muestra por pantalla OLED

	  sprintf(buf_x, "%d", grad_accel_x);
 8001600:	4b33      	ldr	r3, [pc, #204]	; (80016d0 <main+0x6a0>)
 8001602:	881b      	ldrh	r3, [r3, #0]
 8001604:	b21b      	sxth	r3, r3
 8001606:	461a      	mov	r2, r3
 8001608:	4932      	ldr	r1, [pc, #200]	; (80016d4 <main+0x6a4>)
 800160a:	4833      	ldr	r0, [pc, #204]	; (80016d8 <main+0x6a8>)
 800160c:	f004 fe26 	bl	800625c <siprintf>
	  sprintf(buf2_x, "%-10s", buf_x); //Relleno de espacios el resto del string
 8001610:	4a31      	ldr	r2, [pc, #196]	; (80016d8 <main+0x6a8>)
 8001612:	4932      	ldr	r1, [pc, #200]	; (80016dc <main+0x6ac>)
 8001614:	4832      	ldr	r0, [pc, #200]	; (80016e0 <main+0x6b0>)
 8001616:	f004 fe21 	bl	800625c <siprintf>
	  sprintf(buf_y, "%d", grad_accel_y);
 800161a:	4b1b      	ldr	r3, [pc, #108]	; (8001688 <main+0x658>)
 800161c:	881b      	ldrh	r3, [r3, #0]
 800161e:	b21b      	sxth	r3, r3
 8001620:	461a      	mov	r2, r3
 8001622:	492c      	ldr	r1, [pc, #176]	; (80016d4 <main+0x6a4>)
 8001624:	482f      	ldr	r0, [pc, #188]	; (80016e4 <main+0x6b4>)
 8001626:	f004 fe19 	bl	800625c <siprintf>
	  sprintf(buf2_y, "%-10s", buf_y); //Relleno de espacios el resto del string
 800162a:	4a2e      	ldr	r2, [pc, #184]	; (80016e4 <main+0x6b4>)
 800162c:	492b      	ldr	r1, [pc, #172]	; (80016dc <main+0x6ac>)
 800162e:	482e      	ldr	r0, [pc, #184]	; (80016e8 <main+0x6b8>)
 8001630:	f004 fe14 	bl	800625c <siprintf>

	  SSD1306_GotoXY (5, 10); // goto 10, 10
 8001634:	210a      	movs	r1, #10
 8001636:	2005      	movs	r0, #5
 8001638:	f000 fce2 	bl	8002000 <SSD1306_GotoXY>
	  SSD1306_Puts ("X: ", &Font_7x10, 1);
 800163c:	2201      	movs	r2, #1
 800163e:	492b      	ldr	r1, [pc, #172]	; (80016ec <main+0x6bc>)
 8001640:	482b      	ldr	r0, [pc, #172]	; (80016f0 <main+0x6c0>)
 8001642:	f000 fd73 	bl	800212c <SSD1306_Puts>
	  SSD1306_GotoXY (30, 10);
 8001646:	210a      	movs	r1, #10
 8001648:	201e      	movs	r0, #30
 800164a:	f000 fcd9 	bl	8002000 <SSD1306_GotoXY>
	  SSD1306_Puts (buf2_x, &Font_7x10, 1);
 800164e:	2201      	movs	r2, #1
 8001650:	4926      	ldr	r1, [pc, #152]	; (80016ec <main+0x6bc>)
 8001652:	4823      	ldr	r0, [pc, #140]	; (80016e0 <main+0x6b0>)
 8001654:	f000 fd6a 	bl	800212c <SSD1306_Puts>

	  SSD1306_GotoXY (5, 30);
 8001658:	211e      	movs	r1, #30
 800165a:	2005      	movs	r0, #5
 800165c:	f000 fcd0 	bl	8002000 <SSD1306_GotoXY>
	  SSD1306_Puts ("Y: ", &Font_7x10, 1);
 8001660:	2201      	movs	r2, #1
 8001662:	4922      	ldr	r1, [pc, #136]	; (80016ec <main+0x6bc>)
 8001664:	4823      	ldr	r0, [pc, #140]	; (80016f4 <main+0x6c4>)
 8001666:	f000 fd61 	bl	800212c <SSD1306_Puts>
	  SSD1306_GotoXY (30, 30);
 800166a:	211e      	movs	r1, #30
 800166c:	201e      	movs	r0, #30
 800166e:	f000 fcc7 	bl	8002000 <SSD1306_GotoXY>
	  SSD1306_Puts (buf2_y, &Font_7x10, 1);
 8001672:	2201      	movs	r2, #1
 8001674:	491d      	ldr	r1, [pc, #116]	; (80016ec <main+0x6bc>)
 8001676:	481c      	ldr	r0, [pc, #112]	; (80016e8 <main+0x6b8>)
 8001678:	f000 fd58 	bl	800212c <SSD1306_Puts>

	  SSD1306_UpdateScreen(); // update screen
 800167c:	f000 fc1a 	bl	8001eb4 <SSD1306_UpdateScreen>
	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 8001680:	e52a      	b.n	80010d8 <main+0xa8>
 8001682:	bf00      	nop
 8001684:	f3af 8000 	nop.w
 8001688:	2000066c 	.word	0x2000066c
 800168c:	2000000c 	.word	0x2000000c
 8001690:	200004c8 	.word	0x200004c8
 8001694:	20000664 	.word	0x20000664
 8001698:	20000614 	.word	0x20000614
 800169c:	200005ca 	.word	0x200005ca
 80016a0:	20000618 	.word	0x20000618
 80016a4:	200005c8 	.word	0x200005c8
 80016a8:	2000052c 	.word	0x2000052c
 80016ac:	20000668 	.word	0x20000668
 80016b0:	2000066a 	.word	0x2000066a
 80016b4:	20000666 	.word	0x20000666
 80016b8:	20000660 	.word	0x20000660
 80016bc:	20000008 	.word	0x20000008
 80016c0:	2000051c 	.word	0x2000051c
 80016c4:	2000000a 	.word	0x2000000a
 80016c8:	200005cc 	.word	0x200005cc
 80016cc:	200004d4 	.word	0x200004d4
 80016d0:	20000616 	.word	0x20000616
 80016d4:	08007de8 	.word	0x08007de8
 80016d8:	200006d8 	.word	0x200006d8
 80016dc:	08007dec 	.word	0x08007dec
 80016e0:	200004b8 	.word	0x200004b8
 80016e4:	20000520 	.word	0x20000520
 80016e8:	200006c8 	.word	0x200006c8
 80016ec:	20000000 	.word	0x20000000
 80016f0:	08007df4 	.word	0x08007df4
 80016f4:	08007df8 	.word	0x08007df8
 80016f8:	b6774c14 	.word	0xb6774c14
 80016fc:	404ca5d7 	.word	0x404ca5d7

08001700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b094      	sub	sp, #80	; 0x50
 8001704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001706:	f107 0320 	add.w	r3, r7, #32
 800170a:	2230      	movs	r2, #48	; 0x30
 800170c:	2100      	movs	r1, #0
 800170e:	4618      	mov	r0, r3
 8001710:	f004 fd9c 	bl	800624c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001714:	f107 030c 	add.w	r3, r7, #12
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
 8001722:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001724:	2300      	movs	r3, #0
 8001726:	60bb      	str	r3, [r7, #8]
 8001728:	4b28      	ldr	r3, [pc, #160]	; (80017cc <SystemClock_Config+0xcc>)
 800172a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172c:	4a27      	ldr	r2, [pc, #156]	; (80017cc <SystemClock_Config+0xcc>)
 800172e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001732:	6413      	str	r3, [r2, #64]	; 0x40
 8001734:	4b25      	ldr	r3, [pc, #148]	; (80017cc <SystemClock_Config+0xcc>)
 8001736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173c:	60bb      	str	r3, [r7, #8]
 800173e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001740:	2300      	movs	r3, #0
 8001742:	607b      	str	r3, [r7, #4]
 8001744:	4b22      	ldr	r3, [pc, #136]	; (80017d0 <SystemClock_Config+0xd0>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a21      	ldr	r2, [pc, #132]	; (80017d0 <SystemClock_Config+0xd0>)
 800174a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800174e:	6013      	str	r3, [r2, #0]
 8001750:	4b1f      	ldr	r3, [pc, #124]	; (80017d0 <SystemClock_Config+0xd0>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001758:	607b      	str	r3, [r7, #4]
 800175a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800175c:	2302      	movs	r3, #2
 800175e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001760:	2301      	movs	r3, #1
 8001762:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001764:	2310      	movs	r3, #16
 8001766:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001768:	2302      	movs	r3, #2
 800176a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800176c:	2300      	movs	r3, #0
 800176e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001770:	2308      	movs	r3, #8
 8001772:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001774:	23a8      	movs	r3, #168	; 0xa8
 8001776:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001778:	2302      	movs	r3, #2
 800177a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800177c:	2304      	movs	r3, #4
 800177e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001780:	f107 0320 	add.w	r3, r7, #32
 8001784:	4618      	mov	r0, r3
 8001786:	f002 fca9 	bl	80040dc <HAL_RCC_OscConfig>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001790:	f000 fac6 	bl	8001d20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001794:	230f      	movs	r3, #15
 8001796:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001798:	2302      	movs	r3, #2
 800179a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017a0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017ac:	f107 030c 	add.w	r3, r7, #12
 80017b0:	2105      	movs	r1, #5
 80017b2:	4618      	mov	r0, r3
 80017b4:	f002 ff0a 	bl	80045cc <HAL_RCC_ClockConfig>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80017be:	f000 faaf 	bl	8001d20 <Error_Handler>
  }
}
 80017c2:	bf00      	nop
 80017c4:	3750      	adds	r7, #80	; 0x50
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40023800 	.word	0x40023800
 80017d0:	40007000 	.word	0x40007000

080017d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017da:	463b      	mov	r3, r7
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80017e6:	4b21      	ldr	r3, [pc, #132]	; (800186c <MX_ADC1_Init+0x98>)
 80017e8:	4a21      	ldr	r2, [pc, #132]	; (8001870 <MX_ADC1_Init+0x9c>)
 80017ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80017ec:	4b1f      	ldr	r3, [pc, #124]	; (800186c <MX_ADC1_Init+0x98>)
 80017ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017f4:	4b1d      	ldr	r3, [pc, #116]	; (800186c <MX_ADC1_Init+0x98>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80017fa:	4b1c      	ldr	r3, [pc, #112]	; (800186c <MX_ADC1_Init+0x98>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001800:	4b1a      	ldr	r3, [pc, #104]	; (800186c <MX_ADC1_Init+0x98>)
 8001802:	2200      	movs	r2, #0
 8001804:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001806:	4b19      	ldr	r3, [pc, #100]	; (800186c <MX_ADC1_Init+0x98>)
 8001808:	2200      	movs	r2, #0
 800180a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800180e:	4b17      	ldr	r3, [pc, #92]	; (800186c <MX_ADC1_Init+0x98>)
 8001810:	2200      	movs	r2, #0
 8001812:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001814:	4b15      	ldr	r3, [pc, #84]	; (800186c <MX_ADC1_Init+0x98>)
 8001816:	4a17      	ldr	r2, [pc, #92]	; (8001874 <MX_ADC1_Init+0xa0>)
 8001818:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800181a:	4b14      	ldr	r3, [pc, #80]	; (800186c <MX_ADC1_Init+0x98>)
 800181c:	2200      	movs	r2, #0
 800181e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001820:	4b12      	ldr	r3, [pc, #72]	; (800186c <MX_ADC1_Init+0x98>)
 8001822:	2201      	movs	r2, #1
 8001824:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001826:	4b11      	ldr	r3, [pc, #68]	; (800186c <MX_ADC1_Init+0x98>)
 8001828:	2200      	movs	r2, #0
 800182a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800182e:	4b0f      	ldr	r3, [pc, #60]	; (800186c <MX_ADC1_Init+0x98>)
 8001830:	2201      	movs	r2, #1
 8001832:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001834:	480d      	ldr	r0, [pc, #52]	; (800186c <MX_ADC1_Init+0x98>)
 8001836:	f000 fff7 	bl	8002828 <HAL_ADC_Init>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001840:	f000 fa6e 	bl	8001d20 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001844:	230a      	movs	r3, #10
 8001846:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001848:	2301      	movs	r3, #1
 800184a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800184c:	2300      	movs	r3, #0
 800184e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001850:	463b      	mov	r3, r7
 8001852:	4619      	mov	r1, r3
 8001854:	4805      	ldr	r0, [pc, #20]	; (800186c <MX_ADC1_Init+0x98>)
 8001856:	f001 f9c9 	bl	8002bec <HAL_ADC_ConfigChannel>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001860:	f000 fa5e 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001864:	bf00      	nop
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20000618 	.word	0x20000618
 8001870:	40012000 	.word	0x40012000
 8001874:	0f000001 	.word	0x0f000001

08001878 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800187e:	463b      	mov	r3, r7
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	609a      	str	r2, [r3, #8]
 8001888:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800188a:	4b21      	ldr	r3, [pc, #132]	; (8001910 <MX_ADC2_Init+0x98>)
 800188c:	4a21      	ldr	r2, [pc, #132]	; (8001914 <MX_ADC2_Init+0x9c>)
 800188e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001890:	4b1f      	ldr	r3, [pc, #124]	; (8001910 <MX_ADC2_Init+0x98>)
 8001892:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001896:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001898:	4b1d      	ldr	r3, [pc, #116]	; (8001910 <MX_ADC2_Init+0x98>)
 800189a:	2200      	movs	r2, #0
 800189c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800189e:	4b1c      	ldr	r3, [pc, #112]	; (8001910 <MX_ADC2_Init+0x98>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80018a4:	4b1a      	ldr	r3, [pc, #104]	; (8001910 <MX_ADC2_Init+0x98>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80018aa:	4b19      	ldr	r3, [pc, #100]	; (8001910 <MX_ADC2_Init+0x98>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018b2:	4b17      	ldr	r3, [pc, #92]	; (8001910 <MX_ADC2_Init+0x98>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018b8:	4b15      	ldr	r3, [pc, #84]	; (8001910 <MX_ADC2_Init+0x98>)
 80018ba:	4a17      	ldr	r2, [pc, #92]	; (8001918 <MX_ADC2_Init+0xa0>)
 80018bc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018be:	4b14      	ldr	r3, [pc, #80]	; (8001910 <MX_ADC2_Init+0x98>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80018c4:	4b12      	ldr	r3, [pc, #72]	; (8001910 <MX_ADC2_Init+0x98>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80018ca:	4b11      	ldr	r3, [pc, #68]	; (8001910 <MX_ADC2_Init+0x98>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018d2:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <MX_ADC2_Init+0x98>)
 80018d4:	2201      	movs	r2, #1
 80018d6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80018d8:	480d      	ldr	r0, [pc, #52]	; (8001910 <MX_ADC2_Init+0x98>)
 80018da:	f000 ffa5 	bl	8002828 <HAL_ADC_Init>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80018e4:	f000 fa1c 	bl	8001d20 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80018e8:	230b      	movs	r3, #11
 80018ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80018ec:	2301      	movs	r3, #1
 80018ee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80018f0:	2300      	movs	r3, #0
 80018f2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80018f4:	463b      	mov	r3, r7
 80018f6:	4619      	mov	r1, r3
 80018f8:	4805      	ldr	r0, [pc, #20]	; (8001910 <MX_ADC2_Init+0x98>)
 80018fa:	f001 f977 	bl	8002bec <HAL_ADC_ConfigChannel>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001904:	f000 fa0c 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001908:	bf00      	nop
 800190a:	3710      	adds	r7, #16
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	2000052c 	.word	0x2000052c
 8001914:	40012100 	.word	0x40012100
 8001918:	0f000001 	.word	0x0f000001

0800191c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001920:	4b12      	ldr	r3, [pc, #72]	; (800196c <MX_I2C1_Init+0x50>)
 8001922:	4a13      	ldr	r2, [pc, #76]	; (8001970 <MX_I2C1_Init+0x54>)
 8001924:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001926:	4b11      	ldr	r3, [pc, #68]	; (800196c <MX_I2C1_Init+0x50>)
 8001928:	4a12      	ldr	r2, [pc, #72]	; (8001974 <MX_I2C1_Init+0x58>)
 800192a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800192c:	4b0f      	ldr	r3, [pc, #60]	; (800196c <MX_I2C1_Init+0x50>)
 800192e:	2200      	movs	r2, #0
 8001930:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001932:	4b0e      	ldr	r3, [pc, #56]	; (800196c <MX_I2C1_Init+0x50>)
 8001934:	2200      	movs	r2, #0
 8001936:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001938:	4b0c      	ldr	r3, [pc, #48]	; (800196c <MX_I2C1_Init+0x50>)
 800193a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800193e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001940:	4b0a      	ldr	r3, [pc, #40]	; (800196c <MX_I2C1_Init+0x50>)
 8001942:	2200      	movs	r2, #0
 8001944:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001946:	4b09      	ldr	r3, [pc, #36]	; (800196c <MX_I2C1_Init+0x50>)
 8001948:	2200      	movs	r2, #0
 800194a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800194c:	4b07      	ldr	r3, [pc, #28]	; (800196c <MX_I2C1_Init+0x50>)
 800194e:	2200      	movs	r2, #0
 8001950:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001952:	4b06      	ldr	r3, [pc, #24]	; (800196c <MX_I2C1_Init+0x50>)
 8001954:	2200      	movs	r2, #0
 8001956:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001958:	4804      	ldr	r0, [pc, #16]	; (800196c <MX_I2C1_Init+0x50>)
 800195a:	f001 fe45 	bl	80035e8 <HAL_I2C_Init>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001964:	f000 f9dc 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001968:	bf00      	nop
 800196a:	bd80      	pop	{r7, pc}
 800196c:	20000574 	.word	0x20000574
 8001970:	40005400 	.word	0x40005400
 8001974:	00061a80 	.word	0x00061a80

08001978 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800197c:	4b17      	ldr	r3, [pc, #92]	; (80019dc <MX_SPI1_Init+0x64>)
 800197e:	4a18      	ldr	r2, [pc, #96]	; (80019e0 <MX_SPI1_Init+0x68>)
 8001980:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001982:	4b16      	ldr	r3, [pc, #88]	; (80019dc <MX_SPI1_Init+0x64>)
 8001984:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001988:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800198a:	4b14      	ldr	r3, [pc, #80]	; (80019dc <MX_SPI1_Init+0x64>)
 800198c:	2200      	movs	r2, #0
 800198e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001990:	4b12      	ldr	r3, [pc, #72]	; (80019dc <MX_SPI1_Init+0x64>)
 8001992:	2200      	movs	r2, #0
 8001994:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001996:	4b11      	ldr	r3, [pc, #68]	; (80019dc <MX_SPI1_Init+0x64>)
 8001998:	2200      	movs	r2, #0
 800199a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800199c:	4b0f      	ldr	r3, [pc, #60]	; (80019dc <MX_SPI1_Init+0x64>)
 800199e:	2200      	movs	r2, #0
 80019a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019a2:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <MX_SPI1_Init+0x64>)
 80019a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80019aa:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <MX_SPI1_Init+0x64>)
 80019ac:	2218      	movs	r2, #24
 80019ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019b0:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <MX_SPI1_Init+0x64>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019b6:	4b09      	ldr	r3, [pc, #36]	; (80019dc <MX_SPI1_Init+0x64>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019bc:	4b07      	ldr	r3, [pc, #28]	; (80019dc <MX_SPI1_Init+0x64>)
 80019be:	2200      	movs	r2, #0
 80019c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80019c2:	4b06      	ldr	r3, [pc, #24]	; (80019dc <MX_SPI1_Init+0x64>)
 80019c4:	220a      	movs	r2, #10
 80019c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019c8:	4804      	ldr	r0, [pc, #16]	; (80019dc <MX_SPI1_Init+0x64>)
 80019ca:	f002 ffe7 	bl	800499c <HAL_SPI_Init>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80019d4:	f000 f9a4 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019d8:	bf00      	nop
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	20000670 	.word	0x20000670
 80019e0:	40013000 	.word	0x40013000

080019e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08e      	sub	sp, #56	; 0x38
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	605a      	str	r2, [r3, #4]
 80019f4:	609a      	str	r2, [r3, #8]
 80019f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019f8:	f107 0320 	add.w	r3, r7, #32
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a02:	1d3b      	adds	r3, r7, #4
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
 8001a0e:	611a      	str	r2, [r3, #16]
 8001a10:	615a      	str	r2, [r3, #20]
 8001a12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a14:	4b32      	ldr	r3, [pc, #200]	; (8001ae0 <MX_TIM3_Init+0xfc>)
 8001a16:	4a33      	ldr	r2, [pc, #204]	; (8001ae4 <MX_TIM3_Init+0x100>)
 8001a18:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8001a1a:	4b31      	ldr	r3, [pc, #196]	; (8001ae0 <MX_TIM3_Init+0xfc>)
 8001a1c:	2253      	movs	r2, #83	; 0x53
 8001a1e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a20:	4b2f      	ldr	r3, [pc, #188]	; (8001ae0 <MX_TIM3_Init+0xfc>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 8001a26:	4b2e      	ldr	r3, [pc, #184]	; (8001ae0 <MX_TIM3_Init+0xfc>)
 8001a28:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001a2c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a2e:	4b2c      	ldr	r3, [pc, #176]	; (8001ae0 <MX_TIM3_Init+0xfc>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a34:	4b2a      	ldr	r3, [pc, #168]	; (8001ae0 <MX_TIM3_Init+0xfc>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a3a:	4829      	ldr	r0, [pc, #164]	; (8001ae0 <MX_TIM3_Init+0xfc>)
 8001a3c:	f003 fd56 	bl	80054ec <HAL_TIM_Base_Init>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001a46:	f000 f96b 	bl	8001d20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a54:	4619      	mov	r1, r3
 8001a56:	4822      	ldr	r0, [pc, #136]	; (8001ae0 <MX_TIM3_Init+0xfc>)
 8001a58:	f003 ff7a 	bl	8005950 <HAL_TIM_ConfigClockSource>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001a62:	f000 f95d 	bl	8001d20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a66:	481e      	ldr	r0, [pc, #120]	; (8001ae0 <MX_TIM3_Init+0xfc>)
 8001a68:	f003 fd8f 	bl	800558a <HAL_TIM_PWM_Init>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001a72:	f000 f955 	bl	8001d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a76:	2300      	movs	r3, #0
 8001a78:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a7e:	f107 0320 	add.w	r3, r7, #32
 8001a82:	4619      	mov	r1, r3
 8001a84:	4816      	ldr	r0, [pc, #88]	; (8001ae0 <MX_TIM3_Init+0xfc>)
 8001a86:	f004 fb3b 	bl	8006100 <HAL_TIMEx_MasterConfigSynchronization>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001a90:	f000 f946 	bl	8001d20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a94:	2360      	movs	r3, #96	; 0x60
 8001a96:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001aa4:	1d3b      	adds	r3, r7, #4
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	480d      	ldr	r0, [pc, #52]	; (8001ae0 <MX_TIM3_Init+0xfc>)
 8001aac:	f003 fe8e 	bl	80057cc <HAL_TIM_PWM_ConfigChannel>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001ab6:	f000 f933 	bl	8001d20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001aba:	1d3b      	adds	r3, r7, #4
 8001abc:	2204      	movs	r2, #4
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4807      	ldr	r0, [pc, #28]	; (8001ae0 <MX_TIM3_Init+0xfc>)
 8001ac2:	f003 fe83 	bl	80057cc <HAL_TIM_PWM_ConfigChannel>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001acc:	f000 f928 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001ad0:	4803      	ldr	r0, [pc, #12]	; (8001ae0 <MX_TIM3_Init+0xfc>)
 8001ad2:	f000 fd31 	bl	8002538 <HAL_TIM_MspPostInit>

}
 8001ad6:	bf00      	nop
 8001ad8:	3738      	adds	r7, #56	; 0x38
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	200005cc 	.word	0x200005cc
 8001ae4:	40000400 	.word	0x40000400

08001ae8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b08e      	sub	sp, #56	; 0x38
 8001aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	605a      	str	r2, [r3, #4]
 8001af8:	609a      	str	r2, [r3, #8]
 8001afa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001afc:	f107 0320 	add.w	r3, r7, #32
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b06:	1d3b      	adds	r3, r7, #4
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	611a      	str	r2, [r3, #16]
 8001b14:	615a      	str	r2, [r3, #20]
 8001b16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b18:	4b3d      	ldr	r3, [pc, #244]	; (8001c10 <MX_TIM4_Init+0x128>)
 8001b1a:	4a3e      	ldr	r2, [pc, #248]	; (8001c14 <MX_TIM4_Init+0x12c>)
 8001b1c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8001b1e:	4b3c      	ldr	r3, [pc, #240]	; (8001c10 <MX_TIM4_Init+0x128>)
 8001b20:	2253      	movs	r2, #83	; 0x53
 8001b22:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b24:	4b3a      	ldr	r3, [pc, #232]	; (8001c10 <MX_TIM4_Init+0x128>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000;
 8001b2a:	4b39      	ldr	r3, [pc, #228]	; (8001c10 <MX_TIM4_Init+0x128>)
 8001b2c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001b30:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b32:	4b37      	ldr	r3, [pc, #220]	; (8001c10 <MX_TIM4_Init+0x128>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b38:	4b35      	ldr	r3, [pc, #212]	; (8001c10 <MX_TIM4_Init+0x128>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b3e:	4834      	ldr	r0, [pc, #208]	; (8001c10 <MX_TIM4_Init+0x128>)
 8001b40:	f003 fcd4 	bl	80054ec <HAL_TIM_Base_Init>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001b4a:	f000 f8e9 	bl	8001d20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b52:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b58:	4619      	mov	r1, r3
 8001b5a:	482d      	ldr	r0, [pc, #180]	; (8001c10 <MX_TIM4_Init+0x128>)
 8001b5c:	f003 fef8 	bl	8005950 <HAL_TIM_ConfigClockSource>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001b66:	f000 f8db 	bl	8001d20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001b6a:	4829      	ldr	r0, [pc, #164]	; (8001c10 <MX_TIM4_Init+0x128>)
 8001b6c:	f003 fd0d 	bl	800558a <HAL_TIM_PWM_Init>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001b76:	f000 f8d3 	bl	8001d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b82:	f107 0320 	add.w	r3, r7, #32
 8001b86:	4619      	mov	r1, r3
 8001b88:	4821      	ldr	r0, [pc, #132]	; (8001c10 <MX_TIM4_Init+0x128>)
 8001b8a:	f004 fab9 	bl	8006100 <HAL_TIMEx_MasterConfigSynchronization>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001b94:	f000 f8c4 	bl	8001d20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b98:	2360      	movs	r3, #96	; 0x60
 8001b9a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ba8:	1d3b      	adds	r3, r7, #4
 8001baa:	2200      	movs	r2, #0
 8001bac:	4619      	mov	r1, r3
 8001bae:	4818      	ldr	r0, [pc, #96]	; (8001c10 <MX_TIM4_Init+0x128>)
 8001bb0:	f003 fe0c 	bl	80057cc <HAL_TIM_PWM_ConfigChannel>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001bba:	f000 f8b1 	bl	8001d20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bbe:	1d3b      	adds	r3, r7, #4
 8001bc0:	2204      	movs	r2, #4
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4812      	ldr	r0, [pc, #72]	; (8001c10 <MX_TIM4_Init+0x128>)
 8001bc6:	f003 fe01 	bl	80057cc <HAL_TIM_PWM_ConfigChannel>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001bd0:	f000 f8a6 	bl	8001d20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001bd4:	1d3b      	adds	r3, r7, #4
 8001bd6:	2208      	movs	r2, #8
 8001bd8:	4619      	mov	r1, r3
 8001bda:	480d      	ldr	r0, [pc, #52]	; (8001c10 <MX_TIM4_Init+0x128>)
 8001bdc:	f003 fdf6 	bl	80057cc <HAL_TIM_PWM_ConfigChannel>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8001be6:	f000 f89b 	bl	8001d20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001bea:	1d3b      	adds	r3, r7, #4
 8001bec:	220c      	movs	r2, #12
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4807      	ldr	r0, [pc, #28]	; (8001c10 <MX_TIM4_Init+0x128>)
 8001bf2:	f003 fdeb 	bl	80057cc <HAL_TIM_PWM_ConfigChannel>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8001bfc:	f000 f890 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001c00:	4803      	ldr	r0, [pc, #12]	; (8001c10 <MX_TIM4_Init+0x128>)
 8001c02:	f000 fc99 	bl	8002538 <HAL_TIM_MspPostInit>

}
 8001c06:	bf00      	nop
 8001c08:	3738      	adds	r7, #56	; 0x38
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	200004d4 	.word	0x200004d4
 8001c14:	40000800 	.word	0x40000800

08001c18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08a      	sub	sp, #40	; 0x28
 8001c1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1e:	f107 0314 	add.w	r3, r7, #20
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	605a      	str	r2, [r3, #4]
 8001c28:	609a      	str	r2, [r3, #8]
 8001c2a:	60da      	str	r2, [r3, #12]
 8001c2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	613b      	str	r3, [r7, #16]
 8001c32:	4b38      	ldr	r3, [pc, #224]	; (8001d14 <MX_GPIO_Init+0xfc>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	4a37      	ldr	r2, [pc, #220]	; (8001d14 <MX_GPIO_Init+0xfc>)
 8001c38:	f043 0310 	orr.w	r3, r3, #16
 8001c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3e:	4b35      	ldr	r3, [pc, #212]	; (8001d14 <MX_GPIO_Init+0xfc>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	f003 0310 	and.w	r3, r3, #16
 8001c46:	613b      	str	r3, [r7, #16]
 8001c48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	60fb      	str	r3, [r7, #12]
 8001c4e:	4b31      	ldr	r3, [pc, #196]	; (8001d14 <MX_GPIO_Init+0xfc>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	4a30      	ldr	r2, [pc, #192]	; (8001d14 <MX_GPIO_Init+0xfc>)
 8001c54:	f043 0304 	orr.w	r3, r3, #4
 8001c58:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5a:	4b2e      	ldr	r3, [pc, #184]	; (8001d14 <MX_GPIO_Init+0xfc>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	f003 0304 	and.w	r3, r3, #4
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	60bb      	str	r3, [r7, #8]
 8001c6a:	4b2a      	ldr	r3, [pc, #168]	; (8001d14 <MX_GPIO_Init+0xfc>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	4a29      	ldr	r2, [pc, #164]	; (8001d14 <MX_GPIO_Init+0xfc>)
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	6313      	str	r3, [r2, #48]	; 0x30
 8001c76:	4b27      	ldr	r3, [pc, #156]	; (8001d14 <MX_GPIO_Init+0xfc>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	60bb      	str	r3, [r7, #8]
 8001c80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	607b      	str	r3, [r7, #4]
 8001c86:	4b23      	ldr	r3, [pc, #140]	; (8001d14 <MX_GPIO_Init+0xfc>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	4a22      	ldr	r2, [pc, #136]	; (8001d14 <MX_GPIO_Init+0xfc>)
 8001c8c:	f043 0308 	orr.w	r3, r3, #8
 8001c90:	6313      	str	r3, [r2, #48]	; 0x30
 8001c92:	4b20      	ldr	r3, [pc, #128]	; (8001d14 <MX_GPIO_Init+0xfc>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	f003 0308 	and.w	r3, r3, #8
 8001c9a:	607b      	str	r3, [r7, #4]
 8001c9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	603b      	str	r3, [r7, #0]
 8001ca2:	4b1c      	ldr	r3, [pc, #112]	; (8001d14 <MX_GPIO_Init+0xfc>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	4a1b      	ldr	r2, [pc, #108]	; (8001d14 <MX_GPIO_Init+0xfc>)
 8001ca8:	f043 0302 	orr.w	r3, r3, #2
 8001cac:	6313      	str	r3, [r2, #48]	; 0x30
 8001cae:	4b19      	ldr	r3, [pc, #100]	; (8001d14 <MX_GPIO_Init+0xfc>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	603b      	str	r3, [r7, #0]
 8001cb8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2108      	movs	r1, #8
 8001cbe:	4816      	ldr	r0, [pc, #88]	; (8001d18 <MX_GPIO_Init+0x100>)
 8001cc0:	f001 fc60 	bl	8003584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001cc4:	2308      	movs	r3, #8
 8001cc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cd4:	f107 0314 	add.w	r3, r7, #20
 8001cd8:	4619      	mov	r1, r3
 8001cda:	480f      	ldr	r0, [pc, #60]	; (8001d18 <MX_GPIO_Init+0x100>)
 8001cdc:	f001 fab6 	bl	800324c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ce4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ce8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cee:	f107 0314 	add.w	r3, r7, #20
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4809      	ldr	r0, [pc, #36]	; (8001d1c <MX_GPIO_Init+0x104>)
 8001cf6:	f001 faa9 	bl	800324c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	2006      	movs	r0, #6
 8001d00:	f001 fa6d 	bl	80031de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001d04:	2006      	movs	r0, #6
 8001d06:	f001 fa86 	bl	8003216 <HAL_NVIC_EnableIRQ>

}
 8001d0a:	bf00      	nop
 8001d0c:	3728      	adds	r7, #40	; 0x28
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40023800 	.word	0x40023800
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	40020000 	.word	0x40020000

08001d20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d24:	b672      	cpsid	i
}
 8001d26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d28:	e7fe      	b.n	8001d28 <Error_Handler+0x8>
	...

08001d2c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001d32:	f000 fa21 	bl	8002178 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001d36:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	2178      	movs	r1, #120	; 0x78
 8001d3e:	485b      	ldr	r0, [pc, #364]	; (8001eac <SSD1306_Init+0x180>)
 8001d40:	f001 fe94 	bl	8003a6c <HAL_I2C_IsDeviceReady>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	e0a9      	b.n	8001ea2 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8001d4e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001d52:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001d54:	e002      	b.n	8001d5c <SSD1306_Init+0x30>
		p--;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1f9      	bne.n	8001d56 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001d62:	22ae      	movs	r2, #174	; 0xae
 8001d64:	2100      	movs	r1, #0
 8001d66:	2078      	movs	r0, #120	; 0x78
 8001d68:	f000 fa64 	bl	8002234 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001d6c:	2220      	movs	r2, #32
 8001d6e:	2100      	movs	r1, #0
 8001d70:	2078      	movs	r0, #120	; 0x78
 8001d72:	f000 fa5f 	bl	8002234 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001d76:	2210      	movs	r2, #16
 8001d78:	2100      	movs	r1, #0
 8001d7a:	2078      	movs	r0, #120	; 0x78
 8001d7c:	f000 fa5a 	bl	8002234 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001d80:	22b0      	movs	r2, #176	; 0xb0
 8001d82:	2100      	movs	r1, #0
 8001d84:	2078      	movs	r0, #120	; 0x78
 8001d86:	f000 fa55 	bl	8002234 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001d8a:	22c8      	movs	r2, #200	; 0xc8
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	2078      	movs	r0, #120	; 0x78
 8001d90:	f000 fa50 	bl	8002234 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001d94:	2200      	movs	r2, #0
 8001d96:	2100      	movs	r1, #0
 8001d98:	2078      	movs	r0, #120	; 0x78
 8001d9a:	f000 fa4b 	bl	8002234 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001d9e:	2210      	movs	r2, #16
 8001da0:	2100      	movs	r1, #0
 8001da2:	2078      	movs	r0, #120	; 0x78
 8001da4:	f000 fa46 	bl	8002234 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001da8:	2240      	movs	r2, #64	; 0x40
 8001daa:	2100      	movs	r1, #0
 8001dac:	2078      	movs	r0, #120	; 0x78
 8001dae:	f000 fa41 	bl	8002234 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001db2:	2281      	movs	r2, #129	; 0x81
 8001db4:	2100      	movs	r1, #0
 8001db6:	2078      	movs	r0, #120	; 0x78
 8001db8:	f000 fa3c 	bl	8002234 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001dbc:	22ff      	movs	r2, #255	; 0xff
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	2078      	movs	r0, #120	; 0x78
 8001dc2:	f000 fa37 	bl	8002234 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001dc6:	22a1      	movs	r2, #161	; 0xa1
 8001dc8:	2100      	movs	r1, #0
 8001dca:	2078      	movs	r0, #120	; 0x78
 8001dcc:	f000 fa32 	bl	8002234 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001dd0:	22a6      	movs	r2, #166	; 0xa6
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	2078      	movs	r0, #120	; 0x78
 8001dd6:	f000 fa2d 	bl	8002234 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001dda:	22a8      	movs	r2, #168	; 0xa8
 8001ddc:	2100      	movs	r1, #0
 8001dde:	2078      	movs	r0, #120	; 0x78
 8001de0:	f000 fa28 	bl	8002234 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001de4:	223f      	movs	r2, #63	; 0x3f
 8001de6:	2100      	movs	r1, #0
 8001de8:	2078      	movs	r0, #120	; 0x78
 8001dea:	f000 fa23 	bl	8002234 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001dee:	22a4      	movs	r2, #164	; 0xa4
 8001df0:	2100      	movs	r1, #0
 8001df2:	2078      	movs	r0, #120	; 0x78
 8001df4:	f000 fa1e 	bl	8002234 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001df8:	22d3      	movs	r2, #211	; 0xd3
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	2078      	movs	r0, #120	; 0x78
 8001dfe:	f000 fa19 	bl	8002234 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001e02:	2200      	movs	r2, #0
 8001e04:	2100      	movs	r1, #0
 8001e06:	2078      	movs	r0, #120	; 0x78
 8001e08:	f000 fa14 	bl	8002234 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001e0c:	22d5      	movs	r2, #213	; 0xd5
 8001e0e:	2100      	movs	r1, #0
 8001e10:	2078      	movs	r0, #120	; 0x78
 8001e12:	f000 fa0f 	bl	8002234 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001e16:	22f0      	movs	r2, #240	; 0xf0
 8001e18:	2100      	movs	r1, #0
 8001e1a:	2078      	movs	r0, #120	; 0x78
 8001e1c:	f000 fa0a 	bl	8002234 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001e20:	22d9      	movs	r2, #217	; 0xd9
 8001e22:	2100      	movs	r1, #0
 8001e24:	2078      	movs	r0, #120	; 0x78
 8001e26:	f000 fa05 	bl	8002234 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001e2a:	2222      	movs	r2, #34	; 0x22
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	2078      	movs	r0, #120	; 0x78
 8001e30:	f000 fa00 	bl	8002234 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001e34:	22da      	movs	r2, #218	; 0xda
 8001e36:	2100      	movs	r1, #0
 8001e38:	2078      	movs	r0, #120	; 0x78
 8001e3a:	f000 f9fb 	bl	8002234 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001e3e:	2212      	movs	r2, #18
 8001e40:	2100      	movs	r1, #0
 8001e42:	2078      	movs	r0, #120	; 0x78
 8001e44:	f000 f9f6 	bl	8002234 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001e48:	22db      	movs	r2, #219	; 0xdb
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	2078      	movs	r0, #120	; 0x78
 8001e4e:	f000 f9f1 	bl	8002234 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001e52:	2220      	movs	r2, #32
 8001e54:	2100      	movs	r1, #0
 8001e56:	2078      	movs	r0, #120	; 0x78
 8001e58:	f000 f9ec 	bl	8002234 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001e5c:	228d      	movs	r2, #141	; 0x8d
 8001e5e:	2100      	movs	r1, #0
 8001e60:	2078      	movs	r0, #120	; 0x78
 8001e62:	f000 f9e7 	bl	8002234 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001e66:	2214      	movs	r2, #20
 8001e68:	2100      	movs	r1, #0
 8001e6a:	2078      	movs	r0, #120	; 0x78
 8001e6c:	f000 f9e2 	bl	8002234 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001e70:	22af      	movs	r2, #175	; 0xaf
 8001e72:	2100      	movs	r1, #0
 8001e74:	2078      	movs	r0, #120	; 0x78
 8001e76:	f000 f9dd 	bl	8002234 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001e7a:	222e      	movs	r2, #46	; 0x2e
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	2078      	movs	r0, #120	; 0x78
 8001e80:	f000 f9d8 	bl	8002234 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001e84:	2000      	movs	r0, #0
 8001e86:	f000 f843 	bl	8001f10 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8001e8a:	f000 f813 	bl	8001eb4 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8001e8e:	4b08      	ldr	r3, [pc, #32]	; (8001eb0 <SSD1306_Init+0x184>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001e94:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <SSD1306_Init+0x184>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001e9a:	4b05      	ldr	r3, [pc, #20]	; (8001eb0 <SSD1306_Init+0x184>)
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8001ea0:	2301      	movs	r3, #1
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20000574 	.word	0x20000574
 8001eb0:	200004a4 	.word	0x200004a4

08001eb4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8001eba:	2300      	movs	r3, #0
 8001ebc:	71fb      	strb	r3, [r7, #7]
 8001ebe:	e01d      	b.n	8001efc <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001ec0:	79fb      	ldrb	r3, [r7, #7]
 8001ec2:	3b50      	subs	r3, #80	; 0x50
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	2100      	movs	r1, #0
 8001eca:	2078      	movs	r0, #120	; 0x78
 8001ecc:	f000 f9b2 	bl	8002234 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	2078      	movs	r0, #120	; 0x78
 8001ed6:	f000 f9ad 	bl	8002234 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001eda:	2210      	movs	r2, #16
 8001edc:	2100      	movs	r1, #0
 8001ede:	2078      	movs	r0, #120	; 0x78
 8001ee0:	f000 f9a8 	bl	8002234 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001ee4:	79fb      	ldrb	r3, [r7, #7]
 8001ee6:	01db      	lsls	r3, r3, #7
 8001ee8:	4a08      	ldr	r2, [pc, #32]	; (8001f0c <SSD1306_UpdateScreen+0x58>)
 8001eea:	441a      	add	r2, r3
 8001eec:	2380      	movs	r3, #128	; 0x80
 8001eee:	2140      	movs	r1, #64	; 0x40
 8001ef0:	2078      	movs	r0, #120	; 0x78
 8001ef2:	f000 f957 	bl	80021a4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001ef6:	79fb      	ldrb	r3, [r7, #7]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	71fb      	strb	r3, [r7, #7]
 8001efc:	79fb      	ldrb	r3, [r7, #7]
 8001efe:	2b07      	cmp	r3, #7
 8001f00:	d9de      	bls.n	8001ec0 <SSD1306_UpdateScreen+0xc>
	}
}
 8001f02:	bf00      	nop
 8001f04:	bf00      	nop
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	200000a4 	.word	0x200000a4

08001f10 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001f1a:	79fb      	ldrb	r3, [r7, #7]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d101      	bne.n	8001f24 <SSD1306_Fill+0x14>
 8001f20:	2300      	movs	r3, #0
 8001f22:	e000      	b.n	8001f26 <SSD1306_Fill+0x16>
 8001f24:	23ff      	movs	r3, #255	; 0xff
 8001f26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4803      	ldr	r0, [pc, #12]	; (8001f3c <SSD1306_Fill+0x2c>)
 8001f2e:	f004 f98d 	bl	800624c <memset>
}
 8001f32:	bf00      	nop
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	200000a4 	.word	0x200000a4

08001f40 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	80fb      	strh	r3, [r7, #6]
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	80bb      	strh	r3, [r7, #4]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	70fb      	strb	r3, [r7, #3]
	if (
 8001f52:	88fb      	ldrh	r3, [r7, #6]
 8001f54:	2b7f      	cmp	r3, #127	; 0x7f
 8001f56:	d848      	bhi.n	8001fea <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001f58:	88bb      	ldrh	r3, [r7, #4]
 8001f5a:	2b3f      	cmp	r3, #63	; 0x3f
 8001f5c:	d845      	bhi.n	8001fea <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001f5e:	4b26      	ldr	r3, [pc, #152]	; (8001ff8 <SSD1306_DrawPixel+0xb8>)
 8001f60:	791b      	ldrb	r3, [r3, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d006      	beq.n	8001f74 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001f66:	78fb      	ldrb	r3, [r7, #3]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	bf0c      	ite	eq
 8001f6c:	2301      	moveq	r3, #1
 8001f6e:	2300      	movne	r3, #0
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001f74:	78fb      	ldrb	r3, [r7, #3]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d11a      	bne.n	8001fb0 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001f7a:	88fa      	ldrh	r2, [r7, #6]
 8001f7c:	88bb      	ldrh	r3, [r7, #4]
 8001f7e:	08db      	lsrs	r3, r3, #3
 8001f80:	b298      	uxth	r0, r3
 8001f82:	4603      	mov	r3, r0
 8001f84:	01db      	lsls	r3, r3, #7
 8001f86:	4413      	add	r3, r2
 8001f88:	4a1c      	ldr	r2, [pc, #112]	; (8001ffc <SSD1306_DrawPixel+0xbc>)
 8001f8a:	5cd3      	ldrb	r3, [r2, r3]
 8001f8c:	b25a      	sxtb	r2, r3
 8001f8e:	88bb      	ldrh	r3, [r7, #4]
 8001f90:	f003 0307 	and.w	r3, r3, #7
 8001f94:	2101      	movs	r1, #1
 8001f96:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9a:	b25b      	sxtb	r3, r3
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	b259      	sxtb	r1, r3
 8001fa0:	88fa      	ldrh	r2, [r7, #6]
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	01db      	lsls	r3, r3, #7
 8001fa6:	4413      	add	r3, r2
 8001fa8:	b2c9      	uxtb	r1, r1
 8001faa:	4a14      	ldr	r2, [pc, #80]	; (8001ffc <SSD1306_DrawPixel+0xbc>)
 8001fac:	54d1      	strb	r1, [r2, r3]
 8001fae:	e01d      	b.n	8001fec <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001fb0:	88fa      	ldrh	r2, [r7, #6]
 8001fb2:	88bb      	ldrh	r3, [r7, #4]
 8001fb4:	08db      	lsrs	r3, r3, #3
 8001fb6:	b298      	uxth	r0, r3
 8001fb8:	4603      	mov	r3, r0
 8001fba:	01db      	lsls	r3, r3, #7
 8001fbc:	4413      	add	r3, r2
 8001fbe:	4a0f      	ldr	r2, [pc, #60]	; (8001ffc <SSD1306_DrawPixel+0xbc>)
 8001fc0:	5cd3      	ldrb	r3, [r2, r3]
 8001fc2:	b25a      	sxtb	r2, r3
 8001fc4:	88bb      	ldrh	r3, [r7, #4]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	2101      	movs	r1, #1
 8001fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd0:	b25b      	sxtb	r3, r3
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	b25b      	sxtb	r3, r3
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	b259      	sxtb	r1, r3
 8001fda:	88fa      	ldrh	r2, [r7, #6]
 8001fdc:	4603      	mov	r3, r0
 8001fde:	01db      	lsls	r3, r3, #7
 8001fe0:	4413      	add	r3, r2
 8001fe2:	b2c9      	uxtb	r1, r1
 8001fe4:	4a05      	ldr	r2, [pc, #20]	; (8001ffc <SSD1306_DrawPixel+0xbc>)
 8001fe6:	54d1      	strb	r1, [r2, r3]
 8001fe8:	e000      	b.n	8001fec <SSD1306_DrawPixel+0xac>
		return;
 8001fea:	bf00      	nop
	}
}
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	200004a4 	.word	0x200004a4
 8001ffc:	200000a4 	.word	0x200000a4

08002000 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	460a      	mov	r2, r1
 800200a:	80fb      	strh	r3, [r7, #6]
 800200c:	4613      	mov	r3, r2
 800200e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002010:	4a05      	ldr	r2, [pc, #20]	; (8002028 <SSD1306_GotoXY+0x28>)
 8002012:	88fb      	ldrh	r3, [r7, #6]
 8002014:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8002016:	4a04      	ldr	r2, [pc, #16]	; (8002028 <SSD1306_GotoXY+0x28>)
 8002018:	88bb      	ldrh	r3, [r7, #4]
 800201a:	8053      	strh	r3, [r2, #2]
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	200004a4 	.word	0x200004a4

0800202c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	6039      	str	r1, [r7, #0]
 8002036:	71fb      	strb	r3, [r7, #7]
 8002038:	4613      	mov	r3, r2
 800203a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800203c:	4b3a      	ldr	r3, [pc, #232]	; (8002128 <SSD1306_Putc+0xfc>)
 800203e:	881b      	ldrh	r3, [r3, #0]
 8002040:	461a      	mov	r2, r3
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	4413      	add	r3, r2
	if (
 8002048:	2b7f      	cmp	r3, #127	; 0x7f
 800204a:	dc07      	bgt.n	800205c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800204c:	4b36      	ldr	r3, [pc, #216]	; (8002128 <SSD1306_Putc+0xfc>)
 800204e:	885b      	ldrh	r3, [r3, #2]
 8002050:	461a      	mov	r2, r3
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	785b      	ldrb	r3, [r3, #1]
 8002056:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002058:	2b3f      	cmp	r3, #63	; 0x3f
 800205a:	dd01      	ble.n	8002060 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800205c:	2300      	movs	r3, #0
 800205e:	e05e      	b.n	800211e <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]
 8002064:	e04b      	b.n	80020fe <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685a      	ldr	r2, [r3, #4]
 800206a:	79fb      	ldrb	r3, [r7, #7]
 800206c:	3b20      	subs	r3, #32
 800206e:	6839      	ldr	r1, [r7, #0]
 8002070:	7849      	ldrb	r1, [r1, #1]
 8002072:	fb01 f303 	mul.w	r3, r1, r3
 8002076:	4619      	mov	r1, r3
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	440b      	add	r3, r1
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	4413      	add	r3, r2
 8002080:	881b      	ldrh	r3, [r3, #0]
 8002082:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8002084:	2300      	movs	r3, #0
 8002086:	613b      	str	r3, [r7, #16]
 8002088:	e030      	b.n	80020ec <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d010      	beq.n	80020bc <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800209a:	4b23      	ldr	r3, [pc, #140]	; (8002128 <SSD1306_Putc+0xfc>)
 800209c:	881a      	ldrh	r2, [r3, #0]
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	4413      	add	r3, r2
 80020a4:	b298      	uxth	r0, r3
 80020a6:	4b20      	ldr	r3, [pc, #128]	; (8002128 <SSD1306_Putc+0xfc>)
 80020a8:	885a      	ldrh	r2, [r3, #2]
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	4413      	add	r3, r2
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	79ba      	ldrb	r2, [r7, #6]
 80020b4:	4619      	mov	r1, r3
 80020b6:	f7ff ff43 	bl	8001f40 <SSD1306_DrawPixel>
 80020ba:	e014      	b.n	80020e6 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80020bc:	4b1a      	ldr	r3, [pc, #104]	; (8002128 <SSD1306_Putc+0xfc>)
 80020be:	881a      	ldrh	r2, [r3, #0]
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	4413      	add	r3, r2
 80020c6:	b298      	uxth	r0, r3
 80020c8:	4b17      	ldr	r3, [pc, #92]	; (8002128 <SSD1306_Putc+0xfc>)
 80020ca:	885a      	ldrh	r2, [r3, #2]
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	4413      	add	r3, r2
 80020d2:	b299      	uxth	r1, r3
 80020d4:	79bb      	ldrb	r3, [r7, #6]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	bf0c      	ite	eq
 80020da:	2301      	moveq	r3, #1
 80020dc:	2300      	movne	r3, #0
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	461a      	mov	r2, r3
 80020e2:	f7ff ff2d 	bl	8001f40 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	3301      	adds	r3, #1
 80020ea:	613b      	str	r3, [r7, #16]
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	461a      	mov	r2, r3
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d3c8      	bcc.n	800208a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	3301      	adds	r3, #1
 80020fc:	617b      	str	r3, [r7, #20]
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	785b      	ldrb	r3, [r3, #1]
 8002102:	461a      	mov	r2, r3
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	4293      	cmp	r3, r2
 8002108:	d3ad      	bcc.n	8002066 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800210a:	4b07      	ldr	r3, [pc, #28]	; (8002128 <SSD1306_Putc+0xfc>)
 800210c:	881a      	ldrh	r2, [r3, #0]
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	b29b      	uxth	r3, r3
 8002114:	4413      	add	r3, r2
 8002116:	b29a      	uxth	r2, r3
 8002118:	4b03      	ldr	r3, [pc, #12]	; (8002128 <SSD1306_Putc+0xfc>)
 800211a:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 800211c:	79fb      	ldrb	r3, [r7, #7]
}
 800211e:	4618      	mov	r0, r3
 8002120:	3718      	adds	r7, #24
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	200004a4 	.word	0x200004a4

0800212c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	4613      	mov	r3, r2
 8002138:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800213a:	e012      	b.n	8002162 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	79fa      	ldrb	r2, [r7, #7]
 8002142:	68b9      	ldr	r1, [r7, #8]
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff ff71 	bl	800202c <SSD1306_Putc>
 800214a:	4603      	mov	r3, r0
 800214c:	461a      	mov	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	429a      	cmp	r2, r3
 8002154:	d002      	beq.n	800215c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	e008      	b.n	800216e <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	3301      	adds	r3, #1
 8002160:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1e8      	bne.n	800213c <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	781b      	ldrb	r3, [r3, #0]
}
 800216e:	4618      	mov	r0, r3
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
	...

08002178 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800217e:	4b08      	ldr	r3, [pc, #32]	; (80021a0 <ssd1306_I2C_Init+0x28>)
 8002180:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002182:	e002      	b.n	800218a <ssd1306_I2C_Init+0x12>
		p--;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3b01      	subs	r3, #1
 8002188:	607b      	str	r3, [r7, #4]
	while(p>0)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d1f9      	bne.n	8002184 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002190:	bf00      	nop
 8002192:	bf00      	nop
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	0003d090 	.word	0x0003d090

080021a4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80021a4:	b590      	push	{r4, r7, lr}
 80021a6:	b0c7      	sub	sp, #284	; 0x11c
 80021a8:	af02      	add	r7, sp, #8
 80021aa:	4604      	mov	r4, r0
 80021ac:	4608      	mov	r0, r1
 80021ae:	4639      	mov	r1, r7
 80021b0:	600a      	str	r2, [r1, #0]
 80021b2:	4619      	mov	r1, r3
 80021b4:	1dfb      	adds	r3, r7, #7
 80021b6:	4622      	mov	r2, r4
 80021b8:	701a      	strb	r2, [r3, #0]
 80021ba:	1dbb      	adds	r3, r7, #6
 80021bc:	4602      	mov	r2, r0
 80021be:	701a      	strb	r2, [r3, #0]
 80021c0:	1d3b      	adds	r3, r7, #4
 80021c2:	460a      	mov	r2, r1
 80021c4:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80021c6:	f107 030c 	add.w	r3, r7, #12
 80021ca:	1dba      	adds	r2, r7, #6
 80021cc:	7812      	ldrb	r2, [r2, #0]
 80021ce:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80021d0:	2300      	movs	r3, #0
 80021d2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80021d6:	e010      	b.n	80021fa <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 80021d8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80021dc:	463a      	mov	r2, r7
 80021de:	6812      	ldr	r2, [r2, #0]
 80021e0:	441a      	add	r2, r3
 80021e2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80021e6:	3301      	adds	r3, #1
 80021e8:	7811      	ldrb	r1, [r2, #0]
 80021ea:	f107 020c 	add.w	r2, r7, #12
 80021ee:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80021f0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80021f4:	3301      	adds	r3, #1
 80021f6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80021fa:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80021fe:	b29b      	uxth	r3, r3
 8002200:	1d3a      	adds	r2, r7, #4
 8002202:	8812      	ldrh	r2, [r2, #0]
 8002204:	429a      	cmp	r2, r3
 8002206:	d8e7      	bhi.n	80021d8 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8002208:	1dfb      	adds	r3, r7, #7
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	b299      	uxth	r1, r3
 800220e:	1d3b      	adds	r3, r7, #4
 8002210:	881b      	ldrh	r3, [r3, #0]
 8002212:	3301      	adds	r3, #1
 8002214:	b29b      	uxth	r3, r3
 8002216:	f107 020c 	add.w	r2, r7, #12
 800221a:	200a      	movs	r0, #10
 800221c:	9000      	str	r0, [sp, #0]
 800221e:	4804      	ldr	r0, [pc, #16]	; (8002230 <ssd1306_I2C_WriteMulti+0x8c>)
 8002220:	f001 fb26 	bl	8003870 <HAL_I2C_Master_Transmit>
}
 8002224:	bf00      	nop
 8002226:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800222a:	46bd      	mov	sp, r7
 800222c:	bd90      	pop	{r4, r7, pc}
 800222e:	bf00      	nop
 8002230:	20000574 	.word	0x20000574

08002234 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af02      	add	r7, sp, #8
 800223a:	4603      	mov	r3, r0
 800223c:	71fb      	strb	r3, [r7, #7]
 800223e:	460b      	mov	r3, r1
 8002240:	71bb      	strb	r3, [r7, #6]
 8002242:	4613      	mov	r3, r2
 8002244:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8002246:	79bb      	ldrb	r3, [r7, #6]
 8002248:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800224a:	797b      	ldrb	r3, [r7, #5]
 800224c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800224e:	79fb      	ldrb	r3, [r7, #7]
 8002250:	b299      	uxth	r1, r3
 8002252:	f107 020c 	add.w	r2, r7, #12
 8002256:	230a      	movs	r3, #10
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	2302      	movs	r3, #2
 800225c:	4803      	ldr	r0, [pc, #12]	; (800226c <ssd1306_I2C_Write+0x38>)
 800225e:	f001 fb07 	bl	8003870 <HAL_I2C_Master_Transmit>
}
 8002262:	bf00      	nop
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	20000574 	.word	0x20000574

08002270 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	607b      	str	r3, [r7, #4]
 800227a:	4b10      	ldr	r3, [pc, #64]	; (80022bc <HAL_MspInit+0x4c>)
 800227c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227e:	4a0f      	ldr	r2, [pc, #60]	; (80022bc <HAL_MspInit+0x4c>)
 8002280:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002284:	6453      	str	r3, [r2, #68]	; 0x44
 8002286:	4b0d      	ldr	r3, [pc, #52]	; (80022bc <HAL_MspInit+0x4c>)
 8002288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800228e:	607b      	str	r3, [r7, #4]
 8002290:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	603b      	str	r3, [r7, #0]
 8002296:	4b09      	ldr	r3, [pc, #36]	; (80022bc <HAL_MspInit+0x4c>)
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	4a08      	ldr	r2, [pc, #32]	; (80022bc <HAL_MspInit+0x4c>)
 800229c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022a0:	6413      	str	r3, [r2, #64]	; 0x40
 80022a2:	4b06      	ldr	r3, [pc, #24]	; (80022bc <HAL_MspInit+0x4c>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022aa:	603b      	str	r3, [r7, #0]
 80022ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022ae:	bf00      	nop
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	40023800 	.word	0x40023800

080022c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b08c      	sub	sp, #48	; 0x30
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c8:	f107 031c 	add.w	r3, r7, #28
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	605a      	str	r2, [r3, #4]
 80022d2:	609a      	str	r2, [r3, #8]
 80022d4:	60da      	str	r2, [r3, #12]
 80022d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a2e      	ldr	r2, [pc, #184]	; (8002398 <HAL_ADC_MspInit+0xd8>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d128      	bne.n	8002334 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	61bb      	str	r3, [r7, #24]
 80022e6:	4b2d      	ldr	r3, [pc, #180]	; (800239c <HAL_ADC_MspInit+0xdc>)
 80022e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ea:	4a2c      	ldr	r2, [pc, #176]	; (800239c <HAL_ADC_MspInit+0xdc>)
 80022ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022f0:	6453      	str	r3, [r2, #68]	; 0x44
 80022f2:	4b2a      	ldr	r3, [pc, #168]	; (800239c <HAL_ADC_MspInit+0xdc>)
 80022f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022fa:	61bb      	str	r3, [r7, #24]
 80022fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022fe:	2300      	movs	r3, #0
 8002300:	617b      	str	r3, [r7, #20]
 8002302:	4b26      	ldr	r3, [pc, #152]	; (800239c <HAL_ADC_MspInit+0xdc>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	4a25      	ldr	r2, [pc, #148]	; (800239c <HAL_ADC_MspInit+0xdc>)
 8002308:	f043 0304 	orr.w	r3, r3, #4
 800230c:	6313      	str	r3, [r2, #48]	; 0x30
 800230e:	4b23      	ldr	r3, [pc, #140]	; (800239c <HAL_ADC_MspInit+0xdc>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	f003 0304 	and.w	r3, r3, #4
 8002316:	617b      	str	r3, [r7, #20]
 8002318:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800231a:	2301      	movs	r3, #1
 800231c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800231e:	2303      	movs	r3, #3
 8002320:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002322:	2300      	movs	r3, #0
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002326:	f107 031c 	add.w	r3, r7, #28
 800232a:	4619      	mov	r1, r3
 800232c:	481c      	ldr	r0, [pc, #112]	; (80023a0 <HAL_ADC_MspInit+0xe0>)
 800232e:	f000 ff8d 	bl	800324c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002332:	e02c      	b.n	800238e <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a1a      	ldr	r2, [pc, #104]	; (80023a4 <HAL_ADC_MspInit+0xe4>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d127      	bne.n	800238e <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	613b      	str	r3, [r7, #16]
 8002342:	4b16      	ldr	r3, [pc, #88]	; (800239c <HAL_ADC_MspInit+0xdc>)
 8002344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002346:	4a15      	ldr	r2, [pc, #84]	; (800239c <HAL_ADC_MspInit+0xdc>)
 8002348:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800234c:	6453      	str	r3, [r2, #68]	; 0x44
 800234e:	4b13      	ldr	r3, [pc, #76]	; (800239c <HAL_ADC_MspInit+0xdc>)
 8002350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002352:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002356:	613b      	str	r3, [r7, #16]
 8002358:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	4b0f      	ldr	r3, [pc, #60]	; (800239c <HAL_ADC_MspInit+0xdc>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	4a0e      	ldr	r2, [pc, #56]	; (800239c <HAL_ADC_MspInit+0xdc>)
 8002364:	f043 0304 	orr.w	r3, r3, #4
 8002368:	6313      	str	r3, [r2, #48]	; 0x30
 800236a:	4b0c      	ldr	r3, [pc, #48]	; (800239c <HAL_ADC_MspInit+0xdc>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236e:	f003 0304 	and.w	r3, r3, #4
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002376:	2302      	movs	r3, #2
 8002378:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800237a:	2303      	movs	r3, #3
 800237c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237e:	2300      	movs	r3, #0
 8002380:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002382:	f107 031c 	add.w	r3, r7, #28
 8002386:	4619      	mov	r1, r3
 8002388:	4805      	ldr	r0, [pc, #20]	; (80023a0 <HAL_ADC_MspInit+0xe0>)
 800238a:	f000 ff5f 	bl	800324c <HAL_GPIO_Init>
}
 800238e:	bf00      	nop
 8002390:	3730      	adds	r7, #48	; 0x30
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	40012000 	.word	0x40012000
 800239c:	40023800 	.word	0x40023800
 80023a0:	40020800 	.word	0x40020800
 80023a4:	40012100 	.word	0x40012100

080023a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b08a      	sub	sp, #40	; 0x28
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b0:	f107 0314 	add.w	r3, r7, #20
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	605a      	str	r2, [r3, #4]
 80023ba:	609a      	str	r2, [r3, #8]
 80023bc:	60da      	str	r2, [r3, #12]
 80023be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a19      	ldr	r2, [pc, #100]	; (800242c <HAL_I2C_MspInit+0x84>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d12b      	bne.n	8002422 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ca:	2300      	movs	r3, #0
 80023cc:	613b      	str	r3, [r7, #16]
 80023ce:	4b18      	ldr	r3, [pc, #96]	; (8002430 <HAL_I2C_MspInit+0x88>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	4a17      	ldr	r2, [pc, #92]	; (8002430 <HAL_I2C_MspInit+0x88>)
 80023d4:	f043 0302 	orr.w	r3, r3, #2
 80023d8:	6313      	str	r3, [r2, #48]	; 0x30
 80023da:	4b15      	ldr	r3, [pc, #84]	; (8002430 <HAL_I2C_MspInit+0x88>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	613b      	str	r3, [r7, #16]
 80023e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023e6:	23c0      	movs	r3, #192	; 0xc0
 80023e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023ea:	2312      	movs	r3, #18
 80023ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ee:	2300      	movs	r3, #0
 80023f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023f2:	2303      	movs	r3, #3
 80023f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023f6:	2304      	movs	r3, #4
 80023f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023fa:	f107 0314 	add.w	r3, r7, #20
 80023fe:	4619      	mov	r1, r3
 8002400:	480c      	ldr	r0, [pc, #48]	; (8002434 <HAL_I2C_MspInit+0x8c>)
 8002402:	f000 ff23 	bl	800324c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002406:	2300      	movs	r3, #0
 8002408:	60fb      	str	r3, [r7, #12]
 800240a:	4b09      	ldr	r3, [pc, #36]	; (8002430 <HAL_I2C_MspInit+0x88>)
 800240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240e:	4a08      	ldr	r2, [pc, #32]	; (8002430 <HAL_I2C_MspInit+0x88>)
 8002410:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002414:	6413      	str	r3, [r2, #64]	; 0x40
 8002416:	4b06      	ldr	r3, [pc, #24]	; (8002430 <HAL_I2C_MspInit+0x88>)
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002422:	bf00      	nop
 8002424:	3728      	adds	r7, #40	; 0x28
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40005400 	.word	0x40005400
 8002430:	40023800 	.word	0x40023800
 8002434:	40020400 	.word	0x40020400

08002438 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b08a      	sub	sp, #40	; 0x28
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002440:	f107 0314 	add.w	r3, r7, #20
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	605a      	str	r2, [r3, #4]
 800244a:	609a      	str	r2, [r3, #8]
 800244c:	60da      	str	r2, [r3, #12]
 800244e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a19      	ldr	r2, [pc, #100]	; (80024bc <HAL_SPI_MspInit+0x84>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d12b      	bne.n	80024b2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800245a:	2300      	movs	r3, #0
 800245c:	613b      	str	r3, [r7, #16]
 800245e:	4b18      	ldr	r3, [pc, #96]	; (80024c0 <HAL_SPI_MspInit+0x88>)
 8002460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002462:	4a17      	ldr	r2, [pc, #92]	; (80024c0 <HAL_SPI_MspInit+0x88>)
 8002464:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002468:	6453      	str	r3, [r2, #68]	; 0x44
 800246a:	4b15      	ldr	r3, [pc, #84]	; (80024c0 <HAL_SPI_MspInit+0x88>)
 800246c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002472:	613b      	str	r3, [r7, #16]
 8002474:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	4b11      	ldr	r3, [pc, #68]	; (80024c0 <HAL_SPI_MspInit+0x88>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	4a10      	ldr	r2, [pc, #64]	; (80024c0 <HAL_SPI_MspInit+0x88>)
 8002480:	f043 0301 	orr.w	r3, r3, #1
 8002484:	6313      	str	r3, [r2, #48]	; 0x30
 8002486:	4b0e      	ldr	r3, [pc, #56]	; (80024c0 <HAL_SPI_MspInit+0x88>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002492:	23e0      	movs	r3, #224	; 0xe0
 8002494:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002496:	2302      	movs	r3, #2
 8002498:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249a:	2300      	movs	r3, #0
 800249c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800249e:	2303      	movs	r3, #3
 80024a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024a2:	2305      	movs	r3, #5
 80024a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a6:	f107 0314 	add.w	r3, r7, #20
 80024aa:	4619      	mov	r1, r3
 80024ac:	4805      	ldr	r0, [pc, #20]	; (80024c4 <HAL_SPI_MspInit+0x8c>)
 80024ae:	f000 fecd 	bl	800324c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80024b2:	bf00      	nop
 80024b4:	3728      	adds	r7, #40	; 0x28
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40013000 	.word	0x40013000
 80024c0:	40023800 	.word	0x40023800
 80024c4:	40020000 	.word	0x40020000

080024c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a15      	ldr	r2, [pc, #84]	; (800252c <HAL_TIM_Base_MspInit+0x64>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d10e      	bne.n	80024f8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	4b14      	ldr	r3, [pc, #80]	; (8002530 <HAL_TIM_Base_MspInit+0x68>)
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	4a13      	ldr	r2, [pc, #76]	; (8002530 <HAL_TIM_Base_MspInit+0x68>)
 80024e4:	f043 0302 	orr.w	r3, r3, #2
 80024e8:	6413      	str	r3, [r2, #64]	; 0x40
 80024ea:	4b11      	ldr	r3, [pc, #68]	; (8002530 <HAL_TIM_Base_MspInit+0x68>)
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80024f6:	e012      	b.n	800251e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM4)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a0d      	ldr	r2, [pc, #52]	; (8002534 <HAL_TIM_Base_MspInit+0x6c>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d10d      	bne.n	800251e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	60bb      	str	r3, [r7, #8]
 8002506:	4b0a      	ldr	r3, [pc, #40]	; (8002530 <HAL_TIM_Base_MspInit+0x68>)
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	4a09      	ldr	r2, [pc, #36]	; (8002530 <HAL_TIM_Base_MspInit+0x68>)
 800250c:	f043 0304 	orr.w	r3, r3, #4
 8002510:	6413      	str	r3, [r2, #64]	; 0x40
 8002512:	4b07      	ldr	r3, [pc, #28]	; (8002530 <HAL_TIM_Base_MspInit+0x68>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	f003 0304 	and.w	r3, r3, #4
 800251a:	60bb      	str	r3, [r7, #8]
 800251c:	68bb      	ldr	r3, [r7, #8]
}
 800251e:	bf00      	nop
 8002520:	3714      	adds	r7, #20
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	40000400 	.word	0x40000400
 8002530:	40023800 	.word	0x40023800
 8002534:	40000800 	.word	0x40000800

08002538 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b08a      	sub	sp, #40	; 0x28
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002540:	f107 0314 	add.w	r3, r7, #20
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	605a      	str	r2, [r3, #4]
 800254a:	609a      	str	r2, [r3, #8]
 800254c:	60da      	str	r2, [r3, #12]
 800254e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a24      	ldr	r2, [pc, #144]	; (80025e8 <HAL_TIM_MspPostInit+0xb0>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d11e      	bne.n	8002598 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800255a:	2300      	movs	r3, #0
 800255c:	613b      	str	r3, [r7, #16]
 800255e:	4b23      	ldr	r3, [pc, #140]	; (80025ec <HAL_TIM_MspPostInit+0xb4>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002562:	4a22      	ldr	r2, [pc, #136]	; (80025ec <HAL_TIM_MspPostInit+0xb4>)
 8002564:	f043 0304 	orr.w	r3, r3, #4
 8002568:	6313      	str	r3, [r2, #48]	; 0x30
 800256a:	4b20      	ldr	r3, [pc, #128]	; (80025ec <HAL_TIM_MspPostInit+0xb4>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	f003 0304 	and.w	r3, r3, #4
 8002572:	613b      	str	r3, [r7, #16]
 8002574:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002576:	23c0      	movs	r3, #192	; 0xc0
 8002578:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257a:	2302      	movs	r3, #2
 800257c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257e:	2300      	movs	r3, #0
 8002580:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002582:	2300      	movs	r3, #0
 8002584:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002586:	2302      	movs	r3, #2
 8002588:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800258a:	f107 0314 	add.w	r3, r7, #20
 800258e:	4619      	mov	r1, r3
 8002590:	4817      	ldr	r0, [pc, #92]	; (80025f0 <HAL_TIM_MspPostInit+0xb8>)
 8002592:	f000 fe5b 	bl	800324c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002596:	e023      	b.n	80025e0 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a15      	ldr	r2, [pc, #84]	; (80025f4 <HAL_TIM_MspPostInit+0xbc>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d11e      	bne.n	80025e0 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	4b11      	ldr	r3, [pc, #68]	; (80025ec <HAL_TIM_MspPostInit+0xb4>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	4a10      	ldr	r2, [pc, #64]	; (80025ec <HAL_TIM_MspPostInit+0xb4>)
 80025ac:	f043 0308 	orr.w	r3, r3, #8
 80025b0:	6313      	str	r3, [r2, #48]	; 0x30
 80025b2:	4b0e      	ldr	r3, [pc, #56]	; (80025ec <HAL_TIM_MspPostInit+0xb4>)
 80025b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b6:	f003 0308 	and.w	r3, r3, #8
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80025be:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80025c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c4:	2302      	movs	r3, #2
 80025c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c8:	2300      	movs	r3, #0
 80025ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025cc:	2300      	movs	r3, #0
 80025ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80025d0:	2302      	movs	r3, #2
 80025d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025d4:	f107 0314 	add.w	r3, r7, #20
 80025d8:	4619      	mov	r1, r3
 80025da:	4807      	ldr	r0, [pc, #28]	; (80025f8 <HAL_TIM_MspPostInit+0xc0>)
 80025dc:	f000 fe36 	bl	800324c <HAL_GPIO_Init>
}
 80025e0:	bf00      	nop
 80025e2:	3728      	adds	r7, #40	; 0x28
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40000400 	.word	0x40000400
 80025ec:	40023800 	.word	0x40023800
 80025f0:	40020800 	.word	0x40020800
 80025f4:	40000800 	.word	0x40000800
 80025f8:	40020c00 	.word	0x40020c00

080025fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002600:	e7fe      	b.n	8002600 <NMI_Handler+0x4>

08002602 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002602:	b480      	push	{r7}
 8002604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002606:	e7fe      	b.n	8002606 <HardFault_Handler+0x4>

08002608 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800260c:	e7fe      	b.n	800260c <MemManage_Handler+0x4>

0800260e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800260e:	b480      	push	{r7}
 8002610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002612:	e7fe      	b.n	8002612 <BusFault_Handler+0x4>

08002614 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002618:	e7fe      	b.n	8002618 <UsageFault_Handler+0x4>

0800261a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800261a:	b480      	push	{r7}
 800261c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800261e:	bf00      	nop
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800262c:	bf00      	nop
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr

08002636 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002636:	b480      	push	{r7}
 8002638:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800263a:	bf00      	nop
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002648:	f000 f8ce 	bl	80027e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800264c:	bf00      	nop
 800264e:	bd80      	pop	{r7, pc}

08002650 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002654:	2001      	movs	r0, #1
 8002656:	f000 ffaf 	bl	80035b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800265a:	bf00      	nop
 800265c:	bd80      	pop	{r7, pc}
	...

08002660 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002668:	4a14      	ldr	r2, [pc, #80]	; (80026bc <_sbrk+0x5c>)
 800266a:	4b15      	ldr	r3, [pc, #84]	; (80026c0 <_sbrk+0x60>)
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002674:	4b13      	ldr	r3, [pc, #76]	; (80026c4 <_sbrk+0x64>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d102      	bne.n	8002682 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800267c:	4b11      	ldr	r3, [pc, #68]	; (80026c4 <_sbrk+0x64>)
 800267e:	4a12      	ldr	r2, [pc, #72]	; (80026c8 <_sbrk+0x68>)
 8002680:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002682:	4b10      	ldr	r3, [pc, #64]	; (80026c4 <_sbrk+0x64>)
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4413      	add	r3, r2
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	429a      	cmp	r2, r3
 800268e:	d207      	bcs.n	80026a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002690:	f003 fdb2 	bl	80061f8 <__errno>
 8002694:	4603      	mov	r3, r0
 8002696:	220c      	movs	r2, #12
 8002698:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800269a:	f04f 33ff 	mov.w	r3, #4294967295
 800269e:	e009      	b.n	80026b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026a0:	4b08      	ldr	r3, [pc, #32]	; (80026c4 <_sbrk+0x64>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026a6:	4b07      	ldr	r3, [pc, #28]	; (80026c4 <_sbrk+0x64>)
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4413      	add	r3, r2
 80026ae:	4a05      	ldr	r2, [pc, #20]	; (80026c4 <_sbrk+0x64>)
 80026b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026b2:	68fb      	ldr	r3, [r7, #12]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3718      	adds	r7, #24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	20020000 	.word	0x20020000
 80026c0:	00000400 	.word	0x00000400
 80026c4:	200004ac 	.word	0x200004ac
 80026c8:	20000700 	.word	0x20000700

080026cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026d0:	4b06      	ldr	r3, [pc, #24]	; (80026ec <SystemInit+0x20>)
 80026d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d6:	4a05      	ldr	r2, [pc, #20]	; (80026ec <SystemInit+0x20>)
 80026d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026e0:	bf00      	nop
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	e000ed00 	.word	0xe000ed00

080026f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80026f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002728 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026f4:	480d      	ldr	r0, [pc, #52]	; (800272c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80026f6:	490e      	ldr	r1, [pc, #56]	; (8002730 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80026f8:	4a0e      	ldr	r2, [pc, #56]	; (8002734 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026fc:	e002      	b.n	8002704 <LoopCopyDataInit>

080026fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002700:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002702:	3304      	adds	r3, #4

08002704 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002704:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002706:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002708:	d3f9      	bcc.n	80026fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800270a:	4a0b      	ldr	r2, [pc, #44]	; (8002738 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800270c:	4c0b      	ldr	r4, [pc, #44]	; (800273c <LoopFillZerobss+0x26>)
  movs r3, #0
 800270e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002710:	e001      	b.n	8002716 <LoopFillZerobss>

08002712 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002712:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002714:	3204      	adds	r2, #4

08002716 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002716:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002718:	d3fb      	bcc.n	8002712 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800271a:	f7ff ffd7 	bl	80026cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800271e:	f003 fd71 	bl	8006204 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002722:	f7fe fc85 	bl	8001030 <main>
  bx  lr    
 8002726:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002728:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800272c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002730:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002734:	08008648 	.word	0x08008648
  ldr r2, =_sbss
 8002738:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800273c:	20000700 	.word	0x20000700

08002740 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002740:	e7fe      	b.n	8002740 <ADC_IRQHandler>
	...

08002744 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002748:	4b0e      	ldr	r3, [pc, #56]	; (8002784 <HAL_Init+0x40>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a0d      	ldr	r2, [pc, #52]	; (8002784 <HAL_Init+0x40>)
 800274e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002752:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002754:	4b0b      	ldr	r3, [pc, #44]	; (8002784 <HAL_Init+0x40>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a0a      	ldr	r2, [pc, #40]	; (8002784 <HAL_Init+0x40>)
 800275a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800275e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002760:	4b08      	ldr	r3, [pc, #32]	; (8002784 <HAL_Init+0x40>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a07      	ldr	r2, [pc, #28]	; (8002784 <HAL_Init+0x40>)
 8002766:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800276a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800276c:	2003      	movs	r0, #3
 800276e:	f000 fd2b 	bl	80031c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002772:	200f      	movs	r0, #15
 8002774:	f000 f808 	bl	8002788 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002778:	f7ff fd7a 	bl	8002270 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	40023c00 	.word	0x40023c00

08002788 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002790:	4b12      	ldr	r3, [pc, #72]	; (80027dc <HAL_InitTick+0x54>)
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	4b12      	ldr	r3, [pc, #72]	; (80027e0 <HAL_InitTick+0x58>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	4619      	mov	r1, r3
 800279a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800279e:	fbb3 f3f1 	udiv	r3, r3, r1
 80027a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a6:	4618      	mov	r0, r3
 80027a8:	f000 fd43 	bl	8003232 <HAL_SYSTICK_Config>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e00e      	b.n	80027d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2b0f      	cmp	r3, #15
 80027ba:	d80a      	bhi.n	80027d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027bc:	2200      	movs	r2, #0
 80027be:	6879      	ldr	r1, [r7, #4]
 80027c0:	f04f 30ff 	mov.w	r0, #4294967295
 80027c4:	f000 fd0b 	bl	80031de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027c8:	4a06      	ldr	r2, [pc, #24]	; (80027e4 <HAL_InitTick+0x5c>)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
 80027d0:	e000      	b.n	80027d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3708      	adds	r7, #8
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	20000014 	.word	0x20000014
 80027e0:	2000001c 	.word	0x2000001c
 80027e4:	20000018 	.word	0x20000018

080027e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027ec:	4b06      	ldr	r3, [pc, #24]	; (8002808 <HAL_IncTick+0x20>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	461a      	mov	r2, r3
 80027f2:	4b06      	ldr	r3, [pc, #24]	; (800280c <HAL_IncTick+0x24>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4413      	add	r3, r2
 80027f8:	4a04      	ldr	r2, [pc, #16]	; (800280c <HAL_IncTick+0x24>)
 80027fa:	6013      	str	r3, [r2, #0]
}
 80027fc:	bf00      	nop
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	2000001c 	.word	0x2000001c
 800280c:	200006ec 	.word	0x200006ec

08002810 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  return uwTick;
 8002814:	4b03      	ldr	r3, [pc, #12]	; (8002824 <HAL_GetTick+0x14>)
 8002816:	681b      	ldr	r3, [r3, #0]
}
 8002818:	4618      	mov	r0, r3
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	200006ec 	.word	0x200006ec

08002828 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002830:	2300      	movs	r3, #0
 8002832:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e033      	b.n	80028a6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	2b00      	cmp	r3, #0
 8002844:	d109      	bne.n	800285a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f7ff fd3a 	bl	80022c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	f003 0310 	and.w	r3, r3, #16
 8002862:	2b00      	cmp	r3, #0
 8002864:	d118      	bne.n	8002898 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800286e:	f023 0302 	bic.w	r3, r3, #2
 8002872:	f043 0202 	orr.w	r2, r3, #2
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 fad8 	bl	8002e30 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	f023 0303 	bic.w	r3, r3, #3
 800288e:	f043 0201 	orr.w	r2, r3, #1
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	641a      	str	r2, [r3, #64]	; 0x40
 8002896:	e001      	b.n	800289c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80028a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
	...

080028b0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80028b8:	2300      	movs	r3, #0
 80028ba:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d101      	bne.n	80028ca <HAL_ADC_Start+0x1a>
 80028c6:	2302      	movs	r3, #2
 80028c8:	e0b2      	b.n	8002a30 <HAL_ADC_Start+0x180>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f003 0301 	and.w	r3, r3, #1
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d018      	beq.n	8002912 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689a      	ldr	r2, [r3, #8]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f042 0201 	orr.w	r2, r2, #1
 80028ee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80028f0:	4b52      	ldr	r3, [pc, #328]	; (8002a3c <HAL_ADC_Start+0x18c>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a52      	ldr	r2, [pc, #328]	; (8002a40 <HAL_ADC_Start+0x190>)
 80028f6:	fba2 2303 	umull	r2, r3, r2, r3
 80028fa:	0c9a      	lsrs	r2, r3, #18
 80028fc:	4613      	mov	r3, r2
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	4413      	add	r3, r2
 8002902:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002904:	e002      	b.n	800290c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	3b01      	subs	r3, #1
 800290a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1f9      	bne.n	8002906 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f003 0301 	and.w	r3, r3, #1
 800291c:	2b01      	cmp	r3, #1
 800291e:	d17a      	bne.n	8002a16 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002924:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002928:	f023 0301 	bic.w	r3, r3, #1
 800292c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800293e:	2b00      	cmp	r3, #0
 8002940:	d007      	beq.n	8002952 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800294a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800295a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800295e:	d106      	bne.n	800296e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002964:	f023 0206 	bic.w	r2, r3, #6
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	645a      	str	r2, [r3, #68]	; 0x44
 800296c:	e002      	b.n	8002974 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800297c:	4b31      	ldr	r3, [pc, #196]	; (8002a44 <HAL_ADC_Start+0x194>)
 800297e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002988:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f003 031f 	and.w	r3, r3, #31
 8002992:	2b00      	cmp	r3, #0
 8002994:	d12a      	bne.n	80029ec <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a2b      	ldr	r2, [pc, #172]	; (8002a48 <HAL_ADC_Start+0x198>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d015      	beq.n	80029cc <HAL_ADC_Start+0x11c>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a29      	ldr	r2, [pc, #164]	; (8002a4c <HAL_ADC_Start+0x19c>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d105      	bne.n	80029b6 <HAL_ADC_Start+0x106>
 80029aa:	4b26      	ldr	r3, [pc, #152]	; (8002a44 <HAL_ADC_Start+0x194>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f003 031f 	and.w	r3, r3, #31
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00a      	beq.n	80029cc <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a25      	ldr	r2, [pc, #148]	; (8002a50 <HAL_ADC_Start+0x1a0>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d136      	bne.n	8002a2e <HAL_ADC_Start+0x17e>
 80029c0:	4b20      	ldr	r3, [pc, #128]	; (8002a44 <HAL_ADC_Start+0x194>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f003 0310 	and.w	r3, r3, #16
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d130      	bne.n	8002a2e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d129      	bne.n	8002a2e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029e8:	609a      	str	r2, [r3, #8]
 80029ea:	e020      	b.n	8002a2e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a15      	ldr	r2, [pc, #84]	; (8002a48 <HAL_ADC_Start+0x198>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d11b      	bne.n	8002a2e <HAL_ADC_Start+0x17e>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d114      	bne.n	8002a2e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689a      	ldr	r2, [r3, #8]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a12:	609a      	str	r2, [r3, #8]
 8002a14:	e00b      	b.n	8002a2e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	f043 0210 	orr.w	r2, r3, #16
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a26:	f043 0201 	orr.w	r2, r3, #1
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3714      	adds	r7, #20
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	20000014 	.word	0x20000014
 8002a40:	431bde83 	.word	0x431bde83
 8002a44:	40012300 	.word	0x40012300
 8002a48:	40012000 	.word	0x40012000
 8002a4c:	40012100 	.word	0x40012100
 8002a50:	40012200 	.word	0x40012200

08002a54 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d101      	bne.n	8002a6a <HAL_ADC_Stop+0x16>
 8002a66:	2302      	movs	r3, #2
 8002a68:	e021      	b.n	8002aae <HAL_ADC_Stop+0x5a>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 0201 	bic.w	r2, r2, #1
 8002a80:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d109      	bne.n	8002aa4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a94:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a98:	f023 0301 	bic.w	r3, r3, #1
 8002a9c:	f043 0201 	orr.w	r2, r3, #1
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr

08002aba <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b084      	sub	sp, #16
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
 8002ac2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ad2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ad6:	d113      	bne.n	8002b00 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002ae2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ae6:	d10b      	bne.n	8002b00 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aec:	f043 0220 	orr.w	r2, r3, #32
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e063      	b.n	8002bc8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002b00:	f7ff fe86 	bl	8002810 <HAL_GetTick>
 8002b04:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002b06:	e021      	b.n	8002b4c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b0e:	d01d      	beq.n	8002b4c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d007      	beq.n	8002b26 <HAL_ADC_PollForConversion+0x6c>
 8002b16:	f7ff fe7b 	bl	8002810 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d212      	bcs.n	8002b4c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d00b      	beq.n	8002b4c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b38:	f043 0204 	orr.w	r2, r3, #4
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e03d      	b.n	8002bc8 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d1d6      	bne.n	8002b08 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f06f 0212 	mvn.w	r2, #18
 8002b62:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b68:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d123      	bne.n	8002bc6 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d11f      	bne.n	8002bc6 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d006      	beq.n	8002ba2 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d111      	bne.n	8002bc6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d105      	bne.n	8002bc6 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	f043 0201 	orr.w	r2, r3, #1
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3710      	adds	r7, #16
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
	...

08002bec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d101      	bne.n	8002c08 <HAL_ADC_ConfigChannel+0x1c>
 8002c04:	2302      	movs	r3, #2
 8002c06:	e105      	b.n	8002e14 <HAL_ADC_ConfigChannel+0x228>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2b09      	cmp	r3, #9
 8002c16:	d925      	bls.n	8002c64 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68d9      	ldr	r1, [r3, #12]
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	461a      	mov	r2, r3
 8002c26:	4613      	mov	r3, r2
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	4413      	add	r3, r2
 8002c2c:	3b1e      	subs	r3, #30
 8002c2e:	2207      	movs	r2, #7
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	43da      	mvns	r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	400a      	ands	r2, r1
 8002c3c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68d9      	ldr	r1, [r3, #12]
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	689a      	ldr	r2, [r3, #8]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	4618      	mov	r0, r3
 8002c50:	4603      	mov	r3, r0
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	4403      	add	r3, r0
 8002c56:	3b1e      	subs	r3, #30
 8002c58:	409a      	lsls	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	60da      	str	r2, [r3, #12]
 8002c62:	e022      	b.n	8002caa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6919      	ldr	r1, [r3, #16]
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	461a      	mov	r2, r3
 8002c72:	4613      	mov	r3, r2
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	4413      	add	r3, r2
 8002c78:	2207      	movs	r2, #7
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	43da      	mvns	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	400a      	ands	r2, r1
 8002c86:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	6919      	ldr	r1, [r3, #16]
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	689a      	ldr	r2, [r3, #8]
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	4618      	mov	r0, r3
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	4403      	add	r3, r0
 8002ca0:	409a      	lsls	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	2b06      	cmp	r3, #6
 8002cb0:	d824      	bhi.n	8002cfc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	4413      	add	r3, r2
 8002cc2:	3b05      	subs	r3, #5
 8002cc4:	221f      	movs	r2, #31
 8002cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cca:	43da      	mvns	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	400a      	ands	r2, r1
 8002cd2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685a      	ldr	r2, [r3, #4]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4413      	add	r3, r2
 8002cec:	3b05      	subs	r3, #5
 8002cee:	fa00 f203 	lsl.w	r2, r0, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	635a      	str	r2, [r3, #52]	; 0x34
 8002cfa:	e04c      	b.n	8002d96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	2b0c      	cmp	r3, #12
 8002d02:	d824      	bhi.n	8002d4e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	3b23      	subs	r3, #35	; 0x23
 8002d16:	221f      	movs	r2, #31
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	43da      	mvns	r2, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	400a      	ands	r2, r1
 8002d24:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	4618      	mov	r0, r3
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685a      	ldr	r2, [r3, #4]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	4413      	add	r3, r2
 8002d3e:	3b23      	subs	r3, #35	; 0x23
 8002d40:	fa00 f203 	lsl.w	r2, r0, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	631a      	str	r2, [r3, #48]	; 0x30
 8002d4c:	e023      	b.n	8002d96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685a      	ldr	r2, [r3, #4]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4413      	add	r3, r2
 8002d5e:	3b41      	subs	r3, #65	; 0x41
 8002d60:	221f      	movs	r2, #31
 8002d62:	fa02 f303 	lsl.w	r3, r2, r3
 8002d66:	43da      	mvns	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	400a      	ands	r2, r1
 8002d6e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	4613      	mov	r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	4413      	add	r3, r2
 8002d88:	3b41      	subs	r3, #65	; 0x41
 8002d8a:	fa00 f203 	lsl.w	r2, r0, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	430a      	orrs	r2, r1
 8002d94:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d96:	4b22      	ldr	r3, [pc, #136]	; (8002e20 <HAL_ADC_ConfigChannel+0x234>)
 8002d98:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a21      	ldr	r2, [pc, #132]	; (8002e24 <HAL_ADC_ConfigChannel+0x238>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d109      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x1cc>
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2b12      	cmp	r3, #18
 8002daa:	d105      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a19      	ldr	r2, [pc, #100]	; (8002e24 <HAL_ADC_ConfigChannel+0x238>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d123      	bne.n	8002e0a <HAL_ADC_ConfigChannel+0x21e>
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2b10      	cmp	r3, #16
 8002dc8:	d003      	beq.n	8002dd2 <HAL_ADC_ConfigChannel+0x1e6>
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2b11      	cmp	r3, #17
 8002dd0:	d11b      	bne.n	8002e0a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2b10      	cmp	r3, #16
 8002de4:	d111      	bne.n	8002e0a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002de6:	4b10      	ldr	r3, [pc, #64]	; (8002e28 <HAL_ADC_ConfigChannel+0x23c>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a10      	ldr	r2, [pc, #64]	; (8002e2c <HAL_ADC_ConfigChannel+0x240>)
 8002dec:	fba2 2303 	umull	r2, r3, r2, r3
 8002df0:	0c9a      	lsrs	r2, r3, #18
 8002df2:	4613      	mov	r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	4413      	add	r3, r2
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002dfc:	e002      	b.n	8002e04 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	3b01      	subs	r3, #1
 8002e02:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1f9      	bne.n	8002dfe <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3714      	adds	r7, #20
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	40012300 	.word	0x40012300
 8002e24:	40012000 	.word	0x40012000
 8002e28:	20000014 	.word	0x20000014
 8002e2c:	431bde83 	.word	0x431bde83

08002e30 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e38:	4b79      	ldr	r3, [pc, #484]	; (8003020 <ADC_Init+0x1f0>)
 8002e3a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	685a      	ldr	r2, [r3, #4]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	431a      	orrs	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	685a      	ldr	r2, [r3, #4]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	6859      	ldr	r1, [r3, #4]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	021a      	lsls	r2, r3, #8
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	430a      	orrs	r2, r1
 8002e78:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002e88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6859      	ldr	r1, [r3, #4]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	689a      	ldr	r2, [r3, #8]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002eaa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	6899      	ldr	r1, [r3, #8]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68da      	ldr	r2, [r3, #12]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec2:	4a58      	ldr	r2, [pc, #352]	; (8003024 <ADC_Init+0x1f4>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d022      	beq.n	8002f0e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689a      	ldr	r2, [r3, #8]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ed6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6899      	ldr	r1, [r3, #8]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ef8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6899      	ldr	r1, [r3, #8]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	609a      	str	r2, [r3, #8]
 8002f0c:	e00f      	b.n	8002f2e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	689a      	ldr	r2, [r3, #8]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f2c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 0202 	bic.w	r2, r2, #2
 8002f3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	6899      	ldr	r1, [r3, #8]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	7e1b      	ldrb	r3, [r3, #24]
 8002f48:	005a      	lsls	r2, r3, #1
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d01b      	beq.n	8002f94 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	685a      	ldr	r2, [r3, #4]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f6a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685a      	ldr	r2, [r3, #4]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002f7a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6859      	ldr	r1, [r3, #4]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f86:	3b01      	subs	r3, #1
 8002f88:	035a      	lsls	r2, r3, #13
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	605a      	str	r2, [r3, #4]
 8002f92:	e007      	b.n	8002fa4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	685a      	ldr	r2, [r3, #4]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fa2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002fb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	051a      	lsls	r2, r3, #20
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002fd8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6899      	ldr	r1, [r3, #8]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002fe6:	025a      	lsls	r2, r3, #9
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	430a      	orrs	r2, r1
 8002fee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689a      	ldr	r2, [r3, #8]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ffe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	6899      	ldr	r1, [r3, #8]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	029a      	lsls	r2, r3, #10
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	430a      	orrs	r2, r1
 8003012:	609a      	str	r2, [r3, #8]
}
 8003014:	bf00      	nop
 8003016:	3714      	adds	r7, #20
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr
 8003020:	40012300 	.word	0x40012300
 8003024:	0f000001 	.word	0x0f000001

08003028 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003028:	b480      	push	{r7}
 800302a:	b085      	sub	sp, #20
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f003 0307 	and.w	r3, r3, #7
 8003036:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003038:	4b0c      	ldr	r3, [pc, #48]	; (800306c <__NVIC_SetPriorityGrouping+0x44>)
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800303e:	68ba      	ldr	r2, [r7, #8]
 8003040:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003044:	4013      	ands	r3, r2
 8003046:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003050:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003058:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800305a:	4a04      	ldr	r2, [pc, #16]	; (800306c <__NVIC_SetPriorityGrouping+0x44>)
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	60d3      	str	r3, [r2, #12]
}
 8003060:	bf00      	nop
 8003062:	3714      	adds	r7, #20
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr
 800306c:	e000ed00 	.word	0xe000ed00

08003070 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003074:	4b04      	ldr	r3, [pc, #16]	; (8003088 <__NVIC_GetPriorityGrouping+0x18>)
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	0a1b      	lsrs	r3, r3, #8
 800307a:	f003 0307 	and.w	r3, r3, #7
}
 800307e:	4618      	mov	r0, r3
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr
 8003088:	e000ed00 	.word	0xe000ed00

0800308c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	4603      	mov	r3, r0
 8003094:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309a:	2b00      	cmp	r3, #0
 800309c:	db0b      	blt.n	80030b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800309e:	79fb      	ldrb	r3, [r7, #7]
 80030a0:	f003 021f 	and.w	r2, r3, #31
 80030a4:	4907      	ldr	r1, [pc, #28]	; (80030c4 <__NVIC_EnableIRQ+0x38>)
 80030a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030aa:	095b      	lsrs	r3, r3, #5
 80030ac:	2001      	movs	r0, #1
 80030ae:	fa00 f202 	lsl.w	r2, r0, r2
 80030b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030b6:	bf00      	nop
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	e000e100 	.word	0xe000e100

080030c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	4603      	mov	r3, r0
 80030d0:	6039      	str	r1, [r7, #0]
 80030d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	db0a      	blt.n	80030f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	b2da      	uxtb	r2, r3
 80030e0:	490c      	ldr	r1, [pc, #48]	; (8003114 <__NVIC_SetPriority+0x4c>)
 80030e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e6:	0112      	lsls	r2, r2, #4
 80030e8:	b2d2      	uxtb	r2, r2
 80030ea:	440b      	add	r3, r1
 80030ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030f0:	e00a      	b.n	8003108 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	b2da      	uxtb	r2, r3
 80030f6:	4908      	ldr	r1, [pc, #32]	; (8003118 <__NVIC_SetPriority+0x50>)
 80030f8:	79fb      	ldrb	r3, [r7, #7]
 80030fa:	f003 030f 	and.w	r3, r3, #15
 80030fe:	3b04      	subs	r3, #4
 8003100:	0112      	lsls	r2, r2, #4
 8003102:	b2d2      	uxtb	r2, r2
 8003104:	440b      	add	r3, r1
 8003106:	761a      	strb	r2, [r3, #24]
}
 8003108:	bf00      	nop
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr
 8003114:	e000e100 	.word	0xe000e100
 8003118:	e000ed00 	.word	0xe000ed00

0800311c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800311c:	b480      	push	{r7}
 800311e:	b089      	sub	sp, #36	; 0x24
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f003 0307 	and.w	r3, r3, #7
 800312e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	f1c3 0307 	rsb	r3, r3, #7
 8003136:	2b04      	cmp	r3, #4
 8003138:	bf28      	it	cs
 800313a:	2304      	movcs	r3, #4
 800313c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	3304      	adds	r3, #4
 8003142:	2b06      	cmp	r3, #6
 8003144:	d902      	bls.n	800314c <NVIC_EncodePriority+0x30>
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	3b03      	subs	r3, #3
 800314a:	e000      	b.n	800314e <NVIC_EncodePriority+0x32>
 800314c:	2300      	movs	r3, #0
 800314e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003150:	f04f 32ff 	mov.w	r2, #4294967295
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	43da      	mvns	r2, r3
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	401a      	ands	r2, r3
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003164:	f04f 31ff 	mov.w	r1, #4294967295
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	fa01 f303 	lsl.w	r3, r1, r3
 800316e:	43d9      	mvns	r1, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003174:	4313      	orrs	r3, r2
         );
}
 8003176:	4618      	mov	r0, r3
 8003178:	3724      	adds	r7, #36	; 0x24
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
	...

08003184 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	3b01      	subs	r3, #1
 8003190:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003194:	d301      	bcc.n	800319a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003196:	2301      	movs	r3, #1
 8003198:	e00f      	b.n	80031ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800319a:	4a0a      	ldr	r2, [pc, #40]	; (80031c4 <SysTick_Config+0x40>)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	3b01      	subs	r3, #1
 80031a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031a2:	210f      	movs	r1, #15
 80031a4:	f04f 30ff 	mov.w	r0, #4294967295
 80031a8:	f7ff ff8e 	bl	80030c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031ac:	4b05      	ldr	r3, [pc, #20]	; (80031c4 <SysTick_Config+0x40>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031b2:	4b04      	ldr	r3, [pc, #16]	; (80031c4 <SysTick_Config+0x40>)
 80031b4:	2207      	movs	r2, #7
 80031b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3708      	adds	r7, #8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	e000e010 	.word	0xe000e010

080031c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f7ff ff29 	bl	8003028 <__NVIC_SetPriorityGrouping>
}
 80031d6:	bf00      	nop
 80031d8:	3708      	adds	r7, #8
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031de:	b580      	push	{r7, lr}
 80031e0:	b086      	sub	sp, #24
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	4603      	mov	r3, r0
 80031e6:	60b9      	str	r1, [r7, #8]
 80031e8:	607a      	str	r2, [r7, #4]
 80031ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031ec:	2300      	movs	r3, #0
 80031ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031f0:	f7ff ff3e 	bl	8003070 <__NVIC_GetPriorityGrouping>
 80031f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	68b9      	ldr	r1, [r7, #8]
 80031fa:	6978      	ldr	r0, [r7, #20]
 80031fc:	f7ff ff8e 	bl	800311c <NVIC_EncodePriority>
 8003200:	4602      	mov	r2, r0
 8003202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003206:	4611      	mov	r1, r2
 8003208:	4618      	mov	r0, r3
 800320a:	f7ff ff5d 	bl	80030c8 <__NVIC_SetPriority>
}
 800320e:	bf00      	nop
 8003210:	3718      	adds	r7, #24
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003216:	b580      	push	{r7, lr}
 8003218:	b082      	sub	sp, #8
 800321a:	af00      	add	r7, sp, #0
 800321c:	4603      	mov	r3, r0
 800321e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff ff31 	bl	800308c <__NVIC_EnableIRQ>
}
 800322a:	bf00      	nop
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b082      	sub	sp, #8
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f7ff ffa2 	bl	8003184 <SysTick_Config>
 8003240:	4603      	mov	r3, r0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3708      	adds	r7, #8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
	...

0800324c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800324c:	b480      	push	{r7}
 800324e:	b089      	sub	sp, #36	; 0x24
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003256:	2300      	movs	r3, #0
 8003258:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800325a:	2300      	movs	r3, #0
 800325c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800325e:	2300      	movs	r3, #0
 8003260:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003262:	2300      	movs	r3, #0
 8003264:	61fb      	str	r3, [r7, #28]
 8003266:	e16b      	b.n	8003540 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003268:	2201      	movs	r2, #1
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	697a      	ldr	r2, [r7, #20]
 8003278:	4013      	ands	r3, r2
 800327a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	429a      	cmp	r2, r3
 8003282:	f040 815a 	bne.w	800353a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f003 0303 	and.w	r3, r3, #3
 800328e:	2b01      	cmp	r3, #1
 8003290:	d005      	beq.n	800329e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800329a:	2b02      	cmp	r3, #2
 800329c:	d130      	bne.n	8003300 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	2203      	movs	r2, #3
 80032aa:	fa02 f303 	lsl.w	r3, r2, r3
 80032ae:	43db      	mvns	r3, r3
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	4013      	ands	r3, r2
 80032b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	68da      	ldr	r2, [r3, #12]
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	fa02 f303 	lsl.w	r3, r2, r3
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032d4:	2201      	movs	r2, #1
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	fa02 f303 	lsl.w	r3, r2, r3
 80032dc:	43db      	mvns	r3, r3
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	4013      	ands	r3, r2
 80032e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	091b      	lsrs	r3, r3, #4
 80032ea:	f003 0201 	and.w	r2, r3, #1
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f003 0303 	and.w	r3, r3, #3
 8003308:	2b03      	cmp	r3, #3
 800330a:	d017      	beq.n	800333c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	2203      	movs	r2, #3
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	43db      	mvns	r3, r3
 800331e:	69ba      	ldr	r2, [r7, #24]
 8003320:	4013      	ands	r3, r2
 8003322:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	689a      	ldr	r2, [r3, #8]
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	4313      	orrs	r3, r2
 8003334:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f003 0303 	and.w	r3, r3, #3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d123      	bne.n	8003390 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	08da      	lsrs	r2, r3, #3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	3208      	adds	r2, #8
 8003350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003354:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	f003 0307 	and.w	r3, r3, #7
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	220f      	movs	r2, #15
 8003360:	fa02 f303 	lsl.w	r3, r2, r3
 8003364:	43db      	mvns	r3, r3
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	4013      	ands	r3, r2
 800336a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	691a      	ldr	r2, [r3, #16]
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	f003 0307 	and.w	r3, r3, #7
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	fa02 f303 	lsl.w	r3, r2, r3
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	4313      	orrs	r3, r2
 8003380:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	08da      	lsrs	r2, r3, #3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	3208      	adds	r2, #8
 800338a:	69b9      	ldr	r1, [r7, #24]
 800338c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	2203      	movs	r2, #3
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	43db      	mvns	r3, r3
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	4013      	ands	r3, r2
 80033a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f003 0203 	and.w	r2, r3, #3
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	f000 80b4 	beq.w	800353a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033d2:	2300      	movs	r3, #0
 80033d4:	60fb      	str	r3, [r7, #12]
 80033d6:	4b60      	ldr	r3, [pc, #384]	; (8003558 <HAL_GPIO_Init+0x30c>)
 80033d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033da:	4a5f      	ldr	r2, [pc, #380]	; (8003558 <HAL_GPIO_Init+0x30c>)
 80033dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033e0:	6453      	str	r3, [r2, #68]	; 0x44
 80033e2:	4b5d      	ldr	r3, [pc, #372]	; (8003558 <HAL_GPIO_Init+0x30c>)
 80033e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033ea:	60fb      	str	r3, [r7, #12]
 80033ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033ee:	4a5b      	ldr	r2, [pc, #364]	; (800355c <HAL_GPIO_Init+0x310>)
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	089b      	lsrs	r3, r3, #2
 80033f4:	3302      	adds	r3, #2
 80033f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	f003 0303 	and.w	r3, r3, #3
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	220f      	movs	r2, #15
 8003406:	fa02 f303 	lsl.w	r3, r2, r3
 800340a:	43db      	mvns	r3, r3
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	4013      	ands	r3, r2
 8003410:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a52      	ldr	r2, [pc, #328]	; (8003560 <HAL_GPIO_Init+0x314>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d02b      	beq.n	8003472 <HAL_GPIO_Init+0x226>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a51      	ldr	r2, [pc, #324]	; (8003564 <HAL_GPIO_Init+0x318>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d025      	beq.n	800346e <HAL_GPIO_Init+0x222>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a50      	ldr	r2, [pc, #320]	; (8003568 <HAL_GPIO_Init+0x31c>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d01f      	beq.n	800346a <HAL_GPIO_Init+0x21e>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a4f      	ldr	r2, [pc, #316]	; (800356c <HAL_GPIO_Init+0x320>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d019      	beq.n	8003466 <HAL_GPIO_Init+0x21a>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a4e      	ldr	r2, [pc, #312]	; (8003570 <HAL_GPIO_Init+0x324>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d013      	beq.n	8003462 <HAL_GPIO_Init+0x216>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a4d      	ldr	r2, [pc, #308]	; (8003574 <HAL_GPIO_Init+0x328>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d00d      	beq.n	800345e <HAL_GPIO_Init+0x212>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a4c      	ldr	r2, [pc, #304]	; (8003578 <HAL_GPIO_Init+0x32c>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d007      	beq.n	800345a <HAL_GPIO_Init+0x20e>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a4b      	ldr	r2, [pc, #300]	; (800357c <HAL_GPIO_Init+0x330>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d101      	bne.n	8003456 <HAL_GPIO_Init+0x20a>
 8003452:	2307      	movs	r3, #7
 8003454:	e00e      	b.n	8003474 <HAL_GPIO_Init+0x228>
 8003456:	2308      	movs	r3, #8
 8003458:	e00c      	b.n	8003474 <HAL_GPIO_Init+0x228>
 800345a:	2306      	movs	r3, #6
 800345c:	e00a      	b.n	8003474 <HAL_GPIO_Init+0x228>
 800345e:	2305      	movs	r3, #5
 8003460:	e008      	b.n	8003474 <HAL_GPIO_Init+0x228>
 8003462:	2304      	movs	r3, #4
 8003464:	e006      	b.n	8003474 <HAL_GPIO_Init+0x228>
 8003466:	2303      	movs	r3, #3
 8003468:	e004      	b.n	8003474 <HAL_GPIO_Init+0x228>
 800346a:	2302      	movs	r3, #2
 800346c:	e002      	b.n	8003474 <HAL_GPIO_Init+0x228>
 800346e:	2301      	movs	r3, #1
 8003470:	e000      	b.n	8003474 <HAL_GPIO_Init+0x228>
 8003472:	2300      	movs	r3, #0
 8003474:	69fa      	ldr	r2, [r7, #28]
 8003476:	f002 0203 	and.w	r2, r2, #3
 800347a:	0092      	lsls	r2, r2, #2
 800347c:	4093      	lsls	r3, r2
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	4313      	orrs	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003484:	4935      	ldr	r1, [pc, #212]	; (800355c <HAL_GPIO_Init+0x310>)
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	089b      	lsrs	r3, r3, #2
 800348a:	3302      	adds	r3, #2
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003492:	4b3b      	ldr	r3, [pc, #236]	; (8003580 <HAL_GPIO_Init+0x334>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	43db      	mvns	r3, r3
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	4013      	ands	r3, r2
 80034a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034b6:	4a32      	ldr	r2, [pc, #200]	; (8003580 <HAL_GPIO_Init+0x334>)
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80034bc:	4b30      	ldr	r3, [pc, #192]	; (8003580 <HAL_GPIO_Init+0x334>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	43db      	mvns	r3, r3
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	4013      	ands	r3, r2
 80034ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d003      	beq.n	80034e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	4313      	orrs	r3, r2
 80034de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034e0:	4a27      	ldr	r2, [pc, #156]	; (8003580 <HAL_GPIO_Init+0x334>)
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034e6:	4b26      	ldr	r3, [pc, #152]	; (8003580 <HAL_GPIO_Init+0x334>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	43db      	mvns	r3, r3
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	4013      	ands	r3, r2
 80034f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d003      	beq.n	800350a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	4313      	orrs	r3, r2
 8003508:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800350a:	4a1d      	ldr	r2, [pc, #116]	; (8003580 <HAL_GPIO_Init+0x334>)
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003510:	4b1b      	ldr	r3, [pc, #108]	; (8003580 <HAL_GPIO_Init+0x334>)
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	43db      	mvns	r3, r3
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	4013      	ands	r3, r2
 800351e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d003      	beq.n	8003534 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	4313      	orrs	r3, r2
 8003532:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003534:	4a12      	ldr	r2, [pc, #72]	; (8003580 <HAL_GPIO_Init+0x334>)
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	3301      	adds	r3, #1
 800353e:	61fb      	str	r3, [r7, #28]
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	2b0f      	cmp	r3, #15
 8003544:	f67f ae90 	bls.w	8003268 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003548:	bf00      	nop
 800354a:	bf00      	nop
 800354c:	3724      	adds	r7, #36	; 0x24
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	40023800 	.word	0x40023800
 800355c:	40013800 	.word	0x40013800
 8003560:	40020000 	.word	0x40020000
 8003564:	40020400 	.word	0x40020400
 8003568:	40020800 	.word	0x40020800
 800356c:	40020c00 	.word	0x40020c00
 8003570:	40021000 	.word	0x40021000
 8003574:	40021400 	.word	0x40021400
 8003578:	40021800 	.word	0x40021800
 800357c:	40021c00 	.word	0x40021c00
 8003580:	40013c00 	.word	0x40013c00

08003584 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	460b      	mov	r3, r1
 800358e:	807b      	strh	r3, [r7, #2]
 8003590:	4613      	mov	r3, r2
 8003592:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003594:	787b      	ldrb	r3, [r7, #1]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d003      	beq.n	80035a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800359a:	887a      	ldrh	r2, [r7, #2]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035a0:	e003      	b.n	80035aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035a2:	887b      	ldrh	r3, [r7, #2]
 80035a4:	041a      	lsls	r2, r3, #16
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	619a      	str	r2, [r3, #24]
}
 80035aa:	bf00      	nop
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
	...

080035b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	4603      	mov	r3, r0
 80035c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80035c2:	4b08      	ldr	r3, [pc, #32]	; (80035e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035c4:	695a      	ldr	r2, [r3, #20]
 80035c6:	88fb      	ldrh	r3, [r7, #6]
 80035c8:	4013      	ands	r3, r2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d006      	beq.n	80035dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80035ce:	4a05      	ldr	r2, [pc, #20]	; (80035e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035d0:	88fb      	ldrh	r3, [r7, #6]
 80035d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035d4:	88fb      	ldrh	r3, [r7, #6]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7fd fc5a 	bl	8000e90 <HAL_GPIO_EXTI_Callback>
  }
}
 80035dc:	bf00      	nop
 80035de:	3708      	adds	r7, #8
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	40013c00 	.word	0x40013c00

080035e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e12b      	b.n	8003852 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d106      	bne.n	8003614 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f7fe feca 	bl	80023a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2224      	movs	r2, #36	; 0x24
 8003618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f022 0201 	bic.w	r2, r2, #1
 800362a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800363a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800364a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800364c:	f001 f992 	bl	8004974 <HAL_RCC_GetPCLK1Freq>
 8003650:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	4a81      	ldr	r2, [pc, #516]	; (800385c <HAL_I2C_Init+0x274>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d807      	bhi.n	800366c <HAL_I2C_Init+0x84>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	4a80      	ldr	r2, [pc, #512]	; (8003860 <HAL_I2C_Init+0x278>)
 8003660:	4293      	cmp	r3, r2
 8003662:	bf94      	ite	ls
 8003664:	2301      	movls	r3, #1
 8003666:	2300      	movhi	r3, #0
 8003668:	b2db      	uxtb	r3, r3
 800366a:	e006      	b.n	800367a <HAL_I2C_Init+0x92>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	4a7d      	ldr	r2, [pc, #500]	; (8003864 <HAL_I2C_Init+0x27c>)
 8003670:	4293      	cmp	r3, r2
 8003672:	bf94      	ite	ls
 8003674:	2301      	movls	r3, #1
 8003676:	2300      	movhi	r3, #0
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e0e7      	b.n	8003852 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	4a78      	ldr	r2, [pc, #480]	; (8003868 <HAL_I2C_Init+0x280>)
 8003686:	fba2 2303 	umull	r2, r3, r2, r3
 800368a:	0c9b      	lsrs	r3, r3, #18
 800368c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68ba      	ldr	r2, [r7, #8]
 800369e:	430a      	orrs	r2, r1
 80036a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	4a6a      	ldr	r2, [pc, #424]	; (800385c <HAL_I2C_Init+0x274>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d802      	bhi.n	80036bc <HAL_I2C_Init+0xd4>
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	3301      	adds	r3, #1
 80036ba:	e009      	b.n	80036d0 <HAL_I2C_Init+0xe8>
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80036c2:	fb02 f303 	mul.w	r3, r2, r3
 80036c6:	4a69      	ldr	r2, [pc, #420]	; (800386c <HAL_I2C_Init+0x284>)
 80036c8:	fba2 2303 	umull	r2, r3, r2, r3
 80036cc:	099b      	lsrs	r3, r3, #6
 80036ce:	3301      	adds	r3, #1
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	6812      	ldr	r2, [r2, #0]
 80036d4:	430b      	orrs	r3, r1
 80036d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80036e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	495c      	ldr	r1, [pc, #368]	; (800385c <HAL_I2C_Init+0x274>)
 80036ec:	428b      	cmp	r3, r1
 80036ee:	d819      	bhi.n	8003724 <HAL_I2C_Init+0x13c>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	1e59      	subs	r1, r3, #1
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80036fe:	1c59      	adds	r1, r3, #1
 8003700:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003704:	400b      	ands	r3, r1
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00a      	beq.n	8003720 <HAL_I2C_Init+0x138>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	1e59      	subs	r1, r3, #1
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	fbb1 f3f3 	udiv	r3, r1, r3
 8003718:	3301      	adds	r3, #1
 800371a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800371e:	e051      	b.n	80037c4 <HAL_I2C_Init+0x1dc>
 8003720:	2304      	movs	r3, #4
 8003722:	e04f      	b.n	80037c4 <HAL_I2C_Init+0x1dc>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d111      	bne.n	8003750 <HAL_I2C_Init+0x168>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	1e58      	subs	r0, r3, #1
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6859      	ldr	r1, [r3, #4]
 8003734:	460b      	mov	r3, r1
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	440b      	add	r3, r1
 800373a:	fbb0 f3f3 	udiv	r3, r0, r3
 800373e:	3301      	adds	r3, #1
 8003740:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003744:	2b00      	cmp	r3, #0
 8003746:	bf0c      	ite	eq
 8003748:	2301      	moveq	r3, #1
 800374a:	2300      	movne	r3, #0
 800374c:	b2db      	uxtb	r3, r3
 800374e:	e012      	b.n	8003776 <HAL_I2C_Init+0x18e>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	1e58      	subs	r0, r3, #1
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6859      	ldr	r1, [r3, #4]
 8003758:	460b      	mov	r3, r1
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	440b      	add	r3, r1
 800375e:	0099      	lsls	r1, r3, #2
 8003760:	440b      	add	r3, r1
 8003762:	fbb0 f3f3 	udiv	r3, r0, r3
 8003766:	3301      	adds	r3, #1
 8003768:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800376c:	2b00      	cmp	r3, #0
 800376e:	bf0c      	ite	eq
 8003770:	2301      	moveq	r3, #1
 8003772:	2300      	movne	r3, #0
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <HAL_I2C_Init+0x196>
 800377a:	2301      	movs	r3, #1
 800377c:	e022      	b.n	80037c4 <HAL_I2C_Init+0x1dc>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10e      	bne.n	80037a4 <HAL_I2C_Init+0x1bc>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	1e58      	subs	r0, r3, #1
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6859      	ldr	r1, [r3, #4]
 800378e:	460b      	mov	r3, r1
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	440b      	add	r3, r1
 8003794:	fbb0 f3f3 	udiv	r3, r0, r3
 8003798:	3301      	adds	r3, #1
 800379a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800379e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037a2:	e00f      	b.n	80037c4 <HAL_I2C_Init+0x1dc>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	1e58      	subs	r0, r3, #1
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6859      	ldr	r1, [r3, #4]
 80037ac:	460b      	mov	r3, r1
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	440b      	add	r3, r1
 80037b2:	0099      	lsls	r1, r3, #2
 80037b4:	440b      	add	r3, r1
 80037b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80037ba:	3301      	adds	r3, #1
 80037bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037c4:	6879      	ldr	r1, [r7, #4]
 80037c6:	6809      	ldr	r1, [r1, #0]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	69da      	ldr	r2, [r3, #28]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	431a      	orrs	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	430a      	orrs	r2, r1
 80037e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80037f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6911      	ldr	r1, [r2, #16]
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	68d2      	ldr	r2, [r2, #12]
 80037fe:	4311      	orrs	r1, r2
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	6812      	ldr	r2, [r2, #0]
 8003804:	430b      	orrs	r3, r1
 8003806:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	695a      	ldr	r2, [r3, #20]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	431a      	orrs	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	430a      	orrs	r2, r1
 8003822:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f042 0201 	orr.w	r2, r2, #1
 8003832:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2220      	movs	r2, #32
 800383e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	000186a0 	.word	0x000186a0
 8003860:	001e847f 	.word	0x001e847f
 8003864:	003d08ff 	.word	0x003d08ff
 8003868:	431bde83 	.word	0x431bde83
 800386c:	10624dd3 	.word	0x10624dd3

08003870 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b088      	sub	sp, #32
 8003874:	af02      	add	r7, sp, #8
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	607a      	str	r2, [r7, #4]
 800387a:	461a      	mov	r2, r3
 800387c:	460b      	mov	r3, r1
 800387e:	817b      	strh	r3, [r7, #10]
 8003880:	4613      	mov	r3, r2
 8003882:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003884:	f7fe ffc4 	bl	8002810 <HAL_GetTick>
 8003888:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b20      	cmp	r3, #32
 8003894:	f040 80e0 	bne.w	8003a58 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	9300      	str	r3, [sp, #0]
 800389c:	2319      	movs	r3, #25
 800389e:	2201      	movs	r2, #1
 80038a0:	4970      	ldr	r1, [pc, #448]	; (8003a64 <HAL_I2C_Master_Transmit+0x1f4>)
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f000 fa92 	bl	8003dcc <I2C_WaitOnFlagUntilTimeout>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80038ae:	2302      	movs	r3, #2
 80038b0:	e0d3      	b.n	8003a5a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d101      	bne.n	80038c0 <HAL_I2C_Master_Transmit+0x50>
 80038bc:	2302      	movs	r3, #2
 80038be:	e0cc      	b.n	8003a5a <HAL_I2C_Master_Transmit+0x1ea>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d007      	beq.n	80038e6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f042 0201 	orr.w	r2, r2, #1
 80038e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2221      	movs	r2, #33	; 0x21
 80038fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2210      	movs	r2, #16
 8003902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	893a      	ldrh	r2, [r7, #8]
 8003916:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391c:	b29a      	uxth	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	4a50      	ldr	r2, [pc, #320]	; (8003a68 <HAL_I2C_Master_Transmit+0x1f8>)
 8003926:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003928:	8979      	ldrh	r1, [r7, #10]
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	6a3a      	ldr	r2, [r7, #32]
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f000 f9ca 	bl	8003cc8 <I2C_MasterRequestWrite>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e08d      	b.n	8003a5a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800393e:	2300      	movs	r3, #0
 8003940:	613b      	str	r3, [r7, #16]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	695b      	ldr	r3, [r3, #20]
 8003948:	613b      	str	r3, [r7, #16]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	613b      	str	r3, [r7, #16]
 8003952:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003954:	e066      	b.n	8003a24 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	6a39      	ldr	r1, [r7, #32]
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f000 fb0c 	bl	8003f78 <I2C_WaitOnTXEFlagUntilTimeout>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00d      	beq.n	8003982 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396a:	2b04      	cmp	r3, #4
 800396c:	d107      	bne.n	800397e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800397c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e06b      	b.n	8003a5a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003986:	781a      	ldrb	r2, [r3, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003992:	1c5a      	adds	r2, r3, #1
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399c:	b29b      	uxth	r3, r3
 800399e:	3b01      	subs	r3, #1
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039aa:	3b01      	subs	r3, #1
 80039ac:	b29a      	uxth	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	695b      	ldr	r3, [r3, #20]
 80039b8:	f003 0304 	and.w	r3, r3, #4
 80039bc:	2b04      	cmp	r3, #4
 80039be:	d11b      	bne.n	80039f8 <HAL_I2C_Master_Transmit+0x188>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d017      	beq.n	80039f8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039cc:	781a      	ldrb	r2, [r3, #0]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d8:	1c5a      	adds	r2, r3, #1
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	3b01      	subs	r3, #1
 80039e6:	b29a      	uxth	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039f0:	3b01      	subs	r3, #1
 80039f2:	b29a      	uxth	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	6a39      	ldr	r1, [r7, #32]
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f000 fafc 	bl	8003ffa <I2C_WaitOnBTFFlagUntilTimeout>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00d      	beq.n	8003a24 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0c:	2b04      	cmp	r3, #4
 8003a0e:	d107      	bne.n	8003a20 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a1e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e01a      	b.n	8003a5a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d194      	bne.n	8003956 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2220      	movs	r2, #32
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a54:	2300      	movs	r3, #0
 8003a56:	e000      	b.n	8003a5a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003a58:	2302      	movs	r3, #2
  }
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3718      	adds	r7, #24
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	00100002 	.word	0x00100002
 8003a68:	ffff0000 	.word	0xffff0000

08003a6c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b08a      	sub	sp, #40	; 0x28
 8003a70:	af02      	add	r7, sp, #8
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	607a      	str	r2, [r7, #4]
 8003a76:	603b      	str	r3, [r7, #0]
 8003a78:	460b      	mov	r3, r1
 8003a7a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003a7c:	f7fe fec8 	bl	8002810 <HAL_GetTick>
 8003a80:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003a82:	2301      	movs	r3, #1
 8003a84:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b20      	cmp	r3, #32
 8003a90:	f040 8111 	bne.w	8003cb6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	9300      	str	r3, [sp, #0]
 8003a98:	2319      	movs	r3, #25
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	4988      	ldr	r1, [pc, #544]	; (8003cc0 <HAL_I2C_IsDeviceReady+0x254>)
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f000 f994 	bl	8003dcc <I2C_WaitOnFlagUntilTimeout>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d001      	beq.n	8003aae <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003aaa:	2302      	movs	r3, #2
 8003aac:	e104      	b.n	8003cb8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d101      	bne.n	8003abc <HAL_I2C_IsDeviceReady+0x50>
 8003ab8:	2302      	movs	r3, #2
 8003aba:	e0fd      	b.n	8003cb8 <HAL_I2C_IsDeviceReady+0x24c>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d007      	beq.n	8003ae2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f042 0201 	orr.w	r2, r2, #1
 8003ae0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003af0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2224      	movs	r2, #36	; 0x24
 8003af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4a70      	ldr	r2, [pc, #448]	; (8003cc4 <HAL_I2C_IsDeviceReady+0x258>)
 8003b04:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b14:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	9300      	str	r3, [sp, #0]
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b22:	68f8      	ldr	r0, [r7, #12]
 8003b24:	f000 f952 	bl	8003dcc <I2C_WaitOnFlagUntilTimeout>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00d      	beq.n	8003b4a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b3c:	d103      	bne.n	8003b46 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b44:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e0b6      	b.n	8003cb8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b4a:	897b      	ldrh	r3, [r7, #10]
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	461a      	mov	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b58:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003b5a:	f7fe fe59 	bl	8002810 <HAL_GetTick>
 8003b5e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	bf0c      	ite	eq
 8003b6e:	2301      	moveq	r3, #1
 8003b70:	2300      	movne	r3, #0
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	695b      	ldr	r3, [r3, #20]
 8003b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b84:	bf0c      	ite	eq
 8003b86:	2301      	moveq	r3, #1
 8003b88:	2300      	movne	r3, #0
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003b8e:	e025      	b.n	8003bdc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003b90:	f7fe fe3e 	bl	8002810 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d302      	bcc.n	8003ba6 <HAL_I2C_IsDeviceReady+0x13a>
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d103      	bne.n	8003bae <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	22a0      	movs	r2, #160	; 0xa0
 8003baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	695b      	ldr	r3, [r3, #20]
 8003bb4:	f003 0302 	and.w	r3, r3, #2
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	bf0c      	ite	eq
 8003bbc:	2301      	moveq	r3, #1
 8003bbe:	2300      	movne	r3, #0
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bd2:	bf0c      	ite	eq
 8003bd4:	2301      	moveq	r3, #1
 8003bd6:	2300      	movne	r3, #0
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	2ba0      	cmp	r3, #160	; 0xa0
 8003be6:	d005      	beq.n	8003bf4 <HAL_I2C_IsDeviceReady+0x188>
 8003be8:	7dfb      	ldrb	r3, [r7, #23]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d102      	bne.n	8003bf4 <HAL_I2C_IsDeviceReady+0x188>
 8003bee:	7dbb      	ldrb	r3, [r7, #22]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d0cd      	beq.n	8003b90 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d129      	bne.n	8003c5e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c18:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	613b      	str	r3, [r7, #16]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	613b      	str	r3, [r7, #16]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	613b      	str	r3, [r7, #16]
 8003c2e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	9300      	str	r3, [sp, #0]
 8003c34:	2319      	movs	r3, #25
 8003c36:	2201      	movs	r2, #1
 8003c38:	4921      	ldr	r1, [pc, #132]	; (8003cc0 <HAL_I2C_IsDeviceReady+0x254>)
 8003c3a:	68f8      	ldr	r0, [r7, #12]
 8003c3c:	f000 f8c6 	bl	8003dcc <I2C_WaitOnFlagUntilTimeout>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e036      	b.n	8003cb8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2220      	movs	r2, #32
 8003c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	e02c      	b.n	8003cb8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c6c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c76:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	9300      	str	r3, [sp, #0]
 8003c7c:	2319      	movs	r3, #25
 8003c7e:	2201      	movs	r2, #1
 8003c80:	490f      	ldr	r1, [pc, #60]	; (8003cc0 <HAL_I2C_IsDeviceReady+0x254>)
 8003c82:	68f8      	ldr	r0, [r7, #12]
 8003c84:	f000 f8a2 	bl	8003dcc <I2C_WaitOnFlagUntilTimeout>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e012      	b.n	8003cb8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	3301      	adds	r3, #1
 8003c96:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003c98:	69ba      	ldr	r2, [r7, #24]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	f4ff af32 	bcc.w	8003b06 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e000      	b.n	8003cb8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003cb6:	2302      	movs	r3, #2
  }
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3720      	adds	r7, #32
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	00100002 	.word	0x00100002
 8003cc4:	ffff0000 	.word	0xffff0000

08003cc8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b088      	sub	sp, #32
 8003ccc:	af02      	add	r7, sp, #8
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	607a      	str	r2, [r7, #4]
 8003cd2:	603b      	str	r3, [r7, #0]
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cdc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	2b08      	cmp	r3, #8
 8003ce2:	d006      	beq.n	8003cf2 <I2C_MasterRequestWrite+0x2a>
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d003      	beq.n	8003cf2 <I2C_MasterRequestWrite+0x2a>
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003cf0:	d108      	bne.n	8003d04 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d00:	601a      	str	r2, [r3, #0]
 8003d02:	e00b      	b.n	8003d1c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d08:	2b12      	cmp	r3, #18
 8003d0a:	d107      	bne.n	8003d1c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d1a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	9300      	str	r3, [sp, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f000 f84f 	bl	8003dcc <I2C_WaitOnFlagUntilTimeout>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00d      	beq.n	8003d50 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d42:	d103      	bne.n	8003d4c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e035      	b.n	8003dbc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d58:	d108      	bne.n	8003d6c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d5a:	897b      	ldrh	r3, [r7, #10]
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	461a      	mov	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d68:	611a      	str	r2, [r3, #16]
 8003d6a:	e01b      	b.n	8003da4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003d6c:	897b      	ldrh	r3, [r7, #10]
 8003d6e:	11db      	asrs	r3, r3, #7
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	f003 0306 	and.w	r3, r3, #6
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	f063 030f 	orn	r3, r3, #15
 8003d7c:	b2da      	uxtb	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	490e      	ldr	r1, [pc, #56]	; (8003dc4 <I2C_MasterRequestWrite+0xfc>)
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f000 f875 	bl	8003e7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d001      	beq.n	8003d9a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e010      	b.n	8003dbc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003d9a:	897b      	ldrh	r3, [r7, #10]
 8003d9c:	b2da      	uxtb	r2, r3
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	4907      	ldr	r1, [pc, #28]	; (8003dc8 <I2C_MasterRequestWrite+0x100>)
 8003daa:	68f8      	ldr	r0, [r7, #12]
 8003dac:	f000 f865 	bl	8003e7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e000      	b.n	8003dbc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003dba:	2300      	movs	r3, #0
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3718      	adds	r7, #24
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	00010008 	.word	0x00010008
 8003dc8:	00010002 	.word	0x00010002

08003dcc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	603b      	str	r3, [r7, #0]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ddc:	e025      	b.n	8003e2a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de4:	d021      	beq.n	8003e2a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003de6:	f7fe fd13 	bl	8002810 <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d302      	bcc.n	8003dfc <I2C_WaitOnFlagUntilTimeout+0x30>
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d116      	bne.n	8003e2a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2220      	movs	r2, #32
 8003e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	f043 0220 	orr.w	r2, r3, #32
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e023      	b.n	8003e72 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	0c1b      	lsrs	r3, r3, #16
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d10d      	bne.n	8003e50 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	43da      	mvns	r2, r3
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	4013      	ands	r3, r2
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	bf0c      	ite	eq
 8003e46:	2301      	moveq	r3, #1
 8003e48:	2300      	movne	r3, #0
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	e00c      	b.n	8003e6a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	43da      	mvns	r2, r3
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	bf0c      	ite	eq
 8003e62:	2301      	moveq	r3, #1
 8003e64:	2300      	movne	r3, #0
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	461a      	mov	r2, r3
 8003e6a:	79fb      	ldrb	r3, [r7, #7]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d0b6      	beq.n	8003dde <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3710      	adds	r7, #16
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b084      	sub	sp, #16
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	60f8      	str	r0, [r7, #12]
 8003e82:	60b9      	str	r1, [r7, #8]
 8003e84:	607a      	str	r2, [r7, #4]
 8003e86:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e88:	e051      	b.n	8003f2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	695b      	ldr	r3, [r3, #20]
 8003e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e98:	d123      	bne.n	8003ee2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ea8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003eb2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2220      	movs	r2, #32
 8003ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	f043 0204 	orr.w	r2, r3, #4
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e046      	b.n	8003f70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee8:	d021      	beq.n	8003f2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eea:	f7fe fc91 	bl	8002810 <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d302      	bcc.n	8003f00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d116      	bne.n	8003f2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2220      	movs	r2, #32
 8003f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1a:	f043 0220 	orr.w	r2, r3, #32
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e020      	b.n	8003f70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	0c1b      	lsrs	r3, r3, #16
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d10c      	bne.n	8003f52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	43da      	mvns	r2, r3
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	4013      	ands	r3, r2
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	bf14      	ite	ne
 8003f4a:	2301      	movne	r3, #1
 8003f4c:	2300      	moveq	r3, #0
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	e00b      	b.n	8003f6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	43da      	mvns	r2, r3
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	bf14      	ite	ne
 8003f64:	2301      	movne	r3, #1
 8003f66:	2300      	moveq	r3, #0
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d18d      	bne.n	8003e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3710      	adds	r7, #16
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f84:	e02d      	b.n	8003fe2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	f000 f878 	bl	800407c <I2C_IsAcknowledgeFailed>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e02d      	b.n	8003ff2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f9c:	d021      	beq.n	8003fe2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f9e:	f7fe fc37 	bl	8002810 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	68ba      	ldr	r2, [r7, #8]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d302      	bcc.n	8003fb4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d116      	bne.n	8003fe2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2220      	movs	r2, #32
 8003fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	f043 0220 	orr.w	r2, r3, #32
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e007      	b.n	8003ff2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fec:	2b80      	cmp	r3, #128	; 0x80
 8003fee:	d1ca      	bne.n	8003f86 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b084      	sub	sp, #16
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	60f8      	str	r0, [r7, #12]
 8004002:	60b9      	str	r1, [r7, #8]
 8004004:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004006:	e02d      	b.n	8004064 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	f000 f837 	bl	800407c <I2C_IsAcknowledgeFailed>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d001      	beq.n	8004018 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e02d      	b.n	8004074 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800401e:	d021      	beq.n	8004064 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004020:	f7fe fbf6 	bl	8002810 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	68ba      	ldr	r2, [r7, #8]
 800402c:	429a      	cmp	r2, r3
 800402e:	d302      	bcc.n	8004036 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d116      	bne.n	8004064 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2220      	movs	r2, #32
 8004040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004050:	f043 0220 	orr.w	r2, r3, #32
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e007      	b.n	8004074 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	f003 0304 	and.w	r3, r3, #4
 800406e:	2b04      	cmp	r3, #4
 8004070:	d1ca      	bne.n	8004008 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	3710      	adds	r7, #16
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800408e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004092:	d11b      	bne.n	80040cc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800409c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2220      	movs	r2, #32
 80040a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b8:	f043 0204 	orr.w	r2, r3, #4
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e000      	b.n	80040ce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
	...

080040dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e264      	b.n	80045b8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d075      	beq.n	80041e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040fa:	4ba3      	ldr	r3, [pc, #652]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f003 030c 	and.w	r3, r3, #12
 8004102:	2b04      	cmp	r3, #4
 8004104:	d00c      	beq.n	8004120 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004106:	4ba0      	ldr	r3, [pc, #640]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800410e:	2b08      	cmp	r3, #8
 8004110:	d112      	bne.n	8004138 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004112:	4b9d      	ldr	r3, [pc, #628]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800411a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800411e:	d10b      	bne.n	8004138 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004120:	4b99      	ldr	r3, [pc, #612]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d05b      	beq.n	80041e4 <HAL_RCC_OscConfig+0x108>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d157      	bne.n	80041e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e23f      	b.n	80045b8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004140:	d106      	bne.n	8004150 <HAL_RCC_OscConfig+0x74>
 8004142:	4b91      	ldr	r3, [pc, #580]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a90      	ldr	r2, [pc, #576]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800414c:	6013      	str	r3, [r2, #0]
 800414e:	e01d      	b.n	800418c <HAL_RCC_OscConfig+0xb0>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004158:	d10c      	bne.n	8004174 <HAL_RCC_OscConfig+0x98>
 800415a:	4b8b      	ldr	r3, [pc, #556]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a8a      	ldr	r2, [pc, #552]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004160:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004164:	6013      	str	r3, [r2, #0]
 8004166:	4b88      	ldr	r3, [pc, #544]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a87      	ldr	r2, [pc, #540]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 800416c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004170:	6013      	str	r3, [r2, #0]
 8004172:	e00b      	b.n	800418c <HAL_RCC_OscConfig+0xb0>
 8004174:	4b84      	ldr	r3, [pc, #528]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a83      	ldr	r2, [pc, #524]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 800417a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800417e:	6013      	str	r3, [r2, #0]
 8004180:	4b81      	ldr	r3, [pc, #516]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a80      	ldr	r2, [pc, #512]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004186:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800418a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d013      	beq.n	80041bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004194:	f7fe fb3c 	bl	8002810 <HAL_GetTick>
 8004198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800419a:	e008      	b.n	80041ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800419c:	f7fe fb38 	bl	8002810 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	2b64      	cmp	r3, #100	; 0x64
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e204      	b.n	80045b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ae:	4b76      	ldr	r3, [pc, #472]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d0f0      	beq.n	800419c <HAL_RCC_OscConfig+0xc0>
 80041ba:	e014      	b.n	80041e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041bc:	f7fe fb28 	bl	8002810 <HAL_GetTick>
 80041c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041c2:	e008      	b.n	80041d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041c4:	f7fe fb24 	bl	8002810 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2b64      	cmp	r3, #100	; 0x64
 80041d0:	d901      	bls.n	80041d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e1f0      	b.n	80045b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041d6:	4b6c      	ldr	r3, [pc, #432]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1f0      	bne.n	80041c4 <HAL_RCC_OscConfig+0xe8>
 80041e2:	e000      	b.n	80041e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d063      	beq.n	80042ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041f2:	4b65      	ldr	r3, [pc, #404]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f003 030c 	and.w	r3, r3, #12
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00b      	beq.n	8004216 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041fe:	4b62      	ldr	r3, [pc, #392]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004206:	2b08      	cmp	r3, #8
 8004208:	d11c      	bne.n	8004244 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800420a:	4b5f      	ldr	r3, [pc, #380]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d116      	bne.n	8004244 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004216:	4b5c      	ldr	r3, [pc, #368]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0302 	and.w	r3, r3, #2
 800421e:	2b00      	cmp	r3, #0
 8004220:	d005      	beq.n	800422e <HAL_RCC_OscConfig+0x152>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d001      	beq.n	800422e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e1c4      	b.n	80045b8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800422e:	4b56      	ldr	r3, [pc, #344]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	00db      	lsls	r3, r3, #3
 800423c:	4952      	ldr	r1, [pc, #328]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 800423e:	4313      	orrs	r3, r2
 8004240:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004242:	e03a      	b.n	80042ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d020      	beq.n	800428e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800424c:	4b4f      	ldr	r3, [pc, #316]	; (800438c <HAL_RCC_OscConfig+0x2b0>)
 800424e:	2201      	movs	r2, #1
 8004250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004252:	f7fe fadd 	bl	8002810 <HAL_GetTick>
 8004256:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004258:	e008      	b.n	800426c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800425a:	f7fe fad9 	bl	8002810 <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	2b02      	cmp	r3, #2
 8004266:	d901      	bls.n	800426c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e1a5      	b.n	80045b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800426c:	4b46      	ldr	r3, [pc, #280]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	2b00      	cmp	r3, #0
 8004276:	d0f0      	beq.n	800425a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004278:	4b43      	ldr	r3, [pc, #268]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	00db      	lsls	r3, r3, #3
 8004286:	4940      	ldr	r1, [pc, #256]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004288:	4313      	orrs	r3, r2
 800428a:	600b      	str	r3, [r1, #0]
 800428c:	e015      	b.n	80042ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800428e:	4b3f      	ldr	r3, [pc, #252]	; (800438c <HAL_RCC_OscConfig+0x2b0>)
 8004290:	2200      	movs	r2, #0
 8004292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004294:	f7fe fabc 	bl	8002810 <HAL_GetTick>
 8004298:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800429a:	e008      	b.n	80042ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800429c:	f7fe fab8 	bl	8002810 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e184      	b.n	80045b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042ae:	4b36      	ldr	r3, [pc, #216]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1f0      	bne.n	800429c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0308 	and.w	r3, r3, #8
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d030      	beq.n	8004328 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d016      	beq.n	80042fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042ce:	4b30      	ldr	r3, [pc, #192]	; (8004390 <HAL_RCC_OscConfig+0x2b4>)
 80042d0:	2201      	movs	r2, #1
 80042d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d4:	f7fe fa9c 	bl	8002810 <HAL_GetTick>
 80042d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042da:	e008      	b.n	80042ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042dc:	f7fe fa98 	bl	8002810 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e164      	b.n	80045b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042ee:	4b26      	ldr	r3, [pc, #152]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 80042f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d0f0      	beq.n	80042dc <HAL_RCC_OscConfig+0x200>
 80042fa:	e015      	b.n	8004328 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042fc:	4b24      	ldr	r3, [pc, #144]	; (8004390 <HAL_RCC_OscConfig+0x2b4>)
 80042fe:	2200      	movs	r2, #0
 8004300:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004302:	f7fe fa85 	bl	8002810 <HAL_GetTick>
 8004306:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004308:	e008      	b.n	800431c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800430a:	f7fe fa81 	bl	8002810 <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	2b02      	cmp	r3, #2
 8004316:	d901      	bls.n	800431c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e14d      	b.n	80045b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800431c:	4b1a      	ldr	r3, [pc, #104]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 800431e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1f0      	bne.n	800430a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0304 	and.w	r3, r3, #4
 8004330:	2b00      	cmp	r3, #0
 8004332:	f000 80a0 	beq.w	8004476 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004336:	2300      	movs	r3, #0
 8004338:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800433a:	4b13      	ldr	r3, [pc, #76]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 800433c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10f      	bne.n	8004366 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004346:	2300      	movs	r3, #0
 8004348:	60bb      	str	r3, [r7, #8]
 800434a:	4b0f      	ldr	r3, [pc, #60]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 800434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434e:	4a0e      	ldr	r2, [pc, #56]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004354:	6413      	str	r3, [r2, #64]	; 0x40
 8004356:	4b0c      	ldr	r3, [pc, #48]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800435e:	60bb      	str	r3, [r7, #8]
 8004360:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004362:	2301      	movs	r3, #1
 8004364:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004366:	4b0b      	ldr	r3, [pc, #44]	; (8004394 <HAL_RCC_OscConfig+0x2b8>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800436e:	2b00      	cmp	r3, #0
 8004370:	d121      	bne.n	80043b6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004372:	4b08      	ldr	r3, [pc, #32]	; (8004394 <HAL_RCC_OscConfig+0x2b8>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a07      	ldr	r2, [pc, #28]	; (8004394 <HAL_RCC_OscConfig+0x2b8>)
 8004378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800437c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800437e:	f7fe fa47 	bl	8002810 <HAL_GetTick>
 8004382:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004384:	e011      	b.n	80043aa <HAL_RCC_OscConfig+0x2ce>
 8004386:	bf00      	nop
 8004388:	40023800 	.word	0x40023800
 800438c:	42470000 	.word	0x42470000
 8004390:	42470e80 	.word	0x42470e80
 8004394:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004398:	f7fe fa3a 	bl	8002810 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e106      	b.n	80045b8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043aa:	4b85      	ldr	r3, [pc, #532]	; (80045c0 <HAL_RCC_OscConfig+0x4e4>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d0f0      	beq.n	8004398 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d106      	bne.n	80043cc <HAL_RCC_OscConfig+0x2f0>
 80043be:	4b81      	ldr	r3, [pc, #516]	; (80045c4 <HAL_RCC_OscConfig+0x4e8>)
 80043c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c2:	4a80      	ldr	r2, [pc, #512]	; (80045c4 <HAL_RCC_OscConfig+0x4e8>)
 80043c4:	f043 0301 	orr.w	r3, r3, #1
 80043c8:	6713      	str	r3, [r2, #112]	; 0x70
 80043ca:	e01c      	b.n	8004406 <HAL_RCC_OscConfig+0x32a>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	2b05      	cmp	r3, #5
 80043d2:	d10c      	bne.n	80043ee <HAL_RCC_OscConfig+0x312>
 80043d4:	4b7b      	ldr	r3, [pc, #492]	; (80045c4 <HAL_RCC_OscConfig+0x4e8>)
 80043d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d8:	4a7a      	ldr	r2, [pc, #488]	; (80045c4 <HAL_RCC_OscConfig+0x4e8>)
 80043da:	f043 0304 	orr.w	r3, r3, #4
 80043de:	6713      	str	r3, [r2, #112]	; 0x70
 80043e0:	4b78      	ldr	r3, [pc, #480]	; (80045c4 <HAL_RCC_OscConfig+0x4e8>)
 80043e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e4:	4a77      	ldr	r2, [pc, #476]	; (80045c4 <HAL_RCC_OscConfig+0x4e8>)
 80043e6:	f043 0301 	orr.w	r3, r3, #1
 80043ea:	6713      	str	r3, [r2, #112]	; 0x70
 80043ec:	e00b      	b.n	8004406 <HAL_RCC_OscConfig+0x32a>
 80043ee:	4b75      	ldr	r3, [pc, #468]	; (80045c4 <HAL_RCC_OscConfig+0x4e8>)
 80043f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f2:	4a74      	ldr	r2, [pc, #464]	; (80045c4 <HAL_RCC_OscConfig+0x4e8>)
 80043f4:	f023 0301 	bic.w	r3, r3, #1
 80043f8:	6713      	str	r3, [r2, #112]	; 0x70
 80043fa:	4b72      	ldr	r3, [pc, #456]	; (80045c4 <HAL_RCC_OscConfig+0x4e8>)
 80043fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043fe:	4a71      	ldr	r2, [pc, #452]	; (80045c4 <HAL_RCC_OscConfig+0x4e8>)
 8004400:	f023 0304 	bic.w	r3, r3, #4
 8004404:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d015      	beq.n	800443a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800440e:	f7fe f9ff 	bl	8002810 <HAL_GetTick>
 8004412:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004414:	e00a      	b.n	800442c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004416:	f7fe f9fb 	bl	8002810 <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	f241 3288 	movw	r2, #5000	; 0x1388
 8004424:	4293      	cmp	r3, r2
 8004426:	d901      	bls.n	800442c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e0c5      	b.n	80045b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800442c:	4b65      	ldr	r3, [pc, #404]	; (80045c4 <HAL_RCC_OscConfig+0x4e8>)
 800442e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	2b00      	cmp	r3, #0
 8004436:	d0ee      	beq.n	8004416 <HAL_RCC_OscConfig+0x33a>
 8004438:	e014      	b.n	8004464 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800443a:	f7fe f9e9 	bl	8002810 <HAL_GetTick>
 800443e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004440:	e00a      	b.n	8004458 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004442:	f7fe f9e5 	bl	8002810 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004450:	4293      	cmp	r3, r2
 8004452:	d901      	bls.n	8004458 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e0af      	b.n	80045b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004458:	4b5a      	ldr	r3, [pc, #360]	; (80045c4 <HAL_RCC_OscConfig+0x4e8>)
 800445a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1ee      	bne.n	8004442 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004464:	7dfb      	ldrb	r3, [r7, #23]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d105      	bne.n	8004476 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800446a:	4b56      	ldr	r3, [pc, #344]	; (80045c4 <HAL_RCC_OscConfig+0x4e8>)
 800446c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446e:	4a55      	ldr	r2, [pc, #340]	; (80045c4 <HAL_RCC_OscConfig+0x4e8>)
 8004470:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004474:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	2b00      	cmp	r3, #0
 800447c:	f000 809b 	beq.w	80045b6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004480:	4b50      	ldr	r3, [pc, #320]	; (80045c4 <HAL_RCC_OscConfig+0x4e8>)
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f003 030c 	and.w	r3, r3, #12
 8004488:	2b08      	cmp	r3, #8
 800448a:	d05c      	beq.n	8004546 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	2b02      	cmp	r3, #2
 8004492:	d141      	bne.n	8004518 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004494:	4b4c      	ldr	r3, [pc, #304]	; (80045c8 <HAL_RCC_OscConfig+0x4ec>)
 8004496:	2200      	movs	r2, #0
 8004498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800449a:	f7fe f9b9 	bl	8002810 <HAL_GetTick>
 800449e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044a0:	e008      	b.n	80044b4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044a2:	f7fe f9b5 	bl	8002810 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d901      	bls.n	80044b4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e081      	b.n	80045b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044b4:	4b43      	ldr	r3, [pc, #268]	; (80045c4 <HAL_RCC_OscConfig+0x4e8>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1f0      	bne.n	80044a2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	69da      	ldr	r2, [r3, #28]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	431a      	orrs	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ce:	019b      	lsls	r3, r3, #6
 80044d0:	431a      	orrs	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d6:	085b      	lsrs	r3, r3, #1
 80044d8:	3b01      	subs	r3, #1
 80044da:	041b      	lsls	r3, r3, #16
 80044dc:	431a      	orrs	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e2:	061b      	lsls	r3, r3, #24
 80044e4:	4937      	ldr	r1, [pc, #220]	; (80045c4 <HAL_RCC_OscConfig+0x4e8>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044ea:	4b37      	ldr	r3, [pc, #220]	; (80045c8 <HAL_RCC_OscConfig+0x4ec>)
 80044ec:	2201      	movs	r2, #1
 80044ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044f0:	f7fe f98e 	bl	8002810 <HAL_GetTick>
 80044f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044f6:	e008      	b.n	800450a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044f8:	f7fe f98a 	bl	8002810 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	2b02      	cmp	r3, #2
 8004504:	d901      	bls.n	800450a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e056      	b.n	80045b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800450a:	4b2e      	ldr	r3, [pc, #184]	; (80045c4 <HAL_RCC_OscConfig+0x4e8>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d0f0      	beq.n	80044f8 <HAL_RCC_OscConfig+0x41c>
 8004516:	e04e      	b.n	80045b6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004518:	4b2b      	ldr	r3, [pc, #172]	; (80045c8 <HAL_RCC_OscConfig+0x4ec>)
 800451a:	2200      	movs	r2, #0
 800451c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800451e:	f7fe f977 	bl	8002810 <HAL_GetTick>
 8004522:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004524:	e008      	b.n	8004538 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004526:	f7fe f973 	bl	8002810 <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	2b02      	cmp	r3, #2
 8004532:	d901      	bls.n	8004538 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e03f      	b.n	80045b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004538:	4b22      	ldr	r3, [pc, #136]	; (80045c4 <HAL_RCC_OscConfig+0x4e8>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1f0      	bne.n	8004526 <HAL_RCC_OscConfig+0x44a>
 8004544:	e037      	b.n	80045b6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d101      	bne.n	8004552 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e032      	b.n	80045b8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004552:	4b1c      	ldr	r3, [pc, #112]	; (80045c4 <HAL_RCC_OscConfig+0x4e8>)
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d028      	beq.n	80045b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800456a:	429a      	cmp	r2, r3
 800456c:	d121      	bne.n	80045b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004578:	429a      	cmp	r2, r3
 800457a:	d11a      	bne.n	80045b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004582:	4013      	ands	r3, r2
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004588:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800458a:	4293      	cmp	r3, r2
 800458c:	d111      	bne.n	80045b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004598:	085b      	lsrs	r3, r3, #1
 800459a:	3b01      	subs	r3, #1
 800459c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800459e:	429a      	cmp	r2, r3
 80045a0:	d107      	bne.n	80045b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ac:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d001      	beq.n	80045b6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e000      	b.n	80045b8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3718      	adds	r7, #24
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	40007000 	.word	0x40007000
 80045c4:	40023800 	.word	0x40023800
 80045c8:	42470060 	.word	0x42470060

080045cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d101      	bne.n	80045e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e0cc      	b.n	800477a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045e0:	4b68      	ldr	r3, [pc, #416]	; (8004784 <HAL_RCC_ClockConfig+0x1b8>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0307 	and.w	r3, r3, #7
 80045e8:	683a      	ldr	r2, [r7, #0]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d90c      	bls.n	8004608 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ee:	4b65      	ldr	r3, [pc, #404]	; (8004784 <HAL_RCC_ClockConfig+0x1b8>)
 80045f0:	683a      	ldr	r2, [r7, #0]
 80045f2:	b2d2      	uxtb	r2, r2
 80045f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045f6:	4b63      	ldr	r3, [pc, #396]	; (8004784 <HAL_RCC_ClockConfig+0x1b8>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0307 	and.w	r3, r3, #7
 80045fe:	683a      	ldr	r2, [r7, #0]
 8004600:	429a      	cmp	r2, r3
 8004602:	d001      	beq.n	8004608 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e0b8      	b.n	800477a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0302 	and.w	r3, r3, #2
 8004610:	2b00      	cmp	r3, #0
 8004612:	d020      	beq.n	8004656 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0304 	and.w	r3, r3, #4
 800461c:	2b00      	cmp	r3, #0
 800461e:	d005      	beq.n	800462c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004620:	4b59      	ldr	r3, [pc, #356]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	4a58      	ldr	r2, [pc, #352]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 8004626:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800462a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0308 	and.w	r3, r3, #8
 8004634:	2b00      	cmp	r3, #0
 8004636:	d005      	beq.n	8004644 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004638:	4b53      	ldr	r3, [pc, #332]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	4a52      	ldr	r2, [pc, #328]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 800463e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004642:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004644:	4b50      	ldr	r3, [pc, #320]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	494d      	ldr	r1, [pc, #308]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 8004652:	4313      	orrs	r3, r2
 8004654:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	2b00      	cmp	r3, #0
 8004660:	d044      	beq.n	80046ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d107      	bne.n	800467a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800466a:	4b47      	ldr	r3, [pc, #284]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d119      	bne.n	80046aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e07f      	b.n	800477a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	2b02      	cmp	r3, #2
 8004680:	d003      	beq.n	800468a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004686:	2b03      	cmp	r3, #3
 8004688:	d107      	bne.n	800469a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800468a:	4b3f      	ldr	r3, [pc, #252]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d109      	bne.n	80046aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e06f      	b.n	800477a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800469a:	4b3b      	ldr	r3, [pc, #236]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0302 	and.w	r3, r3, #2
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d101      	bne.n	80046aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e067      	b.n	800477a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046aa:	4b37      	ldr	r3, [pc, #220]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f023 0203 	bic.w	r2, r3, #3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	4934      	ldr	r1, [pc, #208]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046bc:	f7fe f8a8 	bl	8002810 <HAL_GetTick>
 80046c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046c2:	e00a      	b.n	80046da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046c4:	f7fe f8a4 	bl	8002810 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d901      	bls.n	80046da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e04f      	b.n	800477a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046da:	4b2b      	ldr	r3, [pc, #172]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f003 020c 	and.w	r2, r3, #12
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d1eb      	bne.n	80046c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046ec:	4b25      	ldr	r3, [pc, #148]	; (8004784 <HAL_RCC_ClockConfig+0x1b8>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0307 	and.w	r3, r3, #7
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d20c      	bcs.n	8004714 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046fa:	4b22      	ldr	r3, [pc, #136]	; (8004784 <HAL_RCC_ClockConfig+0x1b8>)
 80046fc:	683a      	ldr	r2, [r7, #0]
 80046fe:	b2d2      	uxtb	r2, r2
 8004700:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004702:	4b20      	ldr	r3, [pc, #128]	; (8004784 <HAL_RCC_ClockConfig+0x1b8>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0307 	and.w	r3, r3, #7
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	429a      	cmp	r2, r3
 800470e:	d001      	beq.n	8004714 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e032      	b.n	800477a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0304 	and.w	r3, r3, #4
 800471c:	2b00      	cmp	r3, #0
 800471e:	d008      	beq.n	8004732 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004720:	4b19      	ldr	r3, [pc, #100]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	4916      	ldr	r1, [pc, #88]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 800472e:	4313      	orrs	r3, r2
 8004730:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0308 	and.w	r3, r3, #8
 800473a:	2b00      	cmp	r3, #0
 800473c:	d009      	beq.n	8004752 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800473e:	4b12      	ldr	r3, [pc, #72]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	00db      	lsls	r3, r3, #3
 800474c:	490e      	ldr	r1, [pc, #56]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 800474e:	4313      	orrs	r3, r2
 8004750:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004752:	f000 f821 	bl	8004798 <HAL_RCC_GetSysClockFreq>
 8004756:	4602      	mov	r2, r0
 8004758:	4b0b      	ldr	r3, [pc, #44]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	091b      	lsrs	r3, r3, #4
 800475e:	f003 030f 	and.w	r3, r3, #15
 8004762:	490a      	ldr	r1, [pc, #40]	; (800478c <HAL_RCC_ClockConfig+0x1c0>)
 8004764:	5ccb      	ldrb	r3, [r1, r3]
 8004766:	fa22 f303 	lsr.w	r3, r2, r3
 800476a:	4a09      	ldr	r2, [pc, #36]	; (8004790 <HAL_RCC_ClockConfig+0x1c4>)
 800476c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800476e:	4b09      	ldr	r3, [pc, #36]	; (8004794 <HAL_RCC_ClockConfig+0x1c8>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4618      	mov	r0, r3
 8004774:	f7fe f808 	bl	8002788 <HAL_InitTick>

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3710      	adds	r7, #16
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	40023c00 	.word	0x40023c00
 8004788:	40023800 	.word	0x40023800
 800478c:	08008568 	.word	0x08008568
 8004790:	20000014 	.word	0x20000014
 8004794:	20000018 	.word	0x20000018

08004798 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004798:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800479c:	b084      	sub	sp, #16
 800479e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80047a0:	2300      	movs	r3, #0
 80047a2:	607b      	str	r3, [r7, #4]
 80047a4:	2300      	movs	r3, #0
 80047a6:	60fb      	str	r3, [r7, #12]
 80047a8:	2300      	movs	r3, #0
 80047aa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80047ac:	2300      	movs	r3, #0
 80047ae:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047b0:	4b67      	ldr	r3, [pc, #412]	; (8004950 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f003 030c 	and.w	r3, r3, #12
 80047b8:	2b08      	cmp	r3, #8
 80047ba:	d00d      	beq.n	80047d8 <HAL_RCC_GetSysClockFreq+0x40>
 80047bc:	2b08      	cmp	r3, #8
 80047be:	f200 80bd 	bhi.w	800493c <HAL_RCC_GetSysClockFreq+0x1a4>
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d002      	beq.n	80047cc <HAL_RCC_GetSysClockFreq+0x34>
 80047c6:	2b04      	cmp	r3, #4
 80047c8:	d003      	beq.n	80047d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80047ca:	e0b7      	b.n	800493c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047cc:	4b61      	ldr	r3, [pc, #388]	; (8004954 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80047ce:	60bb      	str	r3, [r7, #8]
       break;
 80047d0:	e0b7      	b.n	8004942 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047d2:	4b61      	ldr	r3, [pc, #388]	; (8004958 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80047d4:	60bb      	str	r3, [r7, #8]
      break;
 80047d6:	e0b4      	b.n	8004942 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047d8:	4b5d      	ldr	r3, [pc, #372]	; (8004950 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047e0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047e2:	4b5b      	ldr	r3, [pc, #364]	; (8004950 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d04d      	beq.n	800488a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047ee:	4b58      	ldr	r3, [pc, #352]	; (8004950 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	099b      	lsrs	r3, r3, #6
 80047f4:	461a      	mov	r2, r3
 80047f6:	f04f 0300 	mov.w	r3, #0
 80047fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80047fe:	f04f 0100 	mov.w	r1, #0
 8004802:	ea02 0800 	and.w	r8, r2, r0
 8004806:	ea03 0901 	and.w	r9, r3, r1
 800480a:	4640      	mov	r0, r8
 800480c:	4649      	mov	r1, r9
 800480e:	f04f 0200 	mov.w	r2, #0
 8004812:	f04f 0300 	mov.w	r3, #0
 8004816:	014b      	lsls	r3, r1, #5
 8004818:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800481c:	0142      	lsls	r2, r0, #5
 800481e:	4610      	mov	r0, r2
 8004820:	4619      	mov	r1, r3
 8004822:	ebb0 0008 	subs.w	r0, r0, r8
 8004826:	eb61 0109 	sbc.w	r1, r1, r9
 800482a:	f04f 0200 	mov.w	r2, #0
 800482e:	f04f 0300 	mov.w	r3, #0
 8004832:	018b      	lsls	r3, r1, #6
 8004834:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004838:	0182      	lsls	r2, r0, #6
 800483a:	1a12      	subs	r2, r2, r0
 800483c:	eb63 0301 	sbc.w	r3, r3, r1
 8004840:	f04f 0000 	mov.w	r0, #0
 8004844:	f04f 0100 	mov.w	r1, #0
 8004848:	00d9      	lsls	r1, r3, #3
 800484a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800484e:	00d0      	lsls	r0, r2, #3
 8004850:	4602      	mov	r2, r0
 8004852:	460b      	mov	r3, r1
 8004854:	eb12 0208 	adds.w	r2, r2, r8
 8004858:	eb43 0309 	adc.w	r3, r3, r9
 800485c:	f04f 0000 	mov.w	r0, #0
 8004860:	f04f 0100 	mov.w	r1, #0
 8004864:	0259      	lsls	r1, r3, #9
 8004866:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800486a:	0250      	lsls	r0, r2, #9
 800486c:	4602      	mov	r2, r0
 800486e:	460b      	mov	r3, r1
 8004870:	4610      	mov	r0, r2
 8004872:	4619      	mov	r1, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	461a      	mov	r2, r3
 8004878:	f04f 0300 	mov.w	r3, #0
 800487c:	f7fc f98c 	bl	8000b98 <__aeabi_uldivmod>
 8004880:	4602      	mov	r2, r0
 8004882:	460b      	mov	r3, r1
 8004884:	4613      	mov	r3, r2
 8004886:	60fb      	str	r3, [r7, #12]
 8004888:	e04a      	b.n	8004920 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800488a:	4b31      	ldr	r3, [pc, #196]	; (8004950 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	099b      	lsrs	r3, r3, #6
 8004890:	461a      	mov	r2, r3
 8004892:	f04f 0300 	mov.w	r3, #0
 8004896:	f240 10ff 	movw	r0, #511	; 0x1ff
 800489a:	f04f 0100 	mov.w	r1, #0
 800489e:	ea02 0400 	and.w	r4, r2, r0
 80048a2:	ea03 0501 	and.w	r5, r3, r1
 80048a6:	4620      	mov	r0, r4
 80048a8:	4629      	mov	r1, r5
 80048aa:	f04f 0200 	mov.w	r2, #0
 80048ae:	f04f 0300 	mov.w	r3, #0
 80048b2:	014b      	lsls	r3, r1, #5
 80048b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80048b8:	0142      	lsls	r2, r0, #5
 80048ba:	4610      	mov	r0, r2
 80048bc:	4619      	mov	r1, r3
 80048be:	1b00      	subs	r0, r0, r4
 80048c0:	eb61 0105 	sbc.w	r1, r1, r5
 80048c4:	f04f 0200 	mov.w	r2, #0
 80048c8:	f04f 0300 	mov.w	r3, #0
 80048cc:	018b      	lsls	r3, r1, #6
 80048ce:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80048d2:	0182      	lsls	r2, r0, #6
 80048d4:	1a12      	subs	r2, r2, r0
 80048d6:	eb63 0301 	sbc.w	r3, r3, r1
 80048da:	f04f 0000 	mov.w	r0, #0
 80048de:	f04f 0100 	mov.w	r1, #0
 80048e2:	00d9      	lsls	r1, r3, #3
 80048e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80048e8:	00d0      	lsls	r0, r2, #3
 80048ea:	4602      	mov	r2, r0
 80048ec:	460b      	mov	r3, r1
 80048ee:	1912      	adds	r2, r2, r4
 80048f0:	eb45 0303 	adc.w	r3, r5, r3
 80048f4:	f04f 0000 	mov.w	r0, #0
 80048f8:	f04f 0100 	mov.w	r1, #0
 80048fc:	0299      	lsls	r1, r3, #10
 80048fe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004902:	0290      	lsls	r0, r2, #10
 8004904:	4602      	mov	r2, r0
 8004906:	460b      	mov	r3, r1
 8004908:	4610      	mov	r0, r2
 800490a:	4619      	mov	r1, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	461a      	mov	r2, r3
 8004910:	f04f 0300 	mov.w	r3, #0
 8004914:	f7fc f940 	bl	8000b98 <__aeabi_uldivmod>
 8004918:	4602      	mov	r2, r0
 800491a:	460b      	mov	r3, r1
 800491c:	4613      	mov	r3, r2
 800491e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004920:	4b0b      	ldr	r3, [pc, #44]	; (8004950 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	0c1b      	lsrs	r3, r3, #16
 8004926:	f003 0303 	and.w	r3, r3, #3
 800492a:	3301      	adds	r3, #1
 800492c:	005b      	lsls	r3, r3, #1
 800492e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	fbb2 f3f3 	udiv	r3, r2, r3
 8004938:	60bb      	str	r3, [r7, #8]
      break;
 800493a:	e002      	b.n	8004942 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800493c:	4b05      	ldr	r3, [pc, #20]	; (8004954 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800493e:	60bb      	str	r3, [r7, #8]
      break;
 8004940:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004942:	68bb      	ldr	r3, [r7, #8]
}
 8004944:	4618      	mov	r0, r3
 8004946:	3710      	adds	r7, #16
 8004948:	46bd      	mov	sp, r7
 800494a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800494e:	bf00      	nop
 8004950:	40023800 	.word	0x40023800
 8004954:	00f42400 	.word	0x00f42400
 8004958:	007a1200 	.word	0x007a1200

0800495c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800495c:	b480      	push	{r7}
 800495e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004960:	4b03      	ldr	r3, [pc, #12]	; (8004970 <HAL_RCC_GetHCLKFreq+0x14>)
 8004962:	681b      	ldr	r3, [r3, #0]
}
 8004964:	4618      	mov	r0, r3
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	20000014 	.word	0x20000014

08004974 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004978:	f7ff fff0 	bl	800495c <HAL_RCC_GetHCLKFreq>
 800497c:	4602      	mov	r2, r0
 800497e:	4b05      	ldr	r3, [pc, #20]	; (8004994 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	0a9b      	lsrs	r3, r3, #10
 8004984:	f003 0307 	and.w	r3, r3, #7
 8004988:	4903      	ldr	r1, [pc, #12]	; (8004998 <HAL_RCC_GetPCLK1Freq+0x24>)
 800498a:	5ccb      	ldrb	r3, [r1, r3]
 800498c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004990:	4618      	mov	r0, r3
 8004992:	bd80      	pop	{r7, pc}
 8004994:	40023800 	.word	0x40023800
 8004998:	08008578 	.word	0x08008578

0800499c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d101      	bne.n	80049ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e07b      	b.n	8004aa6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d108      	bne.n	80049c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049be:	d009      	beq.n	80049d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	61da      	str	r2, [r3, #28]
 80049c6:	e005      	b.n	80049d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d106      	bne.n	80049f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f7fd fd22 	bl	8002438 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2202      	movs	r2, #2
 80049f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a0a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a1c:	431a      	orrs	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a26:	431a      	orrs	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	f003 0302 	and.w	r3, r3, #2
 8004a30:	431a      	orrs	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	431a      	orrs	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	699b      	ldr	r3, [r3, #24]
 8004a40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a44:	431a      	orrs	r2, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	69db      	ldr	r3, [r3, #28]
 8004a4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a4e:	431a      	orrs	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a1b      	ldr	r3, [r3, #32]
 8004a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a58:	ea42 0103 	orr.w	r1, r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a60:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	0c1b      	lsrs	r3, r3, #16
 8004a72:	f003 0104 	and.w	r1, r3, #4
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7a:	f003 0210 	and.w	r2, r3, #16
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	430a      	orrs	r2, r1
 8004a84:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	69da      	ldr	r2, [r3, #28]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a94:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3708      	adds	r7, #8
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}

08004aae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004aae:	b580      	push	{r7, lr}
 8004ab0:	b088      	sub	sp, #32
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	60f8      	str	r0, [r7, #12]
 8004ab6:	60b9      	str	r1, [r7, #8]
 8004ab8:	603b      	str	r3, [r7, #0]
 8004aba:	4613      	mov	r3, r2
 8004abc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d101      	bne.n	8004ad0 <HAL_SPI_Transmit+0x22>
 8004acc:	2302      	movs	r3, #2
 8004ace:	e126      	b.n	8004d1e <HAL_SPI_Transmit+0x270>
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ad8:	f7fd fe9a 	bl	8002810 <HAL_GetTick>
 8004adc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004ade:	88fb      	ldrh	r3, [r7, #6]
 8004ae0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d002      	beq.n	8004af4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004aee:	2302      	movs	r3, #2
 8004af0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004af2:	e10b      	b.n	8004d0c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d002      	beq.n	8004b00 <HAL_SPI_Transmit+0x52>
 8004afa:	88fb      	ldrh	r3, [r7, #6]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d102      	bne.n	8004b06 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b04:	e102      	b.n	8004d0c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2203      	movs	r2, #3
 8004b0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	68ba      	ldr	r2, [r7, #8]
 8004b18:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	88fa      	ldrh	r2, [r7, #6]
 8004b1e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	88fa      	ldrh	r2, [r7, #6]
 8004b24:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b4c:	d10f      	bne.n	8004b6e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b5c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b6c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b78:	2b40      	cmp	r3, #64	; 0x40
 8004b7a:	d007      	beq.n	8004b8c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b8a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b94:	d14b      	bne.n	8004c2e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d002      	beq.n	8004ba4 <HAL_SPI_Transmit+0xf6>
 8004b9e:	8afb      	ldrh	r3, [r7, #22]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d13e      	bne.n	8004c22 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba8:	881a      	ldrh	r2, [r3, #0]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb4:	1c9a      	adds	r2, r3, #2
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004bc8:	e02b      	b.n	8004c22 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	f003 0302 	and.w	r3, r3, #2
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d112      	bne.n	8004bfe <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bdc:	881a      	ldrh	r2, [r3, #0]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be8:	1c9a      	adds	r2, r3, #2
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	3b01      	subs	r3, #1
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	86da      	strh	r2, [r3, #54]	; 0x36
 8004bfc:	e011      	b.n	8004c22 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bfe:	f7fd fe07 	bl	8002810 <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	683a      	ldr	r2, [r7, #0]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d803      	bhi.n	8004c16 <HAL_SPI_Transmit+0x168>
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c14:	d102      	bne.n	8004c1c <HAL_SPI_Transmit+0x16e>
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d102      	bne.n	8004c22 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c20:	e074      	b.n	8004d0c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1ce      	bne.n	8004bca <HAL_SPI_Transmit+0x11c>
 8004c2c:	e04c      	b.n	8004cc8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d002      	beq.n	8004c3c <HAL_SPI_Transmit+0x18e>
 8004c36:	8afb      	ldrh	r3, [r7, #22]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d140      	bne.n	8004cbe <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	330c      	adds	r3, #12
 8004c46:	7812      	ldrb	r2, [r2, #0]
 8004c48:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4e:	1c5a      	adds	r2, r3, #1
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	b29a      	uxth	r2, r3
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004c62:	e02c      	b.n	8004cbe <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f003 0302 	and.w	r3, r3, #2
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d113      	bne.n	8004c9a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	330c      	adds	r3, #12
 8004c7c:	7812      	ldrb	r2, [r2, #0]
 8004c7e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c84:	1c5a      	adds	r2, r3, #1
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	3b01      	subs	r3, #1
 8004c92:	b29a      	uxth	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	86da      	strh	r2, [r3, #54]	; 0x36
 8004c98:	e011      	b.n	8004cbe <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c9a:	f7fd fdb9 	bl	8002810 <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	683a      	ldr	r2, [r7, #0]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d803      	bhi.n	8004cb2 <HAL_SPI_Transmit+0x204>
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb0:	d102      	bne.n	8004cb8 <HAL_SPI_Transmit+0x20a>
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d102      	bne.n	8004cbe <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004cbc:	e026      	b.n	8004d0c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1cd      	bne.n	8004c64 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004cc8:	69ba      	ldr	r2, [r7, #24]
 8004cca:	6839      	ldr	r1, [r7, #0]
 8004ccc:	68f8      	ldr	r0, [r7, #12]
 8004cce:	f000 fbcb 	bl	8005468 <SPI_EndRxTxTransaction>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d002      	beq.n	8004cde <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2220      	movs	r2, #32
 8004cdc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d10a      	bne.n	8004cfc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	613b      	str	r3, [r7, #16]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	613b      	str	r3, [r7, #16]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	613b      	str	r3, [r7, #16]
 8004cfa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d002      	beq.n	8004d0a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	77fb      	strb	r3, [r7, #31]
 8004d08:	e000      	b.n	8004d0c <HAL_SPI_Transmit+0x25e>
  }

error:
 8004d0a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d1c:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3720      	adds	r7, #32
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}

08004d26 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d26:	b580      	push	{r7, lr}
 8004d28:	b088      	sub	sp, #32
 8004d2a:	af02      	add	r7, sp, #8
 8004d2c:	60f8      	str	r0, [r7, #12]
 8004d2e:	60b9      	str	r1, [r7, #8]
 8004d30:	603b      	str	r3, [r7, #0]
 8004d32:	4613      	mov	r3, r2
 8004d34:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d36:	2300      	movs	r3, #0
 8004d38:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d42:	d112      	bne.n	8004d6a <HAL_SPI_Receive+0x44>
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d10e      	bne.n	8004d6a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2204      	movs	r2, #4
 8004d50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004d54:	88fa      	ldrh	r2, [r7, #6]
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	9300      	str	r3, [sp, #0]
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	68ba      	ldr	r2, [r7, #8]
 8004d5e:	68b9      	ldr	r1, [r7, #8]
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	f000 f8f1 	bl	8004f48 <HAL_SPI_TransmitReceive>
 8004d66:	4603      	mov	r3, r0
 8004d68:	e0ea      	b.n	8004f40 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d101      	bne.n	8004d78 <HAL_SPI_Receive+0x52>
 8004d74:	2302      	movs	r3, #2
 8004d76:	e0e3      	b.n	8004f40 <HAL_SPI_Receive+0x21a>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d80:	f7fd fd46 	bl	8002810 <HAL_GetTick>
 8004d84:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d002      	beq.n	8004d98 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004d92:	2302      	movs	r3, #2
 8004d94:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d96:	e0ca      	b.n	8004f2e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d002      	beq.n	8004da4 <HAL_SPI_Receive+0x7e>
 8004d9e:	88fb      	ldrh	r3, [r7, #6]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d102      	bne.n	8004daa <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004da8:	e0c1      	b.n	8004f2e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2204      	movs	r2, #4
 8004dae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	68ba      	ldr	r2, [r7, #8]
 8004dbc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	88fa      	ldrh	r2, [r7, #6]
 8004dc2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	88fa      	ldrh	r2, [r7, #6]
 8004dc8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004df0:	d10f      	bne.n	8004e12 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e00:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004e10:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e1c:	2b40      	cmp	r3, #64	; 0x40
 8004e1e:	d007      	beq.n	8004e30 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e2e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d162      	bne.n	8004efe <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004e38:	e02e      	b.n	8004e98 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f003 0301 	and.w	r3, r3, #1
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d115      	bne.n	8004e74 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f103 020c 	add.w	r2, r3, #12
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e54:	7812      	ldrb	r2, [r2, #0]
 8004e56:	b2d2      	uxtb	r2, r2
 8004e58:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5e:	1c5a      	adds	r2, r3, #1
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e72:	e011      	b.n	8004e98 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e74:	f7fd fccc 	bl	8002810 <HAL_GetTick>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	683a      	ldr	r2, [r7, #0]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d803      	bhi.n	8004e8c <HAL_SPI_Receive+0x166>
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e8a:	d102      	bne.n	8004e92 <HAL_SPI_Receive+0x16c>
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d102      	bne.n	8004e98 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004e96:	e04a      	b.n	8004f2e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1cb      	bne.n	8004e3a <HAL_SPI_Receive+0x114>
 8004ea2:	e031      	b.n	8004f08 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f003 0301 	and.w	r3, r3, #1
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d113      	bne.n	8004eda <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68da      	ldr	r2, [r3, #12]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ebc:	b292      	uxth	r2, r2
 8004ebe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec4:	1c9a      	adds	r2, r3, #2
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ed8:	e011      	b.n	8004efe <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004eda:	f7fd fc99 	bl	8002810 <HAL_GetTick>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	683a      	ldr	r2, [r7, #0]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d803      	bhi.n	8004ef2 <HAL_SPI_Receive+0x1cc>
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef0:	d102      	bne.n	8004ef8 <HAL_SPI_Receive+0x1d2>
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d102      	bne.n	8004efe <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004efc:	e017      	b.n	8004f2e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d1cd      	bne.n	8004ea4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	6839      	ldr	r1, [r7, #0]
 8004f0c:	68f8      	ldr	r0, [r7, #12]
 8004f0e:	f000 fa45 	bl	800539c <SPI_EndRxTransaction>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d002      	beq.n	8004f1e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2220      	movs	r2, #32
 8004f1c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d002      	beq.n	8004f2c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	75fb      	strb	r3, [r7, #23]
 8004f2a:	e000      	b.n	8004f2e <HAL_SPI_Receive+0x208>
  }

error :
 8004f2c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3718      	adds	r7, #24
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b08c      	sub	sp, #48	; 0x30
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
 8004f54:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004f56:	2301      	movs	r3, #1
 8004f58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d101      	bne.n	8004f6e <HAL_SPI_TransmitReceive+0x26>
 8004f6a:	2302      	movs	r3, #2
 8004f6c:	e18a      	b.n	8005284 <HAL_SPI_TransmitReceive+0x33c>
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f76:	f7fd fc4b 	bl	8002810 <HAL_GetTick>
 8004f7a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004f8c:	887b      	ldrh	r3, [r7, #2]
 8004f8e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004f90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d00f      	beq.n	8004fb8 <HAL_SPI_TransmitReceive+0x70>
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f9e:	d107      	bne.n	8004fb0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d103      	bne.n	8004fb0 <HAL_SPI_TransmitReceive+0x68>
 8004fa8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004fac:	2b04      	cmp	r3, #4
 8004fae:	d003      	beq.n	8004fb8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004fb0:	2302      	movs	r3, #2
 8004fb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004fb6:	e15b      	b.n	8005270 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d005      	beq.n	8004fca <HAL_SPI_TransmitReceive+0x82>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d002      	beq.n	8004fca <HAL_SPI_TransmitReceive+0x82>
 8004fc4:	887b      	ldrh	r3, [r7, #2]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d103      	bne.n	8004fd2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004fd0:	e14e      	b.n	8005270 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	2b04      	cmp	r3, #4
 8004fdc:	d003      	beq.n	8004fe6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2205      	movs	r2, #5
 8004fe2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	887a      	ldrh	r2, [r7, #2]
 8004ff6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	887a      	ldrh	r2, [r7, #2]
 8004ffc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	68ba      	ldr	r2, [r7, #8]
 8005002:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	887a      	ldrh	r2, [r7, #2]
 8005008:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	887a      	ldrh	r2, [r7, #2]
 800500e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2200      	movs	r2, #0
 8005014:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005026:	2b40      	cmp	r3, #64	; 0x40
 8005028:	d007      	beq.n	800503a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005038:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005042:	d178      	bne.n	8005136 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d002      	beq.n	8005052 <HAL_SPI_TransmitReceive+0x10a>
 800504c:	8b7b      	ldrh	r3, [r7, #26]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d166      	bne.n	8005120 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005056:	881a      	ldrh	r2, [r3, #0]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005062:	1c9a      	adds	r2, r3, #2
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800506c:	b29b      	uxth	r3, r3
 800506e:	3b01      	subs	r3, #1
 8005070:	b29a      	uxth	r2, r3
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005076:	e053      	b.n	8005120 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f003 0302 	and.w	r3, r3, #2
 8005082:	2b02      	cmp	r3, #2
 8005084:	d11b      	bne.n	80050be <HAL_SPI_TransmitReceive+0x176>
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800508a:	b29b      	uxth	r3, r3
 800508c:	2b00      	cmp	r3, #0
 800508e:	d016      	beq.n	80050be <HAL_SPI_TransmitReceive+0x176>
 8005090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005092:	2b01      	cmp	r3, #1
 8005094:	d113      	bne.n	80050be <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509a:	881a      	ldrh	r2, [r3, #0]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a6:	1c9a      	adds	r2, r3, #2
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	3b01      	subs	r3, #1
 80050b4:	b29a      	uxth	r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80050ba:	2300      	movs	r3, #0
 80050bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f003 0301 	and.w	r3, r3, #1
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d119      	bne.n	8005100 <HAL_SPI_TransmitReceive+0x1b8>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d014      	beq.n	8005100 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68da      	ldr	r2, [r3, #12]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e0:	b292      	uxth	r2, r2
 80050e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e8:	1c9a      	adds	r2, r3, #2
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	3b01      	subs	r3, #1
 80050f6:	b29a      	uxth	r2, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80050fc:	2301      	movs	r3, #1
 80050fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005100:	f7fd fb86 	bl	8002810 <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800510c:	429a      	cmp	r2, r3
 800510e:	d807      	bhi.n	8005120 <HAL_SPI_TransmitReceive+0x1d8>
 8005110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005116:	d003      	beq.n	8005120 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800511e:	e0a7      	b.n	8005270 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005124:	b29b      	uxth	r3, r3
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1a6      	bne.n	8005078 <HAL_SPI_TransmitReceive+0x130>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800512e:	b29b      	uxth	r3, r3
 8005130:	2b00      	cmp	r3, #0
 8005132:	d1a1      	bne.n	8005078 <HAL_SPI_TransmitReceive+0x130>
 8005134:	e07c      	b.n	8005230 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d002      	beq.n	8005144 <HAL_SPI_TransmitReceive+0x1fc>
 800513e:	8b7b      	ldrh	r3, [r7, #26]
 8005140:	2b01      	cmp	r3, #1
 8005142:	d16b      	bne.n	800521c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	330c      	adds	r3, #12
 800514e:	7812      	ldrb	r2, [r2, #0]
 8005150:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005156:	1c5a      	adds	r2, r3, #1
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005160:	b29b      	uxth	r3, r3
 8005162:	3b01      	subs	r3, #1
 8005164:	b29a      	uxth	r2, r3
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800516a:	e057      	b.n	800521c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	f003 0302 	and.w	r3, r3, #2
 8005176:	2b02      	cmp	r3, #2
 8005178:	d11c      	bne.n	80051b4 <HAL_SPI_TransmitReceive+0x26c>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800517e:	b29b      	uxth	r3, r3
 8005180:	2b00      	cmp	r3, #0
 8005182:	d017      	beq.n	80051b4 <HAL_SPI_TransmitReceive+0x26c>
 8005184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005186:	2b01      	cmp	r3, #1
 8005188:	d114      	bne.n	80051b4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	330c      	adds	r3, #12
 8005194:	7812      	ldrb	r2, [r2, #0]
 8005196:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519c:	1c5a      	adds	r2, r3, #1
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	3b01      	subs	r3, #1
 80051aa:	b29a      	uxth	r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80051b0:	2300      	movs	r3, #0
 80051b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f003 0301 	and.w	r3, r3, #1
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d119      	bne.n	80051f6 <HAL_SPI_TransmitReceive+0x2ae>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d014      	beq.n	80051f6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68da      	ldr	r2, [r3, #12]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d6:	b2d2      	uxtb	r2, r2
 80051d8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051de:	1c5a      	adds	r2, r3, #1
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	3b01      	subs	r3, #1
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80051f2:	2301      	movs	r3, #1
 80051f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80051f6:	f7fd fb0b 	bl	8002810 <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005202:	429a      	cmp	r2, r3
 8005204:	d803      	bhi.n	800520e <HAL_SPI_TransmitReceive+0x2c6>
 8005206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800520c:	d102      	bne.n	8005214 <HAL_SPI_TransmitReceive+0x2cc>
 800520e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005210:	2b00      	cmp	r3, #0
 8005212:	d103      	bne.n	800521c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005214:	2303      	movs	r3, #3
 8005216:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800521a:	e029      	b.n	8005270 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005220:	b29b      	uxth	r3, r3
 8005222:	2b00      	cmp	r3, #0
 8005224:	d1a2      	bne.n	800516c <HAL_SPI_TransmitReceive+0x224>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800522a:	b29b      	uxth	r3, r3
 800522c:	2b00      	cmp	r3, #0
 800522e:	d19d      	bne.n	800516c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005232:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005234:	68f8      	ldr	r0, [r7, #12]
 8005236:	f000 f917 	bl	8005468 <SPI_EndRxTxTransaction>
 800523a:	4603      	mov	r3, r0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d006      	beq.n	800524e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2220      	movs	r2, #32
 800524a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800524c:	e010      	b.n	8005270 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d10b      	bne.n	800526e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005256:	2300      	movs	r3, #0
 8005258:	617b      	str	r3, [r7, #20]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	617b      	str	r3, [r7, #20]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	617b      	str	r3, [r7, #20]
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	e000      	b.n	8005270 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800526e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005280:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005284:	4618      	mov	r0, r3
 8005286:	3730      	adds	r7, #48	; 0x30
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b088      	sub	sp, #32
 8005290:	af00      	add	r7, sp, #0
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	603b      	str	r3, [r7, #0]
 8005298:	4613      	mov	r3, r2
 800529a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800529c:	f7fd fab8 	bl	8002810 <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a4:	1a9b      	subs	r3, r3, r2
 80052a6:	683a      	ldr	r2, [r7, #0]
 80052a8:	4413      	add	r3, r2
 80052aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80052ac:	f7fd fab0 	bl	8002810 <HAL_GetTick>
 80052b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80052b2:	4b39      	ldr	r3, [pc, #228]	; (8005398 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	015b      	lsls	r3, r3, #5
 80052b8:	0d1b      	lsrs	r3, r3, #20
 80052ba:	69fa      	ldr	r2, [r7, #28]
 80052bc:	fb02 f303 	mul.w	r3, r2, r3
 80052c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052c2:	e054      	b.n	800536e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ca:	d050      	beq.n	800536e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80052cc:	f7fd faa0 	bl	8002810 <HAL_GetTick>
 80052d0:	4602      	mov	r2, r0
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	69fa      	ldr	r2, [r7, #28]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d902      	bls.n	80052e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d13d      	bne.n	800535e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	685a      	ldr	r2, [r3, #4]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80052f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052fa:	d111      	bne.n	8005320 <SPI_WaitFlagStateUntilTimeout+0x94>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005304:	d004      	beq.n	8005310 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800530e:	d107      	bne.n	8005320 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800531e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005324:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005328:	d10f      	bne.n	800534a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005338:	601a      	str	r2, [r3, #0]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005348:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2201      	movs	r2, #1
 800534e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e017      	b.n	800538e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d101      	bne.n	8005368 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005364:	2300      	movs	r3, #0
 8005366:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	3b01      	subs	r3, #1
 800536c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	689a      	ldr	r2, [r3, #8]
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	4013      	ands	r3, r2
 8005378:	68ba      	ldr	r2, [r7, #8]
 800537a:	429a      	cmp	r2, r3
 800537c:	bf0c      	ite	eq
 800537e:	2301      	moveq	r3, #1
 8005380:	2300      	movne	r3, #0
 8005382:	b2db      	uxtb	r3, r3
 8005384:	461a      	mov	r2, r3
 8005386:	79fb      	ldrb	r3, [r7, #7]
 8005388:	429a      	cmp	r2, r3
 800538a:	d19b      	bne.n	80052c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3720      	adds	r7, #32
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	20000014 	.word	0x20000014

0800539c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b086      	sub	sp, #24
 80053a0:	af02      	add	r7, sp, #8
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053b0:	d111      	bne.n	80053d6 <SPI_EndRxTransaction+0x3a>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053ba:	d004      	beq.n	80053c6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053c4:	d107      	bne.n	80053d6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053d4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053de:	d12a      	bne.n	8005436 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053e8:	d012      	beq.n	8005410 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	9300      	str	r3, [sp, #0]
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	2200      	movs	r2, #0
 80053f2:	2180      	movs	r1, #128	; 0x80
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	f7ff ff49 	bl	800528c <SPI_WaitFlagStateUntilTimeout>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d02d      	beq.n	800545c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005404:	f043 0220 	orr.w	r2, r3, #32
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	e026      	b.n	800545e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	9300      	str	r3, [sp, #0]
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	2200      	movs	r2, #0
 8005418:	2101      	movs	r1, #1
 800541a:	68f8      	ldr	r0, [r7, #12]
 800541c:	f7ff ff36 	bl	800528c <SPI_WaitFlagStateUntilTimeout>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d01a      	beq.n	800545c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800542a:	f043 0220 	orr.w	r2, r3, #32
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e013      	b.n	800545e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	9300      	str	r3, [sp, #0]
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	2200      	movs	r2, #0
 800543e:	2101      	movs	r1, #1
 8005440:	68f8      	ldr	r0, [r7, #12]
 8005442:	f7ff ff23 	bl	800528c <SPI_WaitFlagStateUntilTimeout>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d007      	beq.n	800545c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005450:	f043 0220 	orr.w	r2, r3, #32
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e000      	b.n	800545e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	3710      	adds	r7, #16
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
	...

08005468 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b088      	sub	sp, #32
 800546c:	af02      	add	r7, sp, #8
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005474:	4b1b      	ldr	r3, [pc, #108]	; (80054e4 <SPI_EndRxTxTransaction+0x7c>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a1b      	ldr	r2, [pc, #108]	; (80054e8 <SPI_EndRxTxTransaction+0x80>)
 800547a:	fba2 2303 	umull	r2, r3, r2, r3
 800547e:	0d5b      	lsrs	r3, r3, #21
 8005480:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005484:	fb02 f303 	mul.w	r3, r2, r3
 8005488:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005492:	d112      	bne.n	80054ba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	9300      	str	r3, [sp, #0]
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	2200      	movs	r2, #0
 800549c:	2180      	movs	r1, #128	; 0x80
 800549e:	68f8      	ldr	r0, [r7, #12]
 80054a0:	f7ff fef4 	bl	800528c <SPI_WaitFlagStateUntilTimeout>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d016      	beq.n	80054d8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ae:	f043 0220 	orr.w	r2, r3, #32
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e00f      	b.n	80054da <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00a      	beq.n	80054d6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	3b01      	subs	r3, #1
 80054c4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054d0:	2b80      	cmp	r3, #128	; 0x80
 80054d2:	d0f2      	beq.n	80054ba <SPI_EndRxTxTransaction+0x52>
 80054d4:	e000      	b.n	80054d8 <SPI_EndRxTxTransaction+0x70>
        break;
 80054d6:	bf00      	nop
  }

  return HAL_OK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3718      	adds	r7, #24
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	20000014 	.word	0x20000014
 80054e8:	165e9f81 	.word	0x165e9f81

080054ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d101      	bne.n	80054fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e041      	b.n	8005582 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005504:	b2db      	uxtb	r3, r3
 8005506:	2b00      	cmp	r3, #0
 8005508:	d106      	bne.n	8005518 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f7fc ffd8 	bl	80024c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2202      	movs	r2, #2
 800551c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	3304      	adds	r3, #4
 8005528:	4619      	mov	r1, r3
 800552a:	4610      	mov	r0, r2
 800552c:	f000 fad8 	bl	8005ae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3708      	adds	r7, #8
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}

0800558a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800558a:	b580      	push	{r7, lr}
 800558c:	b082      	sub	sp, #8
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d101      	bne.n	800559c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e041      	b.n	8005620 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d106      	bne.n	80055b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 f839 	bl	8005628 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2202      	movs	r2, #2
 80055ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	3304      	adds	r3, #4
 80055c6:	4619      	mov	r1, r3
 80055c8:	4610      	mov	r0, r2
 80055ca:	f000 fa89 	bl	8005ae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2201      	movs	r2, #1
 80055d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2201      	movs	r2, #1
 80055ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2201      	movs	r2, #1
 80055f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2201      	movs	r2, #1
 80055fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2201      	movs	r2, #1
 800560a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2201      	movs	r2, #1
 8005612:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2201      	movs	r2, #1
 800561a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3708      	adds	r7, #8
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005630:	bf00      	nop
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d109      	bne.n	8005660 <HAL_TIM_PWM_Start+0x24>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005652:	b2db      	uxtb	r3, r3
 8005654:	2b01      	cmp	r3, #1
 8005656:	bf14      	ite	ne
 8005658:	2301      	movne	r3, #1
 800565a:	2300      	moveq	r3, #0
 800565c:	b2db      	uxtb	r3, r3
 800565e:	e022      	b.n	80056a6 <HAL_TIM_PWM_Start+0x6a>
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	2b04      	cmp	r3, #4
 8005664:	d109      	bne.n	800567a <HAL_TIM_PWM_Start+0x3e>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b01      	cmp	r3, #1
 8005670:	bf14      	ite	ne
 8005672:	2301      	movne	r3, #1
 8005674:	2300      	moveq	r3, #0
 8005676:	b2db      	uxtb	r3, r3
 8005678:	e015      	b.n	80056a6 <HAL_TIM_PWM_Start+0x6a>
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	2b08      	cmp	r3, #8
 800567e:	d109      	bne.n	8005694 <HAL_TIM_PWM_Start+0x58>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005686:	b2db      	uxtb	r3, r3
 8005688:	2b01      	cmp	r3, #1
 800568a:	bf14      	ite	ne
 800568c:	2301      	movne	r3, #1
 800568e:	2300      	moveq	r3, #0
 8005690:	b2db      	uxtb	r3, r3
 8005692:	e008      	b.n	80056a6 <HAL_TIM_PWM_Start+0x6a>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800569a:	b2db      	uxtb	r3, r3
 800569c:	2b01      	cmp	r3, #1
 800569e:	bf14      	ite	ne
 80056a0:	2301      	movne	r3, #1
 80056a2:	2300      	moveq	r3, #0
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d001      	beq.n	80056ae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e07c      	b.n	80057a8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d104      	bne.n	80056be <HAL_TIM_PWM_Start+0x82>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2202      	movs	r2, #2
 80056b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056bc:	e013      	b.n	80056e6 <HAL_TIM_PWM_Start+0xaa>
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	2b04      	cmp	r3, #4
 80056c2:	d104      	bne.n	80056ce <HAL_TIM_PWM_Start+0x92>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2202      	movs	r2, #2
 80056c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056cc:	e00b      	b.n	80056e6 <HAL_TIM_PWM_Start+0xaa>
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	2b08      	cmp	r3, #8
 80056d2:	d104      	bne.n	80056de <HAL_TIM_PWM_Start+0xa2>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2202      	movs	r2, #2
 80056d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056dc:	e003      	b.n	80056e6 <HAL_TIM_PWM_Start+0xaa>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2202      	movs	r2, #2
 80056e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2201      	movs	r2, #1
 80056ec:	6839      	ldr	r1, [r7, #0]
 80056ee:	4618      	mov	r0, r3
 80056f0:	f000 fce0 	bl	80060b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a2d      	ldr	r2, [pc, #180]	; (80057b0 <HAL_TIM_PWM_Start+0x174>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d004      	beq.n	8005708 <HAL_TIM_PWM_Start+0xcc>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a2c      	ldr	r2, [pc, #176]	; (80057b4 <HAL_TIM_PWM_Start+0x178>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d101      	bne.n	800570c <HAL_TIM_PWM_Start+0xd0>
 8005708:	2301      	movs	r3, #1
 800570a:	e000      	b.n	800570e <HAL_TIM_PWM_Start+0xd2>
 800570c:	2300      	movs	r3, #0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d007      	beq.n	8005722 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005720:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a22      	ldr	r2, [pc, #136]	; (80057b0 <HAL_TIM_PWM_Start+0x174>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d022      	beq.n	8005772 <HAL_TIM_PWM_Start+0x136>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005734:	d01d      	beq.n	8005772 <HAL_TIM_PWM_Start+0x136>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a1f      	ldr	r2, [pc, #124]	; (80057b8 <HAL_TIM_PWM_Start+0x17c>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d018      	beq.n	8005772 <HAL_TIM_PWM_Start+0x136>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a1d      	ldr	r2, [pc, #116]	; (80057bc <HAL_TIM_PWM_Start+0x180>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d013      	beq.n	8005772 <HAL_TIM_PWM_Start+0x136>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a1c      	ldr	r2, [pc, #112]	; (80057c0 <HAL_TIM_PWM_Start+0x184>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d00e      	beq.n	8005772 <HAL_TIM_PWM_Start+0x136>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a16      	ldr	r2, [pc, #88]	; (80057b4 <HAL_TIM_PWM_Start+0x178>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d009      	beq.n	8005772 <HAL_TIM_PWM_Start+0x136>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a18      	ldr	r2, [pc, #96]	; (80057c4 <HAL_TIM_PWM_Start+0x188>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d004      	beq.n	8005772 <HAL_TIM_PWM_Start+0x136>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a16      	ldr	r2, [pc, #88]	; (80057c8 <HAL_TIM_PWM_Start+0x18c>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d111      	bne.n	8005796 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	f003 0307 	and.w	r3, r3, #7
 800577c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2b06      	cmp	r3, #6
 8005782:	d010      	beq.n	80057a6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f042 0201 	orr.w	r2, r2, #1
 8005792:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005794:	e007      	b.n	80057a6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f042 0201 	orr.w	r2, r2, #1
 80057a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3710      	adds	r7, #16
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	40010000 	.word	0x40010000
 80057b4:	40010400 	.word	0x40010400
 80057b8:	40000400 	.word	0x40000400
 80057bc:	40000800 	.word	0x40000800
 80057c0:	40000c00 	.word	0x40000c00
 80057c4:	40014000 	.word	0x40014000
 80057c8:	40001800 	.word	0x40001800

080057cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b086      	sub	sp, #24
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057d8:	2300      	movs	r3, #0
 80057da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d101      	bne.n	80057ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80057e6:	2302      	movs	r3, #2
 80057e8:	e0ae      	b.n	8005948 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2201      	movs	r2, #1
 80057ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2b0c      	cmp	r3, #12
 80057f6:	f200 809f 	bhi.w	8005938 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80057fa:	a201      	add	r2, pc, #4	; (adr r2, 8005800 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80057fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005800:	08005835 	.word	0x08005835
 8005804:	08005939 	.word	0x08005939
 8005808:	08005939 	.word	0x08005939
 800580c:	08005939 	.word	0x08005939
 8005810:	08005875 	.word	0x08005875
 8005814:	08005939 	.word	0x08005939
 8005818:	08005939 	.word	0x08005939
 800581c:	08005939 	.word	0x08005939
 8005820:	080058b7 	.word	0x080058b7
 8005824:	08005939 	.word	0x08005939
 8005828:	08005939 	.word	0x08005939
 800582c:	08005939 	.word	0x08005939
 8005830:	080058f7 	.word	0x080058f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68b9      	ldr	r1, [r7, #8]
 800583a:	4618      	mov	r0, r3
 800583c:	f000 f9f0 	bl	8005c20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	699a      	ldr	r2, [r3, #24]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f042 0208 	orr.w	r2, r2, #8
 800584e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	699a      	ldr	r2, [r3, #24]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f022 0204 	bic.w	r2, r2, #4
 800585e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	6999      	ldr	r1, [r3, #24]
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	691a      	ldr	r2, [r3, #16]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	430a      	orrs	r2, r1
 8005870:	619a      	str	r2, [r3, #24]
      break;
 8005872:	e064      	b.n	800593e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	68b9      	ldr	r1, [r7, #8]
 800587a:	4618      	mov	r0, r3
 800587c:	f000 fa40 	bl	8005d00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	699a      	ldr	r2, [r3, #24]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800588e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	699a      	ldr	r2, [r3, #24]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800589e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	6999      	ldr	r1, [r3, #24]
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	021a      	lsls	r2, r3, #8
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	430a      	orrs	r2, r1
 80058b2:	619a      	str	r2, [r3, #24]
      break;
 80058b4:	e043      	b.n	800593e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68b9      	ldr	r1, [r7, #8]
 80058bc:	4618      	mov	r0, r3
 80058be:	f000 fa95 	bl	8005dec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	69da      	ldr	r2, [r3, #28]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f042 0208 	orr.w	r2, r2, #8
 80058d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	69da      	ldr	r2, [r3, #28]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f022 0204 	bic.w	r2, r2, #4
 80058e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	69d9      	ldr	r1, [r3, #28]
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	691a      	ldr	r2, [r3, #16]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	430a      	orrs	r2, r1
 80058f2:	61da      	str	r2, [r3, #28]
      break;
 80058f4:	e023      	b.n	800593e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68b9      	ldr	r1, [r7, #8]
 80058fc:	4618      	mov	r0, r3
 80058fe:	f000 fae9 	bl	8005ed4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	69da      	ldr	r2, [r3, #28]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005910:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	69da      	ldr	r2, [r3, #28]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005920:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	69d9      	ldr	r1, [r3, #28]
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	021a      	lsls	r2, r3, #8
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	430a      	orrs	r2, r1
 8005934:	61da      	str	r2, [r3, #28]
      break;
 8005936:	e002      	b.n	800593e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	75fb      	strb	r3, [r7, #23]
      break;
 800593c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005946:	7dfb      	ldrb	r3, [r7, #23]
}
 8005948:	4618      	mov	r0, r3
 800594a:	3718      	adds	r7, #24
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800595a:	2300      	movs	r3, #0
 800595c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005964:	2b01      	cmp	r3, #1
 8005966:	d101      	bne.n	800596c <HAL_TIM_ConfigClockSource+0x1c>
 8005968:	2302      	movs	r3, #2
 800596a:	e0b4      	b.n	8005ad6 <HAL_TIM_ConfigClockSource+0x186>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2202      	movs	r2, #2
 8005978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800598a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005992:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68ba      	ldr	r2, [r7, #8]
 800599a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059a4:	d03e      	beq.n	8005a24 <HAL_TIM_ConfigClockSource+0xd4>
 80059a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059aa:	f200 8087 	bhi.w	8005abc <HAL_TIM_ConfigClockSource+0x16c>
 80059ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059b2:	f000 8086 	beq.w	8005ac2 <HAL_TIM_ConfigClockSource+0x172>
 80059b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059ba:	d87f      	bhi.n	8005abc <HAL_TIM_ConfigClockSource+0x16c>
 80059bc:	2b70      	cmp	r3, #112	; 0x70
 80059be:	d01a      	beq.n	80059f6 <HAL_TIM_ConfigClockSource+0xa6>
 80059c0:	2b70      	cmp	r3, #112	; 0x70
 80059c2:	d87b      	bhi.n	8005abc <HAL_TIM_ConfigClockSource+0x16c>
 80059c4:	2b60      	cmp	r3, #96	; 0x60
 80059c6:	d050      	beq.n	8005a6a <HAL_TIM_ConfigClockSource+0x11a>
 80059c8:	2b60      	cmp	r3, #96	; 0x60
 80059ca:	d877      	bhi.n	8005abc <HAL_TIM_ConfigClockSource+0x16c>
 80059cc:	2b50      	cmp	r3, #80	; 0x50
 80059ce:	d03c      	beq.n	8005a4a <HAL_TIM_ConfigClockSource+0xfa>
 80059d0:	2b50      	cmp	r3, #80	; 0x50
 80059d2:	d873      	bhi.n	8005abc <HAL_TIM_ConfigClockSource+0x16c>
 80059d4:	2b40      	cmp	r3, #64	; 0x40
 80059d6:	d058      	beq.n	8005a8a <HAL_TIM_ConfigClockSource+0x13a>
 80059d8:	2b40      	cmp	r3, #64	; 0x40
 80059da:	d86f      	bhi.n	8005abc <HAL_TIM_ConfigClockSource+0x16c>
 80059dc:	2b30      	cmp	r3, #48	; 0x30
 80059de:	d064      	beq.n	8005aaa <HAL_TIM_ConfigClockSource+0x15a>
 80059e0:	2b30      	cmp	r3, #48	; 0x30
 80059e2:	d86b      	bhi.n	8005abc <HAL_TIM_ConfigClockSource+0x16c>
 80059e4:	2b20      	cmp	r3, #32
 80059e6:	d060      	beq.n	8005aaa <HAL_TIM_ConfigClockSource+0x15a>
 80059e8:	2b20      	cmp	r3, #32
 80059ea:	d867      	bhi.n	8005abc <HAL_TIM_ConfigClockSource+0x16c>
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d05c      	beq.n	8005aaa <HAL_TIM_ConfigClockSource+0x15a>
 80059f0:	2b10      	cmp	r3, #16
 80059f2:	d05a      	beq.n	8005aaa <HAL_TIM_ConfigClockSource+0x15a>
 80059f4:	e062      	b.n	8005abc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6818      	ldr	r0, [r3, #0]
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	6899      	ldr	r1, [r3, #8]
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	685a      	ldr	r2, [r3, #4]
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	f000 fb35 	bl	8006074 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68ba      	ldr	r2, [r7, #8]
 8005a20:	609a      	str	r2, [r3, #8]
      break;
 8005a22:	e04f      	b.n	8005ac4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6818      	ldr	r0, [r3, #0]
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	6899      	ldr	r1, [r3, #8]
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	685a      	ldr	r2, [r3, #4]
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	f000 fb1e 	bl	8006074 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	689a      	ldr	r2, [r3, #8]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a46:	609a      	str	r2, [r3, #8]
      break;
 8005a48:	e03c      	b.n	8005ac4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6818      	ldr	r0, [r3, #0]
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	6859      	ldr	r1, [r3, #4]
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	461a      	mov	r2, r3
 8005a58:	f000 fa92 	bl	8005f80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2150      	movs	r1, #80	; 0x50
 8005a62:	4618      	mov	r0, r3
 8005a64:	f000 faeb 	bl	800603e <TIM_ITRx_SetConfig>
      break;
 8005a68:	e02c      	b.n	8005ac4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6818      	ldr	r0, [r3, #0]
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	6859      	ldr	r1, [r3, #4]
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	461a      	mov	r2, r3
 8005a78:	f000 fab1 	bl	8005fde <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2160      	movs	r1, #96	; 0x60
 8005a82:	4618      	mov	r0, r3
 8005a84:	f000 fadb 	bl	800603e <TIM_ITRx_SetConfig>
      break;
 8005a88:	e01c      	b.n	8005ac4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6818      	ldr	r0, [r3, #0]
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	6859      	ldr	r1, [r3, #4]
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	461a      	mov	r2, r3
 8005a98:	f000 fa72 	bl	8005f80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2140      	movs	r1, #64	; 0x40
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f000 facb 	bl	800603e <TIM_ITRx_SetConfig>
      break;
 8005aa8:	e00c      	b.n	8005ac4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	4610      	mov	r0, r2
 8005ab6:	f000 fac2 	bl	800603e <TIM_ITRx_SetConfig>
      break;
 8005aba:	e003      	b.n	8005ac4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	73fb      	strb	r3, [r7, #15]
      break;
 8005ac0:	e000      	b.n	8005ac4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005ac2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
	...

08005ae0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b085      	sub	sp, #20
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a40      	ldr	r2, [pc, #256]	; (8005bf4 <TIM_Base_SetConfig+0x114>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d013      	beq.n	8005b20 <TIM_Base_SetConfig+0x40>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005afe:	d00f      	beq.n	8005b20 <TIM_Base_SetConfig+0x40>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a3d      	ldr	r2, [pc, #244]	; (8005bf8 <TIM_Base_SetConfig+0x118>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d00b      	beq.n	8005b20 <TIM_Base_SetConfig+0x40>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a3c      	ldr	r2, [pc, #240]	; (8005bfc <TIM_Base_SetConfig+0x11c>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d007      	beq.n	8005b20 <TIM_Base_SetConfig+0x40>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a3b      	ldr	r2, [pc, #236]	; (8005c00 <TIM_Base_SetConfig+0x120>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d003      	beq.n	8005b20 <TIM_Base_SetConfig+0x40>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a3a      	ldr	r2, [pc, #232]	; (8005c04 <TIM_Base_SetConfig+0x124>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d108      	bne.n	8005b32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a2f      	ldr	r2, [pc, #188]	; (8005bf4 <TIM_Base_SetConfig+0x114>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d02b      	beq.n	8005b92 <TIM_Base_SetConfig+0xb2>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b40:	d027      	beq.n	8005b92 <TIM_Base_SetConfig+0xb2>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a2c      	ldr	r2, [pc, #176]	; (8005bf8 <TIM_Base_SetConfig+0x118>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d023      	beq.n	8005b92 <TIM_Base_SetConfig+0xb2>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a2b      	ldr	r2, [pc, #172]	; (8005bfc <TIM_Base_SetConfig+0x11c>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d01f      	beq.n	8005b92 <TIM_Base_SetConfig+0xb2>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a2a      	ldr	r2, [pc, #168]	; (8005c00 <TIM_Base_SetConfig+0x120>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d01b      	beq.n	8005b92 <TIM_Base_SetConfig+0xb2>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a29      	ldr	r2, [pc, #164]	; (8005c04 <TIM_Base_SetConfig+0x124>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d017      	beq.n	8005b92 <TIM_Base_SetConfig+0xb2>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a28      	ldr	r2, [pc, #160]	; (8005c08 <TIM_Base_SetConfig+0x128>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d013      	beq.n	8005b92 <TIM_Base_SetConfig+0xb2>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a27      	ldr	r2, [pc, #156]	; (8005c0c <TIM_Base_SetConfig+0x12c>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d00f      	beq.n	8005b92 <TIM_Base_SetConfig+0xb2>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a26      	ldr	r2, [pc, #152]	; (8005c10 <TIM_Base_SetConfig+0x130>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d00b      	beq.n	8005b92 <TIM_Base_SetConfig+0xb2>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a25      	ldr	r2, [pc, #148]	; (8005c14 <TIM_Base_SetConfig+0x134>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d007      	beq.n	8005b92 <TIM_Base_SetConfig+0xb2>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a24      	ldr	r2, [pc, #144]	; (8005c18 <TIM_Base_SetConfig+0x138>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d003      	beq.n	8005b92 <TIM_Base_SetConfig+0xb2>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a23      	ldr	r2, [pc, #140]	; (8005c1c <TIM_Base_SetConfig+0x13c>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d108      	bne.n	8005ba4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	689a      	ldr	r2, [r3, #8]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4a0a      	ldr	r2, [pc, #40]	; (8005bf4 <TIM_Base_SetConfig+0x114>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d003      	beq.n	8005bd8 <TIM_Base_SetConfig+0xf8>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a0c      	ldr	r2, [pc, #48]	; (8005c04 <TIM_Base_SetConfig+0x124>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d103      	bne.n	8005be0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	691a      	ldr	r2, [r3, #16]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	615a      	str	r2, [r3, #20]
}
 8005be6:	bf00      	nop
 8005be8:	3714      	adds	r7, #20
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
 8005bf2:	bf00      	nop
 8005bf4:	40010000 	.word	0x40010000
 8005bf8:	40000400 	.word	0x40000400
 8005bfc:	40000800 	.word	0x40000800
 8005c00:	40000c00 	.word	0x40000c00
 8005c04:	40010400 	.word	0x40010400
 8005c08:	40014000 	.word	0x40014000
 8005c0c:	40014400 	.word	0x40014400
 8005c10:	40014800 	.word	0x40014800
 8005c14:	40001800 	.word	0x40001800
 8005c18:	40001c00 	.word	0x40001c00
 8005c1c:	40002000 	.word	0x40002000

08005c20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b087      	sub	sp, #28
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a1b      	ldr	r3, [r3, #32]
 8005c2e:	f023 0201 	bic.w	r2, r3, #1
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a1b      	ldr	r3, [r3, #32]
 8005c3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f023 0303 	bic.w	r3, r3, #3
 8005c56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	f023 0302 	bic.w	r3, r3, #2
 8005c68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	697a      	ldr	r2, [r7, #20]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a20      	ldr	r2, [pc, #128]	; (8005cf8 <TIM_OC1_SetConfig+0xd8>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d003      	beq.n	8005c84 <TIM_OC1_SetConfig+0x64>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a1f      	ldr	r2, [pc, #124]	; (8005cfc <TIM_OC1_SetConfig+0xdc>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d10c      	bne.n	8005c9e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	f023 0308 	bic.w	r3, r3, #8
 8005c8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	697a      	ldr	r2, [r7, #20]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	f023 0304 	bic.w	r3, r3, #4
 8005c9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a15      	ldr	r2, [pc, #84]	; (8005cf8 <TIM_OC1_SetConfig+0xd8>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d003      	beq.n	8005cae <TIM_OC1_SetConfig+0x8e>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a14      	ldr	r2, [pc, #80]	; (8005cfc <TIM_OC1_SetConfig+0xdc>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d111      	bne.n	8005cd2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005cbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	693a      	ldr	r2, [r7, #16]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	699b      	ldr	r3, [r3, #24]
 8005ccc:	693a      	ldr	r2, [r7, #16]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	685a      	ldr	r2, [r3, #4]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	697a      	ldr	r2, [r7, #20]
 8005cea:	621a      	str	r2, [r3, #32]
}
 8005cec:	bf00      	nop
 8005cee:	371c      	adds	r7, #28
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr
 8005cf8:	40010000 	.word	0x40010000
 8005cfc:	40010400 	.word	0x40010400

08005d00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b087      	sub	sp, #28
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a1b      	ldr	r3, [r3, #32]
 8005d0e:	f023 0210 	bic.w	r2, r3, #16
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a1b      	ldr	r3, [r3, #32]
 8005d1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	699b      	ldr	r3, [r3, #24]
 8005d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	021b      	lsls	r3, r3, #8
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	f023 0320 	bic.w	r3, r3, #32
 8005d4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	011b      	lsls	r3, r3, #4
 8005d52:	697a      	ldr	r2, [r7, #20]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a22      	ldr	r2, [pc, #136]	; (8005de4 <TIM_OC2_SetConfig+0xe4>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d003      	beq.n	8005d68 <TIM_OC2_SetConfig+0x68>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a21      	ldr	r2, [pc, #132]	; (8005de8 <TIM_OC2_SetConfig+0xe8>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d10d      	bne.n	8005d84 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	011b      	lsls	r3, r3, #4
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d82:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a17      	ldr	r2, [pc, #92]	; (8005de4 <TIM_OC2_SetConfig+0xe4>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d003      	beq.n	8005d94 <TIM_OC2_SetConfig+0x94>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a16      	ldr	r2, [pc, #88]	; (8005de8 <TIM_OC2_SetConfig+0xe8>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d113      	bne.n	8005dbc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005da2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	695b      	ldr	r3, [r3, #20]
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	693a      	ldr	r2, [r7, #16]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	699b      	ldr	r3, [r3, #24]
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	693a      	ldr	r2, [r7, #16]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	693a      	ldr	r2, [r7, #16]
 8005dc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	685a      	ldr	r2, [r3, #4]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	621a      	str	r2, [r3, #32]
}
 8005dd6:	bf00      	nop
 8005dd8:	371c      	adds	r7, #28
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr
 8005de2:	bf00      	nop
 8005de4:	40010000 	.word	0x40010000
 8005de8:	40010400 	.word	0x40010400

08005dec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b087      	sub	sp, #28
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a1b      	ldr	r3, [r3, #32]
 8005dfa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a1b      	ldr	r3, [r3, #32]
 8005e06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	69db      	ldr	r3, [r3, #28]
 8005e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f023 0303 	bic.w	r3, r3, #3
 8005e22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	021b      	lsls	r3, r3, #8
 8005e3c:	697a      	ldr	r2, [r7, #20]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a21      	ldr	r2, [pc, #132]	; (8005ecc <TIM_OC3_SetConfig+0xe0>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d003      	beq.n	8005e52 <TIM_OC3_SetConfig+0x66>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a20      	ldr	r2, [pc, #128]	; (8005ed0 <TIM_OC3_SetConfig+0xe4>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d10d      	bne.n	8005e6e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	021b      	lsls	r3, r3, #8
 8005e60:	697a      	ldr	r2, [r7, #20]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a16      	ldr	r2, [pc, #88]	; (8005ecc <TIM_OC3_SetConfig+0xe0>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d003      	beq.n	8005e7e <TIM_OC3_SetConfig+0x92>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a15      	ldr	r2, [pc, #84]	; (8005ed0 <TIM_OC3_SetConfig+0xe4>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d113      	bne.n	8005ea6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	695b      	ldr	r3, [r3, #20]
 8005e92:	011b      	lsls	r3, r3, #4
 8005e94:	693a      	ldr	r2, [r7, #16]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	011b      	lsls	r3, r3, #4
 8005ea0:	693a      	ldr	r2, [r7, #16]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	693a      	ldr	r2, [r7, #16]
 8005eaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	685a      	ldr	r2, [r3, #4]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	697a      	ldr	r2, [r7, #20]
 8005ebe:	621a      	str	r2, [r3, #32]
}
 8005ec0:	bf00      	nop
 8005ec2:	371c      	adds	r7, #28
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr
 8005ecc:	40010000 	.word	0x40010000
 8005ed0:	40010400 	.word	0x40010400

08005ed4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b087      	sub	sp, #28
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a1b      	ldr	r3, [r3, #32]
 8005ee2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a1b      	ldr	r3, [r3, #32]
 8005eee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	69db      	ldr	r3, [r3, #28]
 8005efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	021b      	lsls	r3, r3, #8
 8005f12:	68fa      	ldr	r2, [r7, #12]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	031b      	lsls	r3, r3, #12
 8005f26:	693a      	ldr	r2, [r7, #16]
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4a12      	ldr	r2, [pc, #72]	; (8005f78 <TIM_OC4_SetConfig+0xa4>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d003      	beq.n	8005f3c <TIM_OC4_SetConfig+0x68>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4a11      	ldr	r2, [pc, #68]	; (8005f7c <TIM_OC4_SetConfig+0xa8>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d109      	bne.n	8005f50 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	695b      	ldr	r3, [r3, #20]
 8005f48:	019b      	lsls	r3, r3, #6
 8005f4a:	697a      	ldr	r2, [r7, #20]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	685a      	ldr	r2, [r3, #4]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	693a      	ldr	r2, [r7, #16]
 8005f68:	621a      	str	r2, [r3, #32]
}
 8005f6a:	bf00      	nop
 8005f6c:	371c      	adds	r7, #28
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr
 8005f76:	bf00      	nop
 8005f78:	40010000 	.word	0x40010000
 8005f7c:	40010400 	.word	0x40010400

08005f80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b087      	sub	sp, #28
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6a1b      	ldr	r3, [r3, #32]
 8005f90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6a1b      	ldr	r3, [r3, #32]
 8005f96:	f023 0201 	bic.w	r2, r3, #1
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	699b      	ldr	r3, [r3, #24]
 8005fa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005faa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	011b      	lsls	r3, r3, #4
 8005fb0:	693a      	ldr	r2, [r7, #16]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	f023 030a 	bic.w	r3, r3, #10
 8005fbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005fbe:	697a      	ldr	r2, [r7, #20]
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	693a      	ldr	r2, [r7, #16]
 8005fca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	697a      	ldr	r2, [r7, #20]
 8005fd0:	621a      	str	r2, [r3, #32]
}
 8005fd2:	bf00      	nop
 8005fd4:	371c      	adds	r7, #28
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr

08005fde <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fde:	b480      	push	{r7}
 8005fe0:	b087      	sub	sp, #28
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	60f8      	str	r0, [r7, #12]
 8005fe6:	60b9      	str	r1, [r7, #8]
 8005fe8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6a1b      	ldr	r3, [r3, #32]
 8005fee:	f023 0210 	bic.w	r2, r3, #16
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	699b      	ldr	r3, [r3, #24]
 8005ffa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6a1b      	ldr	r3, [r3, #32]
 8006000:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006008:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	031b      	lsls	r3, r3, #12
 800600e:	697a      	ldr	r2, [r7, #20]
 8006010:	4313      	orrs	r3, r2
 8006012:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800601a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	011b      	lsls	r3, r3, #4
 8006020:	693a      	ldr	r2, [r7, #16]
 8006022:	4313      	orrs	r3, r2
 8006024:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	697a      	ldr	r2, [r7, #20]
 800602a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	693a      	ldr	r2, [r7, #16]
 8006030:	621a      	str	r2, [r3, #32]
}
 8006032:	bf00      	nop
 8006034:	371c      	adds	r7, #28
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr

0800603e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800603e:	b480      	push	{r7}
 8006040:	b085      	sub	sp, #20
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
 8006046:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006054:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006056:	683a      	ldr	r2, [r7, #0]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	4313      	orrs	r3, r2
 800605c:	f043 0307 	orr.w	r3, r3, #7
 8006060:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	68fa      	ldr	r2, [r7, #12]
 8006066:	609a      	str	r2, [r3, #8]
}
 8006068:	bf00      	nop
 800606a:	3714      	adds	r7, #20
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006074:	b480      	push	{r7}
 8006076:	b087      	sub	sp, #28
 8006078:	af00      	add	r7, sp, #0
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	607a      	str	r2, [r7, #4]
 8006080:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800608e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	021a      	lsls	r2, r3, #8
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	431a      	orrs	r2, r3
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	4313      	orrs	r3, r2
 800609c:	697a      	ldr	r2, [r7, #20]
 800609e:	4313      	orrs	r3, r2
 80060a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	697a      	ldr	r2, [r7, #20]
 80060a6:	609a      	str	r2, [r3, #8]
}
 80060a8:	bf00      	nop
 80060aa:	371c      	adds	r7, #28
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b087      	sub	sp, #28
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	f003 031f 	and.w	r3, r3, #31
 80060c6:	2201      	movs	r2, #1
 80060c8:	fa02 f303 	lsl.w	r3, r2, r3
 80060cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6a1a      	ldr	r2, [r3, #32]
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	43db      	mvns	r3, r3
 80060d6:	401a      	ands	r2, r3
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6a1a      	ldr	r2, [r3, #32]
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	f003 031f 	and.w	r3, r3, #31
 80060e6:	6879      	ldr	r1, [r7, #4]
 80060e8:	fa01 f303 	lsl.w	r3, r1, r3
 80060ec:	431a      	orrs	r2, r3
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	621a      	str	r2, [r3, #32]
}
 80060f2:	bf00      	nop
 80060f4:	371c      	adds	r7, #28
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr
	...

08006100 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006100:	b480      	push	{r7}
 8006102:	b085      	sub	sp, #20
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006110:	2b01      	cmp	r3, #1
 8006112:	d101      	bne.n	8006118 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006114:	2302      	movs	r3, #2
 8006116:	e05a      	b.n	80061ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2202      	movs	r2, #2
 8006124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800613e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	4313      	orrs	r3, r2
 8006148:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68fa      	ldr	r2, [r7, #12]
 8006150:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a21      	ldr	r2, [pc, #132]	; (80061dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d022      	beq.n	80061a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006164:	d01d      	beq.n	80061a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a1d      	ldr	r2, [pc, #116]	; (80061e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d018      	beq.n	80061a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a1b      	ldr	r2, [pc, #108]	; (80061e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d013      	beq.n	80061a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a1a      	ldr	r2, [pc, #104]	; (80061e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d00e      	beq.n	80061a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a18      	ldr	r2, [pc, #96]	; (80061ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d009      	beq.n	80061a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a17      	ldr	r2, [pc, #92]	; (80061f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d004      	beq.n	80061a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a15      	ldr	r2, [pc, #84]	; (80061f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d10c      	bne.n	80061bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	68ba      	ldr	r2, [r7, #8]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	68ba      	ldr	r2, [r7, #8]
 80061ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3714      	adds	r7, #20
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	40010000 	.word	0x40010000
 80061e0:	40000400 	.word	0x40000400
 80061e4:	40000800 	.word	0x40000800
 80061e8:	40000c00 	.word	0x40000c00
 80061ec:	40010400 	.word	0x40010400
 80061f0:	40014000 	.word	0x40014000
 80061f4:	40001800 	.word	0x40001800

080061f8 <__errno>:
 80061f8:	4b01      	ldr	r3, [pc, #4]	; (8006200 <__errno+0x8>)
 80061fa:	6818      	ldr	r0, [r3, #0]
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	20000020 	.word	0x20000020

08006204 <__libc_init_array>:
 8006204:	b570      	push	{r4, r5, r6, lr}
 8006206:	4d0d      	ldr	r5, [pc, #52]	; (800623c <__libc_init_array+0x38>)
 8006208:	4c0d      	ldr	r4, [pc, #52]	; (8006240 <__libc_init_array+0x3c>)
 800620a:	1b64      	subs	r4, r4, r5
 800620c:	10a4      	asrs	r4, r4, #2
 800620e:	2600      	movs	r6, #0
 8006210:	42a6      	cmp	r6, r4
 8006212:	d109      	bne.n	8006228 <__libc_init_array+0x24>
 8006214:	4d0b      	ldr	r5, [pc, #44]	; (8006244 <__libc_init_array+0x40>)
 8006216:	4c0c      	ldr	r4, [pc, #48]	; (8006248 <__libc_init_array+0x44>)
 8006218:	f001 fdd8 	bl	8007dcc <_init>
 800621c:	1b64      	subs	r4, r4, r5
 800621e:	10a4      	asrs	r4, r4, #2
 8006220:	2600      	movs	r6, #0
 8006222:	42a6      	cmp	r6, r4
 8006224:	d105      	bne.n	8006232 <__libc_init_array+0x2e>
 8006226:	bd70      	pop	{r4, r5, r6, pc}
 8006228:	f855 3b04 	ldr.w	r3, [r5], #4
 800622c:	4798      	blx	r3
 800622e:	3601      	adds	r6, #1
 8006230:	e7ee      	b.n	8006210 <__libc_init_array+0xc>
 8006232:	f855 3b04 	ldr.w	r3, [r5], #4
 8006236:	4798      	blx	r3
 8006238:	3601      	adds	r6, #1
 800623a:	e7f2      	b.n	8006222 <__libc_init_array+0x1e>
 800623c:	08008640 	.word	0x08008640
 8006240:	08008640 	.word	0x08008640
 8006244:	08008640 	.word	0x08008640
 8006248:	08008644 	.word	0x08008644

0800624c <memset>:
 800624c:	4402      	add	r2, r0
 800624e:	4603      	mov	r3, r0
 8006250:	4293      	cmp	r3, r2
 8006252:	d100      	bne.n	8006256 <memset+0xa>
 8006254:	4770      	bx	lr
 8006256:	f803 1b01 	strb.w	r1, [r3], #1
 800625a:	e7f9      	b.n	8006250 <memset+0x4>

0800625c <siprintf>:
 800625c:	b40e      	push	{r1, r2, r3}
 800625e:	b500      	push	{lr}
 8006260:	b09c      	sub	sp, #112	; 0x70
 8006262:	ab1d      	add	r3, sp, #116	; 0x74
 8006264:	9002      	str	r0, [sp, #8]
 8006266:	9006      	str	r0, [sp, #24]
 8006268:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800626c:	4809      	ldr	r0, [pc, #36]	; (8006294 <siprintf+0x38>)
 800626e:	9107      	str	r1, [sp, #28]
 8006270:	9104      	str	r1, [sp, #16]
 8006272:	4909      	ldr	r1, [pc, #36]	; (8006298 <siprintf+0x3c>)
 8006274:	f853 2b04 	ldr.w	r2, [r3], #4
 8006278:	9105      	str	r1, [sp, #20]
 800627a:	6800      	ldr	r0, [r0, #0]
 800627c:	9301      	str	r3, [sp, #4]
 800627e:	a902      	add	r1, sp, #8
 8006280:	f000 f868 	bl	8006354 <_svfiprintf_r>
 8006284:	9b02      	ldr	r3, [sp, #8]
 8006286:	2200      	movs	r2, #0
 8006288:	701a      	strb	r2, [r3, #0]
 800628a:	b01c      	add	sp, #112	; 0x70
 800628c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006290:	b003      	add	sp, #12
 8006292:	4770      	bx	lr
 8006294:	20000020 	.word	0x20000020
 8006298:	ffff0208 	.word	0xffff0208

0800629c <__ssputs_r>:
 800629c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062a0:	688e      	ldr	r6, [r1, #8]
 80062a2:	429e      	cmp	r6, r3
 80062a4:	4682      	mov	sl, r0
 80062a6:	460c      	mov	r4, r1
 80062a8:	4690      	mov	r8, r2
 80062aa:	461f      	mov	r7, r3
 80062ac:	d838      	bhi.n	8006320 <__ssputs_r+0x84>
 80062ae:	898a      	ldrh	r2, [r1, #12]
 80062b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80062b4:	d032      	beq.n	800631c <__ssputs_r+0x80>
 80062b6:	6825      	ldr	r5, [r4, #0]
 80062b8:	6909      	ldr	r1, [r1, #16]
 80062ba:	eba5 0901 	sub.w	r9, r5, r1
 80062be:	6965      	ldr	r5, [r4, #20]
 80062c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80062c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80062c8:	3301      	adds	r3, #1
 80062ca:	444b      	add	r3, r9
 80062cc:	106d      	asrs	r5, r5, #1
 80062ce:	429d      	cmp	r5, r3
 80062d0:	bf38      	it	cc
 80062d2:	461d      	movcc	r5, r3
 80062d4:	0553      	lsls	r3, r2, #21
 80062d6:	d531      	bpl.n	800633c <__ssputs_r+0xa0>
 80062d8:	4629      	mov	r1, r5
 80062da:	f000 fb47 	bl	800696c <_malloc_r>
 80062de:	4606      	mov	r6, r0
 80062e0:	b950      	cbnz	r0, 80062f8 <__ssputs_r+0x5c>
 80062e2:	230c      	movs	r3, #12
 80062e4:	f8ca 3000 	str.w	r3, [sl]
 80062e8:	89a3      	ldrh	r3, [r4, #12]
 80062ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062ee:	81a3      	strh	r3, [r4, #12]
 80062f0:	f04f 30ff 	mov.w	r0, #4294967295
 80062f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062f8:	6921      	ldr	r1, [r4, #16]
 80062fa:	464a      	mov	r2, r9
 80062fc:	f000 fabe 	bl	800687c <memcpy>
 8006300:	89a3      	ldrh	r3, [r4, #12]
 8006302:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800630a:	81a3      	strh	r3, [r4, #12]
 800630c:	6126      	str	r6, [r4, #16]
 800630e:	6165      	str	r5, [r4, #20]
 8006310:	444e      	add	r6, r9
 8006312:	eba5 0509 	sub.w	r5, r5, r9
 8006316:	6026      	str	r6, [r4, #0]
 8006318:	60a5      	str	r5, [r4, #8]
 800631a:	463e      	mov	r6, r7
 800631c:	42be      	cmp	r6, r7
 800631e:	d900      	bls.n	8006322 <__ssputs_r+0x86>
 8006320:	463e      	mov	r6, r7
 8006322:	4632      	mov	r2, r6
 8006324:	6820      	ldr	r0, [r4, #0]
 8006326:	4641      	mov	r1, r8
 8006328:	f000 fab6 	bl	8006898 <memmove>
 800632c:	68a3      	ldr	r3, [r4, #8]
 800632e:	6822      	ldr	r2, [r4, #0]
 8006330:	1b9b      	subs	r3, r3, r6
 8006332:	4432      	add	r2, r6
 8006334:	60a3      	str	r3, [r4, #8]
 8006336:	6022      	str	r2, [r4, #0]
 8006338:	2000      	movs	r0, #0
 800633a:	e7db      	b.n	80062f4 <__ssputs_r+0x58>
 800633c:	462a      	mov	r2, r5
 800633e:	f000 fb6f 	bl	8006a20 <_realloc_r>
 8006342:	4606      	mov	r6, r0
 8006344:	2800      	cmp	r0, #0
 8006346:	d1e1      	bne.n	800630c <__ssputs_r+0x70>
 8006348:	6921      	ldr	r1, [r4, #16]
 800634a:	4650      	mov	r0, sl
 800634c:	f000 fabe 	bl	80068cc <_free_r>
 8006350:	e7c7      	b.n	80062e2 <__ssputs_r+0x46>
	...

08006354 <_svfiprintf_r>:
 8006354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006358:	4698      	mov	r8, r3
 800635a:	898b      	ldrh	r3, [r1, #12]
 800635c:	061b      	lsls	r3, r3, #24
 800635e:	b09d      	sub	sp, #116	; 0x74
 8006360:	4607      	mov	r7, r0
 8006362:	460d      	mov	r5, r1
 8006364:	4614      	mov	r4, r2
 8006366:	d50e      	bpl.n	8006386 <_svfiprintf_r+0x32>
 8006368:	690b      	ldr	r3, [r1, #16]
 800636a:	b963      	cbnz	r3, 8006386 <_svfiprintf_r+0x32>
 800636c:	2140      	movs	r1, #64	; 0x40
 800636e:	f000 fafd 	bl	800696c <_malloc_r>
 8006372:	6028      	str	r0, [r5, #0]
 8006374:	6128      	str	r0, [r5, #16]
 8006376:	b920      	cbnz	r0, 8006382 <_svfiprintf_r+0x2e>
 8006378:	230c      	movs	r3, #12
 800637a:	603b      	str	r3, [r7, #0]
 800637c:	f04f 30ff 	mov.w	r0, #4294967295
 8006380:	e0d1      	b.n	8006526 <_svfiprintf_r+0x1d2>
 8006382:	2340      	movs	r3, #64	; 0x40
 8006384:	616b      	str	r3, [r5, #20]
 8006386:	2300      	movs	r3, #0
 8006388:	9309      	str	r3, [sp, #36]	; 0x24
 800638a:	2320      	movs	r3, #32
 800638c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006390:	f8cd 800c 	str.w	r8, [sp, #12]
 8006394:	2330      	movs	r3, #48	; 0x30
 8006396:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006540 <_svfiprintf_r+0x1ec>
 800639a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800639e:	f04f 0901 	mov.w	r9, #1
 80063a2:	4623      	mov	r3, r4
 80063a4:	469a      	mov	sl, r3
 80063a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063aa:	b10a      	cbz	r2, 80063b0 <_svfiprintf_r+0x5c>
 80063ac:	2a25      	cmp	r2, #37	; 0x25
 80063ae:	d1f9      	bne.n	80063a4 <_svfiprintf_r+0x50>
 80063b0:	ebba 0b04 	subs.w	fp, sl, r4
 80063b4:	d00b      	beq.n	80063ce <_svfiprintf_r+0x7a>
 80063b6:	465b      	mov	r3, fp
 80063b8:	4622      	mov	r2, r4
 80063ba:	4629      	mov	r1, r5
 80063bc:	4638      	mov	r0, r7
 80063be:	f7ff ff6d 	bl	800629c <__ssputs_r>
 80063c2:	3001      	adds	r0, #1
 80063c4:	f000 80aa 	beq.w	800651c <_svfiprintf_r+0x1c8>
 80063c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063ca:	445a      	add	r2, fp
 80063cc:	9209      	str	r2, [sp, #36]	; 0x24
 80063ce:	f89a 3000 	ldrb.w	r3, [sl]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	f000 80a2 	beq.w	800651c <_svfiprintf_r+0x1c8>
 80063d8:	2300      	movs	r3, #0
 80063da:	f04f 32ff 	mov.w	r2, #4294967295
 80063de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063e2:	f10a 0a01 	add.w	sl, sl, #1
 80063e6:	9304      	str	r3, [sp, #16]
 80063e8:	9307      	str	r3, [sp, #28]
 80063ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80063ee:	931a      	str	r3, [sp, #104]	; 0x68
 80063f0:	4654      	mov	r4, sl
 80063f2:	2205      	movs	r2, #5
 80063f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063f8:	4851      	ldr	r0, [pc, #324]	; (8006540 <_svfiprintf_r+0x1ec>)
 80063fa:	f7f9 fee9 	bl	80001d0 <memchr>
 80063fe:	9a04      	ldr	r2, [sp, #16]
 8006400:	b9d8      	cbnz	r0, 800643a <_svfiprintf_r+0xe6>
 8006402:	06d0      	lsls	r0, r2, #27
 8006404:	bf44      	itt	mi
 8006406:	2320      	movmi	r3, #32
 8006408:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800640c:	0711      	lsls	r1, r2, #28
 800640e:	bf44      	itt	mi
 8006410:	232b      	movmi	r3, #43	; 0x2b
 8006412:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006416:	f89a 3000 	ldrb.w	r3, [sl]
 800641a:	2b2a      	cmp	r3, #42	; 0x2a
 800641c:	d015      	beq.n	800644a <_svfiprintf_r+0xf6>
 800641e:	9a07      	ldr	r2, [sp, #28]
 8006420:	4654      	mov	r4, sl
 8006422:	2000      	movs	r0, #0
 8006424:	f04f 0c0a 	mov.w	ip, #10
 8006428:	4621      	mov	r1, r4
 800642a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800642e:	3b30      	subs	r3, #48	; 0x30
 8006430:	2b09      	cmp	r3, #9
 8006432:	d94e      	bls.n	80064d2 <_svfiprintf_r+0x17e>
 8006434:	b1b0      	cbz	r0, 8006464 <_svfiprintf_r+0x110>
 8006436:	9207      	str	r2, [sp, #28]
 8006438:	e014      	b.n	8006464 <_svfiprintf_r+0x110>
 800643a:	eba0 0308 	sub.w	r3, r0, r8
 800643e:	fa09 f303 	lsl.w	r3, r9, r3
 8006442:	4313      	orrs	r3, r2
 8006444:	9304      	str	r3, [sp, #16]
 8006446:	46a2      	mov	sl, r4
 8006448:	e7d2      	b.n	80063f0 <_svfiprintf_r+0x9c>
 800644a:	9b03      	ldr	r3, [sp, #12]
 800644c:	1d19      	adds	r1, r3, #4
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	9103      	str	r1, [sp, #12]
 8006452:	2b00      	cmp	r3, #0
 8006454:	bfbb      	ittet	lt
 8006456:	425b      	neglt	r3, r3
 8006458:	f042 0202 	orrlt.w	r2, r2, #2
 800645c:	9307      	strge	r3, [sp, #28]
 800645e:	9307      	strlt	r3, [sp, #28]
 8006460:	bfb8      	it	lt
 8006462:	9204      	strlt	r2, [sp, #16]
 8006464:	7823      	ldrb	r3, [r4, #0]
 8006466:	2b2e      	cmp	r3, #46	; 0x2e
 8006468:	d10c      	bne.n	8006484 <_svfiprintf_r+0x130>
 800646a:	7863      	ldrb	r3, [r4, #1]
 800646c:	2b2a      	cmp	r3, #42	; 0x2a
 800646e:	d135      	bne.n	80064dc <_svfiprintf_r+0x188>
 8006470:	9b03      	ldr	r3, [sp, #12]
 8006472:	1d1a      	adds	r2, r3, #4
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	9203      	str	r2, [sp, #12]
 8006478:	2b00      	cmp	r3, #0
 800647a:	bfb8      	it	lt
 800647c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006480:	3402      	adds	r4, #2
 8006482:	9305      	str	r3, [sp, #20]
 8006484:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006550 <_svfiprintf_r+0x1fc>
 8006488:	7821      	ldrb	r1, [r4, #0]
 800648a:	2203      	movs	r2, #3
 800648c:	4650      	mov	r0, sl
 800648e:	f7f9 fe9f 	bl	80001d0 <memchr>
 8006492:	b140      	cbz	r0, 80064a6 <_svfiprintf_r+0x152>
 8006494:	2340      	movs	r3, #64	; 0x40
 8006496:	eba0 000a 	sub.w	r0, r0, sl
 800649a:	fa03 f000 	lsl.w	r0, r3, r0
 800649e:	9b04      	ldr	r3, [sp, #16]
 80064a0:	4303      	orrs	r3, r0
 80064a2:	3401      	adds	r4, #1
 80064a4:	9304      	str	r3, [sp, #16]
 80064a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064aa:	4826      	ldr	r0, [pc, #152]	; (8006544 <_svfiprintf_r+0x1f0>)
 80064ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80064b0:	2206      	movs	r2, #6
 80064b2:	f7f9 fe8d 	bl	80001d0 <memchr>
 80064b6:	2800      	cmp	r0, #0
 80064b8:	d038      	beq.n	800652c <_svfiprintf_r+0x1d8>
 80064ba:	4b23      	ldr	r3, [pc, #140]	; (8006548 <_svfiprintf_r+0x1f4>)
 80064bc:	bb1b      	cbnz	r3, 8006506 <_svfiprintf_r+0x1b2>
 80064be:	9b03      	ldr	r3, [sp, #12]
 80064c0:	3307      	adds	r3, #7
 80064c2:	f023 0307 	bic.w	r3, r3, #7
 80064c6:	3308      	adds	r3, #8
 80064c8:	9303      	str	r3, [sp, #12]
 80064ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064cc:	4433      	add	r3, r6
 80064ce:	9309      	str	r3, [sp, #36]	; 0x24
 80064d0:	e767      	b.n	80063a2 <_svfiprintf_r+0x4e>
 80064d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80064d6:	460c      	mov	r4, r1
 80064d8:	2001      	movs	r0, #1
 80064da:	e7a5      	b.n	8006428 <_svfiprintf_r+0xd4>
 80064dc:	2300      	movs	r3, #0
 80064de:	3401      	adds	r4, #1
 80064e0:	9305      	str	r3, [sp, #20]
 80064e2:	4619      	mov	r1, r3
 80064e4:	f04f 0c0a 	mov.w	ip, #10
 80064e8:	4620      	mov	r0, r4
 80064ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064ee:	3a30      	subs	r2, #48	; 0x30
 80064f0:	2a09      	cmp	r2, #9
 80064f2:	d903      	bls.n	80064fc <_svfiprintf_r+0x1a8>
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d0c5      	beq.n	8006484 <_svfiprintf_r+0x130>
 80064f8:	9105      	str	r1, [sp, #20]
 80064fa:	e7c3      	b.n	8006484 <_svfiprintf_r+0x130>
 80064fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8006500:	4604      	mov	r4, r0
 8006502:	2301      	movs	r3, #1
 8006504:	e7f0      	b.n	80064e8 <_svfiprintf_r+0x194>
 8006506:	ab03      	add	r3, sp, #12
 8006508:	9300      	str	r3, [sp, #0]
 800650a:	462a      	mov	r2, r5
 800650c:	4b0f      	ldr	r3, [pc, #60]	; (800654c <_svfiprintf_r+0x1f8>)
 800650e:	a904      	add	r1, sp, #16
 8006510:	4638      	mov	r0, r7
 8006512:	f3af 8000 	nop.w
 8006516:	1c42      	adds	r2, r0, #1
 8006518:	4606      	mov	r6, r0
 800651a:	d1d6      	bne.n	80064ca <_svfiprintf_r+0x176>
 800651c:	89ab      	ldrh	r3, [r5, #12]
 800651e:	065b      	lsls	r3, r3, #25
 8006520:	f53f af2c 	bmi.w	800637c <_svfiprintf_r+0x28>
 8006524:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006526:	b01d      	add	sp, #116	; 0x74
 8006528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800652c:	ab03      	add	r3, sp, #12
 800652e:	9300      	str	r3, [sp, #0]
 8006530:	462a      	mov	r2, r5
 8006532:	4b06      	ldr	r3, [pc, #24]	; (800654c <_svfiprintf_r+0x1f8>)
 8006534:	a904      	add	r1, sp, #16
 8006536:	4638      	mov	r0, r7
 8006538:	f000 f87a 	bl	8006630 <_printf_i>
 800653c:	e7eb      	b.n	8006516 <_svfiprintf_r+0x1c2>
 800653e:	bf00      	nop
 8006540:	08008580 	.word	0x08008580
 8006544:	0800858a 	.word	0x0800858a
 8006548:	00000000 	.word	0x00000000
 800654c:	0800629d 	.word	0x0800629d
 8006550:	08008586 	.word	0x08008586

08006554 <_printf_common>:
 8006554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006558:	4616      	mov	r6, r2
 800655a:	4699      	mov	r9, r3
 800655c:	688a      	ldr	r2, [r1, #8]
 800655e:	690b      	ldr	r3, [r1, #16]
 8006560:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006564:	4293      	cmp	r3, r2
 8006566:	bfb8      	it	lt
 8006568:	4613      	movlt	r3, r2
 800656a:	6033      	str	r3, [r6, #0]
 800656c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006570:	4607      	mov	r7, r0
 8006572:	460c      	mov	r4, r1
 8006574:	b10a      	cbz	r2, 800657a <_printf_common+0x26>
 8006576:	3301      	adds	r3, #1
 8006578:	6033      	str	r3, [r6, #0]
 800657a:	6823      	ldr	r3, [r4, #0]
 800657c:	0699      	lsls	r1, r3, #26
 800657e:	bf42      	ittt	mi
 8006580:	6833      	ldrmi	r3, [r6, #0]
 8006582:	3302      	addmi	r3, #2
 8006584:	6033      	strmi	r3, [r6, #0]
 8006586:	6825      	ldr	r5, [r4, #0]
 8006588:	f015 0506 	ands.w	r5, r5, #6
 800658c:	d106      	bne.n	800659c <_printf_common+0x48>
 800658e:	f104 0a19 	add.w	sl, r4, #25
 8006592:	68e3      	ldr	r3, [r4, #12]
 8006594:	6832      	ldr	r2, [r6, #0]
 8006596:	1a9b      	subs	r3, r3, r2
 8006598:	42ab      	cmp	r3, r5
 800659a:	dc26      	bgt.n	80065ea <_printf_common+0x96>
 800659c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80065a0:	1e13      	subs	r3, r2, #0
 80065a2:	6822      	ldr	r2, [r4, #0]
 80065a4:	bf18      	it	ne
 80065a6:	2301      	movne	r3, #1
 80065a8:	0692      	lsls	r2, r2, #26
 80065aa:	d42b      	bmi.n	8006604 <_printf_common+0xb0>
 80065ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80065b0:	4649      	mov	r1, r9
 80065b2:	4638      	mov	r0, r7
 80065b4:	47c0      	blx	r8
 80065b6:	3001      	adds	r0, #1
 80065b8:	d01e      	beq.n	80065f8 <_printf_common+0xa4>
 80065ba:	6823      	ldr	r3, [r4, #0]
 80065bc:	68e5      	ldr	r5, [r4, #12]
 80065be:	6832      	ldr	r2, [r6, #0]
 80065c0:	f003 0306 	and.w	r3, r3, #6
 80065c4:	2b04      	cmp	r3, #4
 80065c6:	bf08      	it	eq
 80065c8:	1aad      	subeq	r5, r5, r2
 80065ca:	68a3      	ldr	r3, [r4, #8]
 80065cc:	6922      	ldr	r2, [r4, #16]
 80065ce:	bf0c      	ite	eq
 80065d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065d4:	2500      	movne	r5, #0
 80065d6:	4293      	cmp	r3, r2
 80065d8:	bfc4      	itt	gt
 80065da:	1a9b      	subgt	r3, r3, r2
 80065dc:	18ed      	addgt	r5, r5, r3
 80065de:	2600      	movs	r6, #0
 80065e0:	341a      	adds	r4, #26
 80065e2:	42b5      	cmp	r5, r6
 80065e4:	d11a      	bne.n	800661c <_printf_common+0xc8>
 80065e6:	2000      	movs	r0, #0
 80065e8:	e008      	b.n	80065fc <_printf_common+0xa8>
 80065ea:	2301      	movs	r3, #1
 80065ec:	4652      	mov	r2, sl
 80065ee:	4649      	mov	r1, r9
 80065f0:	4638      	mov	r0, r7
 80065f2:	47c0      	blx	r8
 80065f4:	3001      	adds	r0, #1
 80065f6:	d103      	bne.n	8006600 <_printf_common+0xac>
 80065f8:	f04f 30ff 	mov.w	r0, #4294967295
 80065fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006600:	3501      	adds	r5, #1
 8006602:	e7c6      	b.n	8006592 <_printf_common+0x3e>
 8006604:	18e1      	adds	r1, r4, r3
 8006606:	1c5a      	adds	r2, r3, #1
 8006608:	2030      	movs	r0, #48	; 0x30
 800660a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800660e:	4422      	add	r2, r4
 8006610:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006614:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006618:	3302      	adds	r3, #2
 800661a:	e7c7      	b.n	80065ac <_printf_common+0x58>
 800661c:	2301      	movs	r3, #1
 800661e:	4622      	mov	r2, r4
 8006620:	4649      	mov	r1, r9
 8006622:	4638      	mov	r0, r7
 8006624:	47c0      	blx	r8
 8006626:	3001      	adds	r0, #1
 8006628:	d0e6      	beq.n	80065f8 <_printf_common+0xa4>
 800662a:	3601      	adds	r6, #1
 800662c:	e7d9      	b.n	80065e2 <_printf_common+0x8e>
	...

08006630 <_printf_i>:
 8006630:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006634:	460c      	mov	r4, r1
 8006636:	4691      	mov	r9, r2
 8006638:	7e27      	ldrb	r7, [r4, #24]
 800663a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800663c:	2f78      	cmp	r7, #120	; 0x78
 800663e:	4680      	mov	r8, r0
 8006640:	469a      	mov	sl, r3
 8006642:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006646:	d807      	bhi.n	8006658 <_printf_i+0x28>
 8006648:	2f62      	cmp	r7, #98	; 0x62
 800664a:	d80a      	bhi.n	8006662 <_printf_i+0x32>
 800664c:	2f00      	cmp	r7, #0
 800664e:	f000 80d8 	beq.w	8006802 <_printf_i+0x1d2>
 8006652:	2f58      	cmp	r7, #88	; 0x58
 8006654:	f000 80a3 	beq.w	800679e <_printf_i+0x16e>
 8006658:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800665c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006660:	e03a      	b.n	80066d8 <_printf_i+0xa8>
 8006662:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006666:	2b15      	cmp	r3, #21
 8006668:	d8f6      	bhi.n	8006658 <_printf_i+0x28>
 800666a:	a001      	add	r0, pc, #4	; (adr r0, 8006670 <_printf_i+0x40>)
 800666c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006670:	080066c9 	.word	0x080066c9
 8006674:	080066dd 	.word	0x080066dd
 8006678:	08006659 	.word	0x08006659
 800667c:	08006659 	.word	0x08006659
 8006680:	08006659 	.word	0x08006659
 8006684:	08006659 	.word	0x08006659
 8006688:	080066dd 	.word	0x080066dd
 800668c:	08006659 	.word	0x08006659
 8006690:	08006659 	.word	0x08006659
 8006694:	08006659 	.word	0x08006659
 8006698:	08006659 	.word	0x08006659
 800669c:	080067e9 	.word	0x080067e9
 80066a0:	0800670d 	.word	0x0800670d
 80066a4:	080067cb 	.word	0x080067cb
 80066a8:	08006659 	.word	0x08006659
 80066ac:	08006659 	.word	0x08006659
 80066b0:	0800680b 	.word	0x0800680b
 80066b4:	08006659 	.word	0x08006659
 80066b8:	0800670d 	.word	0x0800670d
 80066bc:	08006659 	.word	0x08006659
 80066c0:	08006659 	.word	0x08006659
 80066c4:	080067d3 	.word	0x080067d3
 80066c8:	680b      	ldr	r3, [r1, #0]
 80066ca:	1d1a      	adds	r2, r3, #4
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	600a      	str	r2, [r1, #0]
 80066d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80066d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80066d8:	2301      	movs	r3, #1
 80066da:	e0a3      	b.n	8006824 <_printf_i+0x1f4>
 80066dc:	6825      	ldr	r5, [r4, #0]
 80066de:	6808      	ldr	r0, [r1, #0]
 80066e0:	062e      	lsls	r6, r5, #24
 80066e2:	f100 0304 	add.w	r3, r0, #4
 80066e6:	d50a      	bpl.n	80066fe <_printf_i+0xce>
 80066e8:	6805      	ldr	r5, [r0, #0]
 80066ea:	600b      	str	r3, [r1, #0]
 80066ec:	2d00      	cmp	r5, #0
 80066ee:	da03      	bge.n	80066f8 <_printf_i+0xc8>
 80066f0:	232d      	movs	r3, #45	; 0x2d
 80066f2:	426d      	negs	r5, r5
 80066f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066f8:	485e      	ldr	r0, [pc, #376]	; (8006874 <_printf_i+0x244>)
 80066fa:	230a      	movs	r3, #10
 80066fc:	e019      	b.n	8006732 <_printf_i+0x102>
 80066fe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006702:	6805      	ldr	r5, [r0, #0]
 8006704:	600b      	str	r3, [r1, #0]
 8006706:	bf18      	it	ne
 8006708:	b22d      	sxthne	r5, r5
 800670a:	e7ef      	b.n	80066ec <_printf_i+0xbc>
 800670c:	680b      	ldr	r3, [r1, #0]
 800670e:	6825      	ldr	r5, [r4, #0]
 8006710:	1d18      	adds	r0, r3, #4
 8006712:	6008      	str	r0, [r1, #0]
 8006714:	0628      	lsls	r0, r5, #24
 8006716:	d501      	bpl.n	800671c <_printf_i+0xec>
 8006718:	681d      	ldr	r5, [r3, #0]
 800671a:	e002      	b.n	8006722 <_printf_i+0xf2>
 800671c:	0669      	lsls	r1, r5, #25
 800671e:	d5fb      	bpl.n	8006718 <_printf_i+0xe8>
 8006720:	881d      	ldrh	r5, [r3, #0]
 8006722:	4854      	ldr	r0, [pc, #336]	; (8006874 <_printf_i+0x244>)
 8006724:	2f6f      	cmp	r7, #111	; 0x6f
 8006726:	bf0c      	ite	eq
 8006728:	2308      	moveq	r3, #8
 800672a:	230a      	movne	r3, #10
 800672c:	2100      	movs	r1, #0
 800672e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006732:	6866      	ldr	r6, [r4, #4]
 8006734:	60a6      	str	r6, [r4, #8]
 8006736:	2e00      	cmp	r6, #0
 8006738:	bfa2      	ittt	ge
 800673a:	6821      	ldrge	r1, [r4, #0]
 800673c:	f021 0104 	bicge.w	r1, r1, #4
 8006740:	6021      	strge	r1, [r4, #0]
 8006742:	b90d      	cbnz	r5, 8006748 <_printf_i+0x118>
 8006744:	2e00      	cmp	r6, #0
 8006746:	d04d      	beq.n	80067e4 <_printf_i+0x1b4>
 8006748:	4616      	mov	r6, r2
 800674a:	fbb5 f1f3 	udiv	r1, r5, r3
 800674e:	fb03 5711 	mls	r7, r3, r1, r5
 8006752:	5dc7      	ldrb	r7, [r0, r7]
 8006754:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006758:	462f      	mov	r7, r5
 800675a:	42bb      	cmp	r3, r7
 800675c:	460d      	mov	r5, r1
 800675e:	d9f4      	bls.n	800674a <_printf_i+0x11a>
 8006760:	2b08      	cmp	r3, #8
 8006762:	d10b      	bne.n	800677c <_printf_i+0x14c>
 8006764:	6823      	ldr	r3, [r4, #0]
 8006766:	07df      	lsls	r7, r3, #31
 8006768:	d508      	bpl.n	800677c <_printf_i+0x14c>
 800676a:	6923      	ldr	r3, [r4, #16]
 800676c:	6861      	ldr	r1, [r4, #4]
 800676e:	4299      	cmp	r1, r3
 8006770:	bfde      	ittt	le
 8006772:	2330      	movle	r3, #48	; 0x30
 8006774:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006778:	f106 36ff 	addle.w	r6, r6, #4294967295
 800677c:	1b92      	subs	r2, r2, r6
 800677e:	6122      	str	r2, [r4, #16]
 8006780:	f8cd a000 	str.w	sl, [sp]
 8006784:	464b      	mov	r3, r9
 8006786:	aa03      	add	r2, sp, #12
 8006788:	4621      	mov	r1, r4
 800678a:	4640      	mov	r0, r8
 800678c:	f7ff fee2 	bl	8006554 <_printf_common>
 8006790:	3001      	adds	r0, #1
 8006792:	d14c      	bne.n	800682e <_printf_i+0x1fe>
 8006794:	f04f 30ff 	mov.w	r0, #4294967295
 8006798:	b004      	add	sp, #16
 800679a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800679e:	4835      	ldr	r0, [pc, #212]	; (8006874 <_printf_i+0x244>)
 80067a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80067a4:	6823      	ldr	r3, [r4, #0]
 80067a6:	680e      	ldr	r6, [r1, #0]
 80067a8:	061f      	lsls	r7, r3, #24
 80067aa:	f856 5b04 	ldr.w	r5, [r6], #4
 80067ae:	600e      	str	r6, [r1, #0]
 80067b0:	d514      	bpl.n	80067dc <_printf_i+0x1ac>
 80067b2:	07d9      	lsls	r1, r3, #31
 80067b4:	bf44      	itt	mi
 80067b6:	f043 0320 	orrmi.w	r3, r3, #32
 80067ba:	6023      	strmi	r3, [r4, #0]
 80067bc:	b91d      	cbnz	r5, 80067c6 <_printf_i+0x196>
 80067be:	6823      	ldr	r3, [r4, #0]
 80067c0:	f023 0320 	bic.w	r3, r3, #32
 80067c4:	6023      	str	r3, [r4, #0]
 80067c6:	2310      	movs	r3, #16
 80067c8:	e7b0      	b.n	800672c <_printf_i+0xfc>
 80067ca:	6823      	ldr	r3, [r4, #0]
 80067cc:	f043 0320 	orr.w	r3, r3, #32
 80067d0:	6023      	str	r3, [r4, #0]
 80067d2:	2378      	movs	r3, #120	; 0x78
 80067d4:	4828      	ldr	r0, [pc, #160]	; (8006878 <_printf_i+0x248>)
 80067d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80067da:	e7e3      	b.n	80067a4 <_printf_i+0x174>
 80067dc:	065e      	lsls	r6, r3, #25
 80067de:	bf48      	it	mi
 80067e0:	b2ad      	uxthmi	r5, r5
 80067e2:	e7e6      	b.n	80067b2 <_printf_i+0x182>
 80067e4:	4616      	mov	r6, r2
 80067e6:	e7bb      	b.n	8006760 <_printf_i+0x130>
 80067e8:	680b      	ldr	r3, [r1, #0]
 80067ea:	6826      	ldr	r6, [r4, #0]
 80067ec:	6960      	ldr	r0, [r4, #20]
 80067ee:	1d1d      	adds	r5, r3, #4
 80067f0:	600d      	str	r5, [r1, #0]
 80067f2:	0635      	lsls	r5, r6, #24
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	d501      	bpl.n	80067fc <_printf_i+0x1cc>
 80067f8:	6018      	str	r0, [r3, #0]
 80067fa:	e002      	b.n	8006802 <_printf_i+0x1d2>
 80067fc:	0671      	lsls	r1, r6, #25
 80067fe:	d5fb      	bpl.n	80067f8 <_printf_i+0x1c8>
 8006800:	8018      	strh	r0, [r3, #0]
 8006802:	2300      	movs	r3, #0
 8006804:	6123      	str	r3, [r4, #16]
 8006806:	4616      	mov	r6, r2
 8006808:	e7ba      	b.n	8006780 <_printf_i+0x150>
 800680a:	680b      	ldr	r3, [r1, #0]
 800680c:	1d1a      	adds	r2, r3, #4
 800680e:	600a      	str	r2, [r1, #0]
 8006810:	681e      	ldr	r6, [r3, #0]
 8006812:	6862      	ldr	r2, [r4, #4]
 8006814:	2100      	movs	r1, #0
 8006816:	4630      	mov	r0, r6
 8006818:	f7f9 fcda 	bl	80001d0 <memchr>
 800681c:	b108      	cbz	r0, 8006822 <_printf_i+0x1f2>
 800681e:	1b80      	subs	r0, r0, r6
 8006820:	6060      	str	r0, [r4, #4]
 8006822:	6863      	ldr	r3, [r4, #4]
 8006824:	6123      	str	r3, [r4, #16]
 8006826:	2300      	movs	r3, #0
 8006828:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800682c:	e7a8      	b.n	8006780 <_printf_i+0x150>
 800682e:	6923      	ldr	r3, [r4, #16]
 8006830:	4632      	mov	r2, r6
 8006832:	4649      	mov	r1, r9
 8006834:	4640      	mov	r0, r8
 8006836:	47d0      	blx	sl
 8006838:	3001      	adds	r0, #1
 800683a:	d0ab      	beq.n	8006794 <_printf_i+0x164>
 800683c:	6823      	ldr	r3, [r4, #0]
 800683e:	079b      	lsls	r3, r3, #30
 8006840:	d413      	bmi.n	800686a <_printf_i+0x23a>
 8006842:	68e0      	ldr	r0, [r4, #12]
 8006844:	9b03      	ldr	r3, [sp, #12]
 8006846:	4298      	cmp	r0, r3
 8006848:	bfb8      	it	lt
 800684a:	4618      	movlt	r0, r3
 800684c:	e7a4      	b.n	8006798 <_printf_i+0x168>
 800684e:	2301      	movs	r3, #1
 8006850:	4632      	mov	r2, r6
 8006852:	4649      	mov	r1, r9
 8006854:	4640      	mov	r0, r8
 8006856:	47d0      	blx	sl
 8006858:	3001      	adds	r0, #1
 800685a:	d09b      	beq.n	8006794 <_printf_i+0x164>
 800685c:	3501      	adds	r5, #1
 800685e:	68e3      	ldr	r3, [r4, #12]
 8006860:	9903      	ldr	r1, [sp, #12]
 8006862:	1a5b      	subs	r3, r3, r1
 8006864:	42ab      	cmp	r3, r5
 8006866:	dcf2      	bgt.n	800684e <_printf_i+0x21e>
 8006868:	e7eb      	b.n	8006842 <_printf_i+0x212>
 800686a:	2500      	movs	r5, #0
 800686c:	f104 0619 	add.w	r6, r4, #25
 8006870:	e7f5      	b.n	800685e <_printf_i+0x22e>
 8006872:	bf00      	nop
 8006874:	08008591 	.word	0x08008591
 8006878:	080085a2 	.word	0x080085a2

0800687c <memcpy>:
 800687c:	440a      	add	r2, r1
 800687e:	4291      	cmp	r1, r2
 8006880:	f100 33ff 	add.w	r3, r0, #4294967295
 8006884:	d100      	bne.n	8006888 <memcpy+0xc>
 8006886:	4770      	bx	lr
 8006888:	b510      	push	{r4, lr}
 800688a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800688e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006892:	4291      	cmp	r1, r2
 8006894:	d1f9      	bne.n	800688a <memcpy+0xe>
 8006896:	bd10      	pop	{r4, pc}

08006898 <memmove>:
 8006898:	4288      	cmp	r0, r1
 800689a:	b510      	push	{r4, lr}
 800689c:	eb01 0402 	add.w	r4, r1, r2
 80068a0:	d902      	bls.n	80068a8 <memmove+0x10>
 80068a2:	4284      	cmp	r4, r0
 80068a4:	4623      	mov	r3, r4
 80068a6:	d807      	bhi.n	80068b8 <memmove+0x20>
 80068a8:	1e43      	subs	r3, r0, #1
 80068aa:	42a1      	cmp	r1, r4
 80068ac:	d008      	beq.n	80068c0 <memmove+0x28>
 80068ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80068b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80068b6:	e7f8      	b.n	80068aa <memmove+0x12>
 80068b8:	4402      	add	r2, r0
 80068ba:	4601      	mov	r1, r0
 80068bc:	428a      	cmp	r2, r1
 80068be:	d100      	bne.n	80068c2 <memmove+0x2a>
 80068c0:	bd10      	pop	{r4, pc}
 80068c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80068c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80068ca:	e7f7      	b.n	80068bc <memmove+0x24>

080068cc <_free_r>:
 80068cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80068ce:	2900      	cmp	r1, #0
 80068d0:	d048      	beq.n	8006964 <_free_r+0x98>
 80068d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068d6:	9001      	str	r0, [sp, #4]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	f1a1 0404 	sub.w	r4, r1, #4
 80068de:	bfb8      	it	lt
 80068e0:	18e4      	addlt	r4, r4, r3
 80068e2:	f000 f8d3 	bl	8006a8c <__malloc_lock>
 80068e6:	4a20      	ldr	r2, [pc, #128]	; (8006968 <_free_r+0x9c>)
 80068e8:	9801      	ldr	r0, [sp, #4]
 80068ea:	6813      	ldr	r3, [r2, #0]
 80068ec:	4615      	mov	r5, r2
 80068ee:	b933      	cbnz	r3, 80068fe <_free_r+0x32>
 80068f0:	6063      	str	r3, [r4, #4]
 80068f2:	6014      	str	r4, [r2, #0]
 80068f4:	b003      	add	sp, #12
 80068f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80068fa:	f000 b8cd 	b.w	8006a98 <__malloc_unlock>
 80068fe:	42a3      	cmp	r3, r4
 8006900:	d90b      	bls.n	800691a <_free_r+0x4e>
 8006902:	6821      	ldr	r1, [r4, #0]
 8006904:	1862      	adds	r2, r4, r1
 8006906:	4293      	cmp	r3, r2
 8006908:	bf04      	itt	eq
 800690a:	681a      	ldreq	r2, [r3, #0]
 800690c:	685b      	ldreq	r3, [r3, #4]
 800690e:	6063      	str	r3, [r4, #4]
 8006910:	bf04      	itt	eq
 8006912:	1852      	addeq	r2, r2, r1
 8006914:	6022      	streq	r2, [r4, #0]
 8006916:	602c      	str	r4, [r5, #0]
 8006918:	e7ec      	b.n	80068f4 <_free_r+0x28>
 800691a:	461a      	mov	r2, r3
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	b10b      	cbz	r3, 8006924 <_free_r+0x58>
 8006920:	42a3      	cmp	r3, r4
 8006922:	d9fa      	bls.n	800691a <_free_r+0x4e>
 8006924:	6811      	ldr	r1, [r2, #0]
 8006926:	1855      	adds	r5, r2, r1
 8006928:	42a5      	cmp	r5, r4
 800692a:	d10b      	bne.n	8006944 <_free_r+0x78>
 800692c:	6824      	ldr	r4, [r4, #0]
 800692e:	4421      	add	r1, r4
 8006930:	1854      	adds	r4, r2, r1
 8006932:	42a3      	cmp	r3, r4
 8006934:	6011      	str	r1, [r2, #0]
 8006936:	d1dd      	bne.n	80068f4 <_free_r+0x28>
 8006938:	681c      	ldr	r4, [r3, #0]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	6053      	str	r3, [r2, #4]
 800693e:	4421      	add	r1, r4
 8006940:	6011      	str	r1, [r2, #0]
 8006942:	e7d7      	b.n	80068f4 <_free_r+0x28>
 8006944:	d902      	bls.n	800694c <_free_r+0x80>
 8006946:	230c      	movs	r3, #12
 8006948:	6003      	str	r3, [r0, #0]
 800694a:	e7d3      	b.n	80068f4 <_free_r+0x28>
 800694c:	6825      	ldr	r5, [r4, #0]
 800694e:	1961      	adds	r1, r4, r5
 8006950:	428b      	cmp	r3, r1
 8006952:	bf04      	itt	eq
 8006954:	6819      	ldreq	r1, [r3, #0]
 8006956:	685b      	ldreq	r3, [r3, #4]
 8006958:	6063      	str	r3, [r4, #4]
 800695a:	bf04      	itt	eq
 800695c:	1949      	addeq	r1, r1, r5
 800695e:	6021      	streq	r1, [r4, #0]
 8006960:	6054      	str	r4, [r2, #4]
 8006962:	e7c7      	b.n	80068f4 <_free_r+0x28>
 8006964:	b003      	add	sp, #12
 8006966:	bd30      	pop	{r4, r5, pc}
 8006968:	200004b0 	.word	0x200004b0

0800696c <_malloc_r>:
 800696c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800696e:	1ccd      	adds	r5, r1, #3
 8006970:	f025 0503 	bic.w	r5, r5, #3
 8006974:	3508      	adds	r5, #8
 8006976:	2d0c      	cmp	r5, #12
 8006978:	bf38      	it	cc
 800697a:	250c      	movcc	r5, #12
 800697c:	2d00      	cmp	r5, #0
 800697e:	4606      	mov	r6, r0
 8006980:	db01      	blt.n	8006986 <_malloc_r+0x1a>
 8006982:	42a9      	cmp	r1, r5
 8006984:	d903      	bls.n	800698e <_malloc_r+0x22>
 8006986:	230c      	movs	r3, #12
 8006988:	6033      	str	r3, [r6, #0]
 800698a:	2000      	movs	r0, #0
 800698c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800698e:	f000 f87d 	bl	8006a8c <__malloc_lock>
 8006992:	4921      	ldr	r1, [pc, #132]	; (8006a18 <_malloc_r+0xac>)
 8006994:	680a      	ldr	r2, [r1, #0]
 8006996:	4614      	mov	r4, r2
 8006998:	b99c      	cbnz	r4, 80069c2 <_malloc_r+0x56>
 800699a:	4f20      	ldr	r7, [pc, #128]	; (8006a1c <_malloc_r+0xb0>)
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	b923      	cbnz	r3, 80069aa <_malloc_r+0x3e>
 80069a0:	4621      	mov	r1, r4
 80069a2:	4630      	mov	r0, r6
 80069a4:	f000 f862 	bl	8006a6c <_sbrk_r>
 80069a8:	6038      	str	r0, [r7, #0]
 80069aa:	4629      	mov	r1, r5
 80069ac:	4630      	mov	r0, r6
 80069ae:	f000 f85d 	bl	8006a6c <_sbrk_r>
 80069b2:	1c43      	adds	r3, r0, #1
 80069b4:	d123      	bne.n	80069fe <_malloc_r+0x92>
 80069b6:	230c      	movs	r3, #12
 80069b8:	6033      	str	r3, [r6, #0]
 80069ba:	4630      	mov	r0, r6
 80069bc:	f000 f86c 	bl	8006a98 <__malloc_unlock>
 80069c0:	e7e3      	b.n	800698a <_malloc_r+0x1e>
 80069c2:	6823      	ldr	r3, [r4, #0]
 80069c4:	1b5b      	subs	r3, r3, r5
 80069c6:	d417      	bmi.n	80069f8 <_malloc_r+0x8c>
 80069c8:	2b0b      	cmp	r3, #11
 80069ca:	d903      	bls.n	80069d4 <_malloc_r+0x68>
 80069cc:	6023      	str	r3, [r4, #0]
 80069ce:	441c      	add	r4, r3
 80069d0:	6025      	str	r5, [r4, #0]
 80069d2:	e004      	b.n	80069de <_malloc_r+0x72>
 80069d4:	6863      	ldr	r3, [r4, #4]
 80069d6:	42a2      	cmp	r2, r4
 80069d8:	bf0c      	ite	eq
 80069da:	600b      	streq	r3, [r1, #0]
 80069dc:	6053      	strne	r3, [r2, #4]
 80069de:	4630      	mov	r0, r6
 80069e0:	f000 f85a 	bl	8006a98 <__malloc_unlock>
 80069e4:	f104 000b 	add.w	r0, r4, #11
 80069e8:	1d23      	adds	r3, r4, #4
 80069ea:	f020 0007 	bic.w	r0, r0, #7
 80069ee:	1ac2      	subs	r2, r0, r3
 80069f0:	d0cc      	beq.n	800698c <_malloc_r+0x20>
 80069f2:	1a1b      	subs	r3, r3, r0
 80069f4:	50a3      	str	r3, [r4, r2]
 80069f6:	e7c9      	b.n	800698c <_malloc_r+0x20>
 80069f8:	4622      	mov	r2, r4
 80069fa:	6864      	ldr	r4, [r4, #4]
 80069fc:	e7cc      	b.n	8006998 <_malloc_r+0x2c>
 80069fe:	1cc4      	adds	r4, r0, #3
 8006a00:	f024 0403 	bic.w	r4, r4, #3
 8006a04:	42a0      	cmp	r0, r4
 8006a06:	d0e3      	beq.n	80069d0 <_malloc_r+0x64>
 8006a08:	1a21      	subs	r1, r4, r0
 8006a0a:	4630      	mov	r0, r6
 8006a0c:	f000 f82e 	bl	8006a6c <_sbrk_r>
 8006a10:	3001      	adds	r0, #1
 8006a12:	d1dd      	bne.n	80069d0 <_malloc_r+0x64>
 8006a14:	e7cf      	b.n	80069b6 <_malloc_r+0x4a>
 8006a16:	bf00      	nop
 8006a18:	200004b0 	.word	0x200004b0
 8006a1c:	200004b4 	.word	0x200004b4

08006a20 <_realloc_r>:
 8006a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a22:	4607      	mov	r7, r0
 8006a24:	4614      	mov	r4, r2
 8006a26:	460e      	mov	r6, r1
 8006a28:	b921      	cbnz	r1, 8006a34 <_realloc_r+0x14>
 8006a2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006a2e:	4611      	mov	r1, r2
 8006a30:	f7ff bf9c 	b.w	800696c <_malloc_r>
 8006a34:	b922      	cbnz	r2, 8006a40 <_realloc_r+0x20>
 8006a36:	f7ff ff49 	bl	80068cc <_free_r>
 8006a3a:	4625      	mov	r5, r4
 8006a3c:	4628      	mov	r0, r5
 8006a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a40:	f000 f830 	bl	8006aa4 <_malloc_usable_size_r>
 8006a44:	42a0      	cmp	r0, r4
 8006a46:	d20f      	bcs.n	8006a68 <_realloc_r+0x48>
 8006a48:	4621      	mov	r1, r4
 8006a4a:	4638      	mov	r0, r7
 8006a4c:	f7ff ff8e 	bl	800696c <_malloc_r>
 8006a50:	4605      	mov	r5, r0
 8006a52:	2800      	cmp	r0, #0
 8006a54:	d0f2      	beq.n	8006a3c <_realloc_r+0x1c>
 8006a56:	4631      	mov	r1, r6
 8006a58:	4622      	mov	r2, r4
 8006a5a:	f7ff ff0f 	bl	800687c <memcpy>
 8006a5e:	4631      	mov	r1, r6
 8006a60:	4638      	mov	r0, r7
 8006a62:	f7ff ff33 	bl	80068cc <_free_r>
 8006a66:	e7e9      	b.n	8006a3c <_realloc_r+0x1c>
 8006a68:	4635      	mov	r5, r6
 8006a6a:	e7e7      	b.n	8006a3c <_realloc_r+0x1c>

08006a6c <_sbrk_r>:
 8006a6c:	b538      	push	{r3, r4, r5, lr}
 8006a6e:	4d06      	ldr	r5, [pc, #24]	; (8006a88 <_sbrk_r+0x1c>)
 8006a70:	2300      	movs	r3, #0
 8006a72:	4604      	mov	r4, r0
 8006a74:	4608      	mov	r0, r1
 8006a76:	602b      	str	r3, [r5, #0]
 8006a78:	f7fb fdf2 	bl	8002660 <_sbrk>
 8006a7c:	1c43      	adds	r3, r0, #1
 8006a7e:	d102      	bne.n	8006a86 <_sbrk_r+0x1a>
 8006a80:	682b      	ldr	r3, [r5, #0]
 8006a82:	b103      	cbz	r3, 8006a86 <_sbrk_r+0x1a>
 8006a84:	6023      	str	r3, [r4, #0]
 8006a86:	bd38      	pop	{r3, r4, r5, pc}
 8006a88:	200006f0 	.word	0x200006f0

08006a8c <__malloc_lock>:
 8006a8c:	4801      	ldr	r0, [pc, #4]	; (8006a94 <__malloc_lock+0x8>)
 8006a8e:	f000 b811 	b.w	8006ab4 <__retarget_lock_acquire_recursive>
 8006a92:	bf00      	nop
 8006a94:	200006f8 	.word	0x200006f8

08006a98 <__malloc_unlock>:
 8006a98:	4801      	ldr	r0, [pc, #4]	; (8006aa0 <__malloc_unlock+0x8>)
 8006a9a:	f000 b80c 	b.w	8006ab6 <__retarget_lock_release_recursive>
 8006a9e:	bf00      	nop
 8006aa0:	200006f8 	.word	0x200006f8

08006aa4 <_malloc_usable_size_r>:
 8006aa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006aa8:	1f18      	subs	r0, r3, #4
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	bfbc      	itt	lt
 8006aae:	580b      	ldrlt	r3, [r1, r0]
 8006ab0:	18c0      	addlt	r0, r0, r3
 8006ab2:	4770      	bx	lr

08006ab4 <__retarget_lock_acquire_recursive>:
 8006ab4:	4770      	bx	lr

08006ab6 <__retarget_lock_release_recursive>:
 8006ab6:	4770      	bx	lr

08006ab8 <atan>:
 8006ab8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006abc:	ec55 4b10 	vmov	r4, r5, d0
 8006ac0:	4bc3      	ldr	r3, [pc, #780]	; (8006dd0 <atan+0x318>)
 8006ac2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006ac6:	429e      	cmp	r6, r3
 8006ac8:	46ab      	mov	fp, r5
 8006aca:	dd18      	ble.n	8006afe <atan+0x46>
 8006acc:	4bc1      	ldr	r3, [pc, #772]	; (8006dd4 <atan+0x31c>)
 8006ace:	429e      	cmp	r6, r3
 8006ad0:	dc01      	bgt.n	8006ad6 <atan+0x1e>
 8006ad2:	d109      	bne.n	8006ae8 <atan+0x30>
 8006ad4:	b144      	cbz	r4, 8006ae8 <atan+0x30>
 8006ad6:	4622      	mov	r2, r4
 8006ad8:	462b      	mov	r3, r5
 8006ada:	4620      	mov	r0, r4
 8006adc:	4629      	mov	r1, r5
 8006ade:	f7f9 fbcd 	bl	800027c <__adddf3>
 8006ae2:	4604      	mov	r4, r0
 8006ae4:	460d      	mov	r5, r1
 8006ae6:	e006      	b.n	8006af6 <atan+0x3e>
 8006ae8:	f1bb 0f00 	cmp.w	fp, #0
 8006aec:	f300 8131 	bgt.w	8006d52 <atan+0x29a>
 8006af0:	a59b      	add	r5, pc, #620	; (adr r5, 8006d60 <atan+0x2a8>)
 8006af2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006af6:	ec45 4b10 	vmov	d0, r4, r5
 8006afa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006afe:	4bb6      	ldr	r3, [pc, #728]	; (8006dd8 <atan+0x320>)
 8006b00:	429e      	cmp	r6, r3
 8006b02:	dc14      	bgt.n	8006b2e <atan+0x76>
 8006b04:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8006b08:	429e      	cmp	r6, r3
 8006b0a:	dc0d      	bgt.n	8006b28 <atan+0x70>
 8006b0c:	a396      	add	r3, pc, #600	; (adr r3, 8006d68 <atan+0x2b0>)
 8006b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b12:	ee10 0a10 	vmov	r0, s0
 8006b16:	4629      	mov	r1, r5
 8006b18:	f7f9 fbb0 	bl	800027c <__adddf3>
 8006b1c:	4baf      	ldr	r3, [pc, #700]	; (8006ddc <atan+0x324>)
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f7f9 fff2 	bl	8000b08 <__aeabi_dcmpgt>
 8006b24:	2800      	cmp	r0, #0
 8006b26:	d1e6      	bne.n	8006af6 <atan+0x3e>
 8006b28:	f04f 3aff 	mov.w	sl, #4294967295
 8006b2c:	e02b      	b.n	8006b86 <atan+0xce>
 8006b2e:	f000 f963 	bl	8006df8 <fabs>
 8006b32:	4bab      	ldr	r3, [pc, #684]	; (8006de0 <atan+0x328>)
 8006b34:	429e      	cmp	r6, r3
 8006b36:	ec55 4b10 	vmov	r4, r5, d0
 8006b3a:	f300 80bf 	bgt.w	8006cbc <atan+0x204>
 8006b3e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8006b42:	429e      	cmp	r6, r3
 8006b44:	f300 80a0 	bgt.w	8006c88 <atan+0x1d0>
 8006b48:	ee10 2a10 	vmov	r2, s0
 8006b4c:	ee10 0a10 	vmov	r0, s0
 8006b50:	462b      	mov	r3, r5
 8006b52:	4629      	mov	r1, r5
 8006b54:	f7f9 fb92 	bl	800027c <__adddf3>
 8006b58:	4ba0      	ldr	r3, [pc, #640]	; (8006ddc <atan+0x324>)
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f7f9 fb8c 	bl	8000278 <__aeabi_dsub>
 8006b60:	2200      	movs	r2, #0
 8006b62:	4606      	mov	r6, r0
 8006b64:	460f      	mov	r7, r1
 8006b66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006b6a:	4620      	mov	r0, r4
 8006b6c:	4629      	mov	r1, r5
 8006b6e:	f7f9 fb85 	bl	800027c <__adddf3>
 8006b72:	4602      	mov	r2, r0
 8006b74:	460b      	mov	r3, r1
 8006b76:	4630      	mov	r0, r6
 8006b78:	4639      	mov	r1, r7
 8006b7a:	f7f9 fe5f 	bl	800083c <__aeabi_ddiv>
 8006b7e:	f04f 0a00 	mov.w	sl, #0
 8006b82:	4604      	mov	r4, r0
 8006b84:	460d      	mov	r5, r1
 8006b86:	4622      	mov	r2, r4
 8006b88:	462b      	mov	r3, r5
 8006b8a:	4620      	mov	r0, r4
 8006b8c:	4629      	mov	r1, r5
 8006b8e:	f7f9 fd2b 	bl	80005e8 <__aeabi_dmul>
 8006b92:	4602      	mov	r2, r0
 8006b94:	460b      	mov	r3, r1
 8006b96:	4680      	mov	r8, r0
 8006b98:	4689      	mov	r9, r1
 8006b9a:	f7f9 fd25 	bl	80005e8 <__aeabi_dmul>
 8006b9e:	a374      	add	r3, pc, #464	; (adr r3, 8006d70 <atan+0x2b8>)
 8006ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba4:	4606      	mov	r6, r0
 8006ba6:	460f      	mov	r7, r1
 8006ba8:	f7f9 fd1e 	bl	80005e8 <__aeabi_dmul>
 8006bac:	a372      	add	r3, pc, #456	; (adr r3, 8006d78 <atan+0x2c0>)
 8006bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb2:	f7f9 fb63 	bl	800027c <__adddf3>
 8006bb6:	4632      	mov	r2, r6
 8006bb8:	463b      	mov	r3, r7
 8006bba:	f7f9 fd15 	bl	80005e8 <__aeabi_dmul>
 8006bbe:	a370      	add	r3, pc, #448	; (adr r3, 8006d80 <atan+0x2c8>)
 8006bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc4:	f7f9 fb5a 	bl	800027c <__adddf3>
 8006bc8:	4632      	mov	r2, r6
 8006bca:	463b      	mov	r3, r7
 8006bcc:	f7f9 fd0c 	bl	80005e8 <__aeabi_dmul>
 8006bd0:	a36d      	add	r3, pc, #436	; (adr r3, 8006d88 <atan+0x2d0>)
 8006bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd6:	f7f9 fb51 	bl	800027c <__adddf3>
 8006bda:	4632      	mov	r2, r6
 8006bdc:	463b      	mov	r3, r7
 8006bde:	f7f9 fd03 	bl	80005e8 <__aeabi_dmul>
 8006be2:	a36b      	add	r3, pc, #428	; (adr r3, 8006d90 <atan+0x2d8>)
 8006be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be8:	f7f9 fb48 	bl	800027c <__adddf3>
 8006bec:	4632      	mov	r2, r6
 8006bee:	463b      	mov	r3, r7
 8006bf0:	f7f9 fcfa 	bl	80005e8 <__aeabi_dmul>
 8006bf4:	a368      	add	r3, pc, #416	; (adr r3, 8006d98 <atan+0x2e0>)
 8006bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bfa:	f7f9 fb3f 	bl	800027c <__adddf3>
 8006bfe:	4642      	mov	r2, r8
 8006c00:	464b      	mov	r3, r9
 8006c02:	f7f9 fcf1 	bl	80005e8 <__aeabi_dmul>
 8006c06:	a366      	add	r3, pc, #408	; (adr r3, 8006da0 <atan+0x2e8>)
 8006c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0c:	4680      	mov	r8, r0
 8006c0e:	4689      	mov	r9, r1
 8006c10:	4630      	mov	r0, r6
 8006c12:	4639      	mov	r1, r7
 8006c14:	f7f9 fce8 	bl	80005e8 <__aeabi_dmul>
 8006c18:	a363      	add	r3, pc, #396	; (adr r3, 8006da8 <atan+0x2f0>)
 8006c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c1e:	f7f9 fb2b 	bl	8000278 <__aeabi_dsub>
 8006c22:	4632      	mov	r2, r6
 8006c24:	463b      	mov	r3, r7
 8006c26:	f7f9 fcdf 	bl	80005e8 <__aeabi_dmul>
 8006c2a:	a361      	add	r3, pc, #388	; (adr r3, 8006db0 <atan+0x2f8>)
 8006c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c30:	f7f9 fb22 	bl	8000278 <__aeabi_dsub>
 8006c34:	4632      	mov	r2, r6
 8006c36:	463b      	mov	r3, r7
 8006c38:	f7f9 fcd6 	bl	80005e8 <__aeabi_dmul>
 8006c3c:	a35e      	add	r3, pc, #376	; (adr r3, 8006db8 <atan+0x300>)
 8006c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c42:	f7f9 fb19 	bl	8000278 <__aeabi_dsub>
 8006c46:	4632      	mov	r2, r6
 8006c48:	463b      	mov	r3, r7
 8006c4a:	f7f9 fccd 	bl	80005e8 <__aeabi_dmul>
 8006c4e:	a35c      	add	r3, pc, #368	; (adr r3, 8006dc0 <atan+0x308>)
 8006c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c54:	f7f9 fb10 	bl	8000278 <__aeabi_dsub>
 8006c58:	4632      	mov	r2, r6
 8006c5a:	463b      	mov	r3, r7
 8006c5c:	f7f9 fcc4 	bl	80005e8 <__aeabi_dmul>
 8006c60:	4602      	mov	r2, r0
 8006c62:	460b      	mov	r3, r1
 8006c64:	4640      	mov	r0, r8
 8006c66:	4649      	mov	r1, r9
 8006c68:	f7f9 fb08 	bl	800027c <__adddf3>
 8006c6c:	4622      	mov	r2, r4
 8006c6e:	462b      	mov	r3, r5
 8006c70:	f7f9 fcba 	bl	80005e8 <__aeabi_dmul>
 8006c74:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006c78:	4602      	mov	r2, r0
 8006c7a:	460b      	mov	r3, r1
 8006c7c:	d14b      	bne.n	8006d16 <atan+0x25e>
 8006c7e:	4620      	mov	r0, r4
 8006c80:	4629      	mov	r1, r5
 8006c82:	f7f9 faf9 	bl	8000278 <__aeabi_dsub>
 8006c86:	e72c      	b.n	8006ae2 <atan+0x2a>
 8006c88:	ee10 0a10 	vmov	r0, s0
 8006c8c:	4b53      	ldr	r3, [pc, #332]	; (8006ddc <atan+0x324>)
 8006c8e:	2200      	movs	r2, #0
 8006c90:	4629      	mov	r1, r5
 8006c92:	f7f9 faf1 	bl	8000278 <__aeabi_dsub>
 8006c96:	4b51      	ldr	r3, [pc, #324]	; (8006ddc <atan+0x324>)
 8006c98:	4606      	mov	r6, r0
 8006c9a:	460f      	mov	r7, r1
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	4620      	mov	r0, r4
 8006ca0:	4629      	mov	r1, r5
 8006ca2:	f7f9 faeb 	bl	800027c <__adddf3>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	460b      	mov	r3, r1
 8006caa:	4630      	mov	r0, r6
 8006cac:	4639      	mov	r1, r7
 8006cae:	f7f9 fdc5 	bl	800083c <__aeabi_ddiv>
 8006cb2:	f04f 0a01 	mov.w	sl, #1
 8006cb6:	4604      	mov	r4, r0
 8006cb8:	460d      	mov	r5, r1
 8006cba:	e764      	b.n	8006b86 <atan+0xce>
 8006cbc:	4b49      	ldr	r3, [pc, #292]	; (8006de4 <atan+0x32c>)
 8006cbe:	429e      	cmp	r6, r3
 8006cc0:	da1d      	bge.n	8006cfe <atan+0x246>
 8006cc2:	ee10 0a10 	vmov	r0, s0
 8006cc6:	4b48      	ldr	r3, [pc, #288]	; (8006de8 <atan+0x330>)
 8006cc8:	2200      	movs	r2, #0
 8006cca:	4629      	mov	r1, r5
 8006ccc:	f7f9 fad4 	bl	8000278 <__aeabi_dsub>
 8006cd0:	4b45      	ldr	r3, [pc, #276]	; (8006de8 <atan+0x330>)
 8006cd2:	4606      	mov	r6, r0
 8006cd4:	460f      	mov	r7, r1
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	4620      	mov	r0, r4
 8006cda:	4629      	mov	r1, r5
 8006cdc:	f7f9 fc84 	bl	80005e8 <__aeabi_dmul>
 8006ce0:	4b3e      	ldr	r3, [pc, #248]	; (8006ddc <atan+0x324>)
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f7f9 faca 	bl	800027c <__adddf3>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	460b      	mov	r3, r1
 8006cec:	4630      	mov	r0, r6
 8006cee:	4639      	mov	r1, r7
 8006cf0:	f7f9 fda4 	bl	800083c <__aeabi_ddiv>
 8006cf4:	f04f 0a02 	mov.w	sl, #2
 8006cf8:	4604      	mov	r4, r0
 8006cfa:	460d      	mov	r5, r1
 8006cfc:	e743      	b.n	8006b86 <atan+0xce>
 8006cfe:	462b      	mov	r3, r5
 8006d00:	ee10 2a10 	vmov	r2, s0
 8006d04:	4939      	ldr	r1, [pc, #228]	; (8006dec <atan+0x334>)
 8006d06:	2000      	movs	r0, #0
 8006d08:	f7f9 fd98 	bl	800083c <__aeabi_ddiv>
 8006d0c:	f04f 0a03 	mov.w	sl, #3
 8006d10:	4604      	mov	r4, r0
 8006d12:	460d      	mov	r5, r1
 8006d14:	e737      	b.n	8006b86 <atan+0xce>
 8006d16:	4b36      	ldr	r3, [pc, #216]	; (8006df0 <atan+0x338>)
 8006d18:	4e36      	ldr	r6, [pc, #216]	; (8006df4 <atan+0x33c>)
 8006d1a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8006d1e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8006d22:	e9da 2300 	ldrd	r2, r3, [sl]
 8006d26:	f7f9 faa7 	bl	8000278 <__aeabi_dsub>
 8006d2a:	4622      	mov	r2, r4
 8006d2c:	462b      	mov	r3, r5
 8006d2e:	f7f9 faa3 	bl	8000278 <__aeabi_dsub>
 8006d32:	4602      	mov	r2, r0
 8006d34:	460b      	mov	r3, r1
 8006d36:	e9d6 0100 	ldrd	r0, r1, [r6]
 8006d3a:	f7f9 fa9d 	bl	8000278 <__aeabi_dsub>
 8006d3e:	f1bb 0f00 	cmp.w	fp, #0
 8006d42:	4604      	mov	r4, r0
 8006d44:	460d      	mov	r5, r1
 8006d46:	f6bf aed6 	bge.w	8006af6 <atan+0x3e>
 8006d4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006d4e:	461d      	mov	r5, r3
 8006d50:	e6d1      	b.n	8006af6 <atan+0x3e>
 8006d52:	a51d      	add	r5, pc, #116	; (adr r5, 8006dc8 <atan+0x310>)
 8006d54:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006d58:	e6cd      	b.n	8006af6 <atan+0x3e>
 8006d5a:	bf00      	nop
 8006d5c:	f3af 8000 	nop.w
 8006d60:	54442d18 	.word	0x54442d18
 8006d64:	bff921fb 	.word	0xbff921fb
 8006d68:	8800759c 	.word	0x8800759c
 8006d6c:	7e37e43c 	.word	0x7e37e43c
 8006d70:	e322da11 	.word	0xe322da11
 8006d74:	3f90ad3a 	.word	0x3f90ad3a
 8006d78:	24760deb 	.word	0x24760deb
 8006d7c:	3fa97b4b 	.word	0x3fa97b4b
 8006d80:	a0d03d51 	.word	0xa0d03d51
 8006d84:	3fb10d66 	.word	0x3fb10d66
 8006d88:	c54c206e 	.word	0xc54c206e
 8006d8c:	3fb745cd 	.word	0x3fb745cd
 8006d90:	920083ff 	.word	0x920083ff
 8006d94:	3fc24924 	.word	0x3fc24924
 8006d98:	5555550d 	.word	0x5555550d
 8006d9c:	3fd55555 	.word	0x3fd55555
 8006da0:	2c6a6c2f 	.word	0x2c6a6c2f
 8006da4:	bfa2b444 	.word	0xbfa2b444
 8006da8:	52defd9a 	.word	0x52defd9a
 8006dac:	3fadde2d 	.word	0x3fadde2d
 8006db0:	af749a6d 	.word	0xaf749a6d
 8006db4:	3fb3b0f2 	.word	0x3fb3b0f2
 8006db8:	fe231671 	.word	0xfe231671
 8006dbc:	3fbc71c6 	.word	0x3fbc71c6
 8006dc0:	9998ebc4 	.word	0x9998ebc4
 8006dc4:	3fc99999 	.word	0x3fc99999
 8006dc8:	54442d18 	.word	0x54442d18
 8006dcc:	3ff921fb 	.word	0x3ff921fb
 8006dd0:	440fffff 	.word	0x440fffff
 8006dd4:	7ff00000 	.word	0x7ff00000
 8006dd8:	3fdbffff 	.word	0x3fdbffff
 8006ddc:	3ff00000 	.word	0x3ff00000
 8006de0:	3ff2ffff 	.word	0x3ff2ffff
 8006de4:	40038000 	.word	0x40038000
 8006de8:	3ff80000 	.word	0x3ff80000
 8006dec:	bff00000 	.word	0xbff00000
 8006df0:	080085d8 	.word	0x080085d8
 8006df4:	080085b8 	.word	0x080085b8

08006df8 <fabs>:
 8006df8:	ec51 0b10 	vmov	r0, r1, d0
 8006dfc:	ee10 2a10 	vmov	r2, s0
 8006e00:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006e04:	ec43 2b10 	vmov	d0, r2, r3
 8006e08:	4770      	bx	lr
	...

08006e0c <pow>:
 8006e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e10:	ec59 8b10 	vmov	r8, r9, d0
 8006e14:	ec57 6b11 	vmov	r6, r7, d1
 8006e18:	f000 f8da 	bl	8006fd0 <__ieee754_pow>
 8006e1c:	4b4e      	ldr	r3, [pc, #312]	; (8006f58 <pow+0x14c>)
 8006e1e:	f993 3000 	ldrsb.w	r3, [r3]
 8006e22:	3301      	adds	r3, #1
 8006e24:	ec55 4b10 	vmov	r4, r5, d0
 8006e28:	d015      	beq.n	8006e56 <pow+0x4a>
 8006e2a:	4632      	mov	r2, r6
 8006e2c:	463b      	mov	r3, r7
 8006e2e:	4630      	mov	r0, r6
 8006e30:	4639      	mov	r1, r7
 8006e32:	f7f9 fe73 	bl	8000b1c <__aeabi_dcmpun>
 8006e36:	b970      	cbnz	r0, 8006e56 <pow+0x4a>
 8006e38:	4642      	mov	r2, r8
 8006e3a:	464b      	mov	r3, r9
 8006e3c:	4640      	mov	r0, r8
 8006e3e:	4649      	mov	r1, r9
 8006e40:	f7f9 fe6c 	bl	8000b1c <__aeabi_dcmpun>
 8006e44:	2200      	movs	r2, #0
 8006e46:	2300      	movs	r3, #0
 8006e48:	b148      	cbz	r0, 8006e5e <pow+0x52>
 8006e4a:	4630      	mov	r0, r6
 8006e4c:	4639      	mov	r1, r7
 8006e4e:	f7f9 fe33 	bl	8000ab8 <__aeabi_dcmpeq>
 8006e52:	2800      	cmp	r0, #0
 8006e54:	d17d      	bne.n	8006f52 <pow+0x146>
 8006e56:	ec45 4b10 	vmov	d0, r4, r5
 8006e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e5e:	4640      	mov	r0, r8
 8006e60:	4649      	mov	r1, r9
 8006e62:	f7f9 fe29 	bl	8000ab8 <__aeabi_dcmpeq>
 8006e66:	b1e0      	cbz	r0, 8006ea2 <pow+0x96>
 8006e68:	2200      	movs	r2, #0
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	4630      	mov	r0, r6
 8006e6e:	4639      	mov	r1, r7
 8006e70:	f7f9 fe22 	bl	8000ab8 <__aeabi_dcmpeq>
 8006e74:	2800      	cmp	r0, #0
 8006e76:	d16c      	bne.n	8006f52 <pow+0x146>
 8006e78:	ec47 6b10 	vmov	d0, r6, r7
 8006e7c:	f000 fe7e 	bl	8007b7c <finite>
 8006e80:	2800      	cmp	r0, #0
 8006e82:	d0e8      	beq.n	8006e56 <pow+0x4a>
 8006e84:	2200      	movs	r2, #0
 8006e86:	2300      	movs	r3, #0
 8006e88:	4630      	mov	r0, r6
 8006e8a:	4639      	mov	r1, r7
 8006e8c:	f7f9 fe1e 	bl	8000acc <__aeabi_dcmplt>
 8006e90:	2800      	cmp	r0, #0
 8006e92:	d0e0      	beq.n	8006e56 <pow+0x4a>
 8006e94:	f7ff f9b0 	bl	80061f8 <__errno>
 8006e98:	2321      	movs	r3, #33	; 0x21
 8006e9a:	6003      	str	r3, [r0, #0]
 8006e9c:	2400      	movs	r4, #0
 8006e9e:	4d2f      	ldr	r5, [pc, #188]	; (8006f5c <pow+0x150>)
 8006ea0:	e7d9      	b.n	8006e56 <pow+0x4a>
 8006ea2:	ec45 4b10 	vmov	d0, r4, r5
 8006ea6:	f000 fe69 	bl	8007b7c <finite>
 8006eaa:	bbb8      	cbnz	r0, 8006f1c <pow+0x110>
 8006eac:	ec49 8b10 	vmov	d0, r8, r9
 8006eb0:	f000 fe64 	bl	8007b7c <finite>
 8006eb4:	b390      	cbz	r0, 8006f1c <pow+0x110>
 8006eb6:	ec47 6b10 	vmov	d0, r6, r7
 8006eba:	f000 fe5f 	bl	8007b7c <finite>
 8006ebe:	b368      	cbz	r0, 8006f1c <pow+0x110>
 8006ec0:	4622      	mov	r2, r4
 8006ec2:	462b      	mov	r3, r5
 8006ec4:	4620      	mov	r0, r4
 8006ec6:	4629      	mov	r1, r5
 8006ec8:	f7f9 fe28 	bl	8000b1c <__aeabi_dcmpun>
 8006ecc:	b160      	cbz	r0, 8006ee8 <pow+0xdc>
 8006ece:	f7ff f993 	bl	80061f8 <__errno>
 8006ed2:	2321      	movs	r3, #33	; 0x21
 8006ed4:	6003      	str	r3, [r0, #0]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	2300      	movs	r3, #0
 8006eda:	4610      	mov	r0, r2
 8006edc:	4619      	mov	r1, r3
 8006ede:	f7f9 fcad 	bl	800083c <__aeabi_ddiv>
 8006ee2:	4604      	mov	r4, r0
 8006ee4:	460d      	mov	r5, r1
 8006ee6:	e7b6      	b.n	8006e56 <pow+0x4a>
 8006ee8:	f7ff f986 	bl	80061f8 <__errno>
 8006eec:	2322      	movs	r3, #34	; 0x22
 8006eee:	6003      	str	r3, [r0, #0]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	4640      	mov	r0, r8
 8006ef6:	4649      	mov	r1, r9
 8006ef8:	f7f9 fde8 	bl	8000acc <__aeabi_dcmplt>
 8006efc:	2400      	movs	r4, #0
 8006efe:	b158      	cbz	r0, 8006f18 <pow+0x10c>
 8006f00:	ec47 6b10 	vmov	d0, r6, r7
 8006f04:	f000 fe50 	bl	8007ba8 <rint>
 8006f08:	4632      	mov	r2, r6
 8006f0a:	ec51 0b10 	vmov	r0, r1, d0
 8006f0e:	463b      	mov	r3, r7
 8006f10:	f7f9 fdd2 	bl	8000ab8 <__aeabi_dcmpeq>
 8006f14:	2800      	cmp	r0, #0
 8006f16:	d0c2      	beq.n	8006e9e <pow+0x92>
 8006f18:	4d11      	ldr	r5, [pc, #68]	; (8006f60 <pow+0x154>)
 8006f1a:	e79c      	b.n	8006e56 <pow+0x4a>
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	2300      	movs	r3, #0
 8006f20:	4620      	mov	r0, r4
 8006f22:	4629      	mov	r1, r5
 8006f24:	f7f9 fdc8 	bl	8000ab8 <__aeabi_dcmpeq>
 8006f28:	2800      	cmp	r0, #0
 8006f2a:	d094      	beq.n	8006e56 <pow+0x4a>
 8006f2c:	ec49 8b10 	vmov	d0, r8, r9
 8006f30:	f000 fe24 	bl	8007b7c <finite>
 8006f34:	2800      	cmp	r0, #0
 8006f36:	d08e      	beq.n	8006e56 <pow+0x4a>
 8006f38:	ec47 6b10 	vmov	d0, r6, r7
 8006f3c:	f000 fe1e 	bl	8007b7c <finite>
 8006f40:	2800      	cmp	r0, #0
 8006f42:	d088      	beq.n	8006e56 <pow+0x4a>
 8006f44:	f7ff f958 	bl	80061f8 <__errno>
 8006f48:	2322      	movs	r3, #34	; 0x22
 8006f4a:	6003      	str	r3, [r0, #0]
 8006f4c:	2400      	movs	r4, #0
 8006f4e:	2500      	movs	r5, #0
 8006f50:	e781      	b.n	8006e56 <pow+0x4a>
 8006f52:	4d04      	ldr	r5, [pc, #16]	; (8006f64 <pow+0x158>)
 8006f54:	2400      	movs	r4, #0
 8006f56:	e77e      	b.n	8006e56 <pow+0x4a>
 8006f58:	20000084 	.word	0x20000084
 8006f5c:	fff00000 	.word	0xfff00000
 8006f60:	7ff00000 	.word	0x7ff00000
 8006f64:	3ff00000 	.word	0x3ff00000

08006f68 <sqrt>:
 8006f68:	b538      	push	{r3, r4, r5, lr}
 8006f6a:	ed2d 8b02 	vpush	{d8}
 8006f6e:	ec55 4b10 	vmov	r4, r5, d0
 8006f72:	f000 fd4f 	bl	8007a14 <__ieee754_sqrt>
 8006f76:	4b15      	ldr	r3, [pc, #84]	; (8006fcc <sqrt+0x64>)
 8006f78:	eeb0 8a40 	vmov.f32	s16, s0
 8006f7c:	eef0 8a60 	vmov.f32	s17, s1
 8006f80:	f993 3000 	ldrsb.w	r3, [r3]
 8006f84:	3301      	adds	r3, #1
 8006f86:	d019      	beq.n	8006fbc <sqrt+0x54>
 8006f88:	4622      	mov	r2, r4
 8006f8a:	462b      	mov	r3, r5
 8006f8c:	4620      	mov	r0, r4
 8006f8e:	4629      	mov	r1, r5
 8006f90:	f7f9 fdc4 	bl	8000b1c <__aeabi_dcmpun>
 8006f94:	b990      	cbnz	r0, 8006fbc <sqrt+0x54>
 8006f96:	2200      	movs	r2, #0
 8006f98:	2300      	movs	r3, #0
 8006f9a:	4620      	mov	r0, r4
 8006f9c:	4629      	mov	r1, r5
 8006f9e:	f7f9 fd95 	bl	8000acc <__aeabi_dcmplt>
 8006fa2:	b158      	cbz	r0, 8006fbc <sqrt+0x54>
 8006fa4:	f7ff f928 	bl	80061f8 <__errno>
 8006fa8:	2321      	movs	r3, #33	; 0x21
 8006faa:	6003      	str	r3, [r0, #0]
 8006fac:	2200      	movs	r2, #0
 8006fae:	2300      	movs	r3, #0
 8006fb0:	4610      	mov	r0, r2
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	f7f9 fc42 	bl	800083c <__aeabi_ddiv>
 8006fb8:	ec41 0b18 	vmov	d8, r0, r1
 8006fbc:	eeb0 0a48 	vmov.f32	s0, s16
 8006fc0:	eef0 0a68 	vmov.f32	s1, s17
 8006fc4:	ecbd 8b02 	vpop	{d8}
 8006fc8:	bd38      	pop	{r3, r4, r5, pc}
 8006fca:	bf00      	nop
 8006fcc:	20000084 	.word	0x20000084

08006fd0 <__ieee754_pow>:
 8006fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fd4:	ed2d 8b06 	vpush	{d8-d10}
 8006fd8:	b08d      	sub	sp, #52	; 0x34
 8006fda:	ed8d 1b02 	vstr	d1, [sp, #8]
 8006fde:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8006fe2:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8006fe6:	ea56 0100 	orrs.w	r1, r6, r0
 8006fea:	ec53 2b10 	vmov	r2, r3, d0
 8006fee:	f000 84d1 	beq.w	8007994 <__ieee754_pow+0x9c4>
 8006ff2:	497f      	ldr	r1, [pc, #508]	; (80071f0 <__ieee754_pow+0x220>)
 8006ff4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8006ff8:	428c      	cmp	r4, r1
 8006ffa:	ee10 8a10 	vmov	r8, s0
 8006ffe:	4699      	mov	r9, r3
 8007000:	dc09      	bgt.n	8007016 <__ieee754_pow+0x46>
 8007002:	d103      	bne.n	800700c <__ieee754_pow+0x3c>
 8007004:	b97a      	cbnz	r2, 8007026 <__ieee754_pow+0x56>
 8007006:	42a6      	cmp	r6, r4
 8007008:	dd02      	ble.n	8007010 <__ieee754_pow+0x40>
 800700a:	e00c      	b.n	8007026 <__ieee754_pow+0x56>
 800700c:	428e      	cmp	r6, r1
 800700e:	dc02      	bgt.n	8007016 <__ieee754_pow+0x46>
 8007010:	428e      	cmp	r6, r1
 8007012:	d110      	bne.n	8007036 <__ieee754_pow+0x66>
 8007014:	b178      	cbz	r0, 8007036 <__ieee754_pow+0x66>
 8007016:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800701a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800701e:	ea54 0308 	orrs.w	r3, r4, r8
 8007022:	f000 84b7 	beq.w	8007994 <__ieee754_pow+0x9c4>
 8007026:	4873      	ldr	r0, [pc, #460]	; (80071f4 <__ieee754_pow+0x224>)
 8007028:	b00d      	add	sp, #52	; 0x34
 800702a:	ecbd 8b06 	vpop	{d8-d10}
 800702e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007032:	f000 bdb1 	b.w	8007b98 <nan>
 8007036:	f1b9 0f00 	cmp.w	r9, #0
 800703a:	da36      	bge.n	80070aa <__ieee754_pow+0xda>
 800703c:	496e      	ldr	r1, [pc, #440]	; (80071f8 <__ieee754_pow+0x228>)
 800703e:	428e      	cmp	r6, r1
 8007040:	dc51      	bgt.n	80070e6 <__ieee754_pow+0x116>
 8007042:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8007046:	428e      	cmp	r6, r1
 8007048:	f340 84af 	ble.w	80079aa <__ieee754_pow+0x9da>
 800704c:	1531      	asrs	r1, r6, #20
 800704e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8007052:	2914      	cmp	r1, #20
 8007054:	dd0f      	ble.n	8007076 <__ieee754_pow+0xa6>
 8007056:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800705a:	fa20 fc01 	lsr.w	ip, r0, r1
 800705e:	fa0c f101 	lsl.w	r1, ip, r1
 8007062:	4281      	cmp	r1, r0
 8007064:	f040 84a1 	bne.w	80079aa <__ieee754_pow+0x9da>
 8007068:	f00c 0c01 	and.w	ip, ip, #1
 800706c:	f1cc 0102 	rsb	r1, ip, #2
 8007070:	9100      	str	r1, [sp, #0]
 8007072:	b180      	cbz	r0, 8007096 <__ieee754_pow+0xc6>
 8007074:	e059      	b.n	800712a <__ieee754_pow+0x15a>
 8007076:	2800      	cmp	r0, #0
 8007078:	d155      	bne.n	8007126 <__ieee754_pow+0x156>
 800707a:	f1c1 0114 	rsb	r1, r1, #20
 800707e:	fa46 fc01 	asr.w	ip, r6, r1
 8007082:	fa0c f101 	lsl.w	r1, ip, r1
 8007086:	42b1      	cmp	r1, r6
 8007088:	f040 848c 	bne.w	80079a4 <__ieee754_pow+0x9d4>
 800708c:	f00c 0c01 	and.w	ip, ip, #1
 8007090:	f1cc 0102 	rsb	r1, ip, #2
 8007094:	9100      	str	r1, [sp, #0]
 8007096:	4959      	ldr	r1, [pc, #356]	; (80071fc <__ieee754_pow+0x22c>)
 8007098:	428e      	cmp	r6, r1
 800709a:	d12d      	bne.n	80070f8 <__ieee754_pow+0x128>
 800709c:	2f00      	cmp	r7, #0
 800709e:	da79      	bge.n	8007194 <__ieee754_pow+0x1c4>
 80070a0:	4956      	ldr	r1, [pc, #344]	; (80071fc <__ieee754_pow+0x22c>)
 80070a2:	2000      	movs	r0, #0
 80070a4:	f7f9 fbca 	bl	800083c <__aeabi_ddiv>
 80070a8:	e016      	b.n	80070d8 <__ieee754_pow+0x108>
 80070aa:	2100      	movs	r1, #0
 80070ac:	9100      	str	r1, [sp, #0]
 80070ae:	2800      	cmp	r0, #0
 80070b0:	d13b      	bne.n	800712a <__ieee754_pow+0x15a>
 80070b2:	494f      	ldr	r1, [pc, #316]	; (80071f0 <__ieee754_pow+0x220>)
 80070b4:	428e      	cmp	r6, r1
 80070b6:	d1ee      	bne.n	8007096 <__ieee754_pow+0xc6>
 80070b8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80070bc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80070c0:	ea53 0308 	orrs.w	r3, r3, r8
 80070c4:	f000 8466 	beq.w	8007994 <__ieee754_pow+0x9c4>
 80070c8:	4b4d      	ldr	r3, [pc, #308]	; (8007200 <__ieee754_pow+0x230>)
 80070ca:	429c      	cmp	r4, r3
 80070cc:	dd0d      	ble.n	80070ea <__ieee754_pow+0x11a>
 80070ce:	2f00      	cmp	r7, #0
 80070d0:	f280 8464 	bge.w	800799c <__ieee754_pow+0x9cc>
 80070d4:	2000      	movs	r0, #0
 80070d6:	2100      	movs	r1, #0
 80070d8:	ec41 0b10 	vmov	d0, r0, r1
 80070dc:	b00d      	add	sp, #52	; 0x34
 80070de:	ecbd 8b06 	vpop	{d8-d10}
 80070e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070e6:	2102      	movs	r1, #2
 80070e8:	e7e0      	b.n	80070ac <__ieee754_pow+0xdc>
 80070ea:	2f00      	cmp	r7, #0
 80070ec:	daf2      	bge.n	80070d4 <__ieee754_pow+0x104>
 80070ee:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 80070f2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80070f6:	e7ef      	b.n	80070d8 <__ieee754_pow+0x108>
 80070f8:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80070fc:	d104      	bne.n	8007108 <__ieee754_pow+0x138>
 80070fe:	4610      	mov	r0, r2
 8007100:	4619      	mov	r1, r3
 8007102:	f7f9 fa71 	bl	80005e8 <__aeabi_dmul>
 8007106:	e7e7      	b.n	80070d8 <__ieee754_pow+0x108>
 8007108:	493e      	ldr	r1, [pc, #248]	; (8007204 <__ieee754_pow+0x234>)
 800710a:	428f      	cmp	r7, r1
 800710c:	d10d      	bne.n	800712a <__ieee754_pow+0x15a>
 800710e:	f1b9 0f00 	cmp.w	r9, #0
 8007112:	db0a      	blt.n	800712a <__ieee754_pow+0x15a>
 8007114:	ec43 2b10 	vmov	d0, r2, r3
 8007118:	b00d      	add	sp, #52	; 0x34
 800711a:	ecbd 8b06 	vpop	{d8-d10}
 800711e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007122:	f000 bc77 	b.w	8007a14 <__ieee754_sqrt>
 8007126:	2100      	movs	r1, #0
 8007128:	9100      	str	r1, [sp, #0]
 800712a:	ec43 2b10 	vmov	d0, r2, r3
 800712e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007132:	f7ff fe61 	bl	8006df8 <fabs>
 8007136:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800713a:	ec51 0b10 	vmov	r0, r1, d0
 800713e:	f1b8 0f00 	cmp.w	r8, #0
 8007142:	d12a      	bne.n	800719a <__ieee754_pow+0x1ca>
 8007144:	b12c      	cbz	r4, 8007152 <__ieee754_pow+0x182>
 8007146:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80071fc <__ieee754_pow+0x22c>
 800714a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800714e:	45e6      	cmp	lr, ip
 8007150:	d123      	bne.n	800719a <__ieee754_pow+0x1ca>
 8007152:	2f00      	cmp	r7, #0
 8007154:	da05      	bge.n	8007162 <__ieee754_pow+0x192>
 8007156:	4602      	mov	r2, r0
 8007158:	460b      	mov	r3, r1
 800715a:	2000      	movs	r0, #0
 800715c:	4927      	ldr	r1, [pc, #156]	; (80071fc <__ieee754_pow+0x22c>)
 800715e:	f7f9 fb6d 	bl	800083c <__aeabi_ddiv>
 8007162:	f1b9 0f00 	cmp.w	r9, #0
 8007166:	dab7      	bge.n	80070d8 <__ieee754_pow+0x108>
 8007168:	9b00      	ldr	r3, [sp, #0]
 800716a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800716e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007172:	4323      	orrs	r3, r4
 8007174:	d108      	bne.n	8007188 <__ieee754_pow+0x1b8>
 8007176:	4602      	mov	r2, r0
 8007178:	460b      	mov	r3, r1
 800717a:	4610      	mov	r0, r2
 800717c:	4619      	mov	r1, r3
 800717e:	f7f9 f87b 	bl	8000278 <__aeabi_dsub>
 8007182:	4602      	mov	r2, r0
 8007184:	460b      	mov	r3, r1
 8007186:	e78d      	b.n	80070a4 <__ieee754_pow+0xd4>
 8007188:	9b00      	ldr	r3, [sp, #0]
 800718a:	2b01      	cmp	r3, #1
 800718c:	d1a4      	bne.n	80070d8 <__ieee754_pow+0x108>
 800718e:	4602      	mov	r2, r0
 8007190:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007194:	4610      	mov	r0, r2
 8007196:	4619      	mov	r1, r3
 8007198:	e79e      	b.n	80070d8 <__ieee754_pow+0x108>
 800719a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800719e:	f10c 35ff 	add.w	r5, ip, #4294967295
 80071a2:	950a      	str	r5, [sp, #40]	; 0x28
 80071a4:	9d00      	ldr	r5, [sp, #0]
 80071a6:	46ac      	mov	ip, r5
 80071a8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80071aa:	ea5c 0505 	orrs.w	r5, ip, r5
 80071ae:	d0e4      	beq.n	800717a <__ieee754_pow+0x1aa>
 80071b0:	4b15      	ldr	r3, [pc, #84]	; (8007208 <__ieee754_pow+0x238>)
 80071b2:	429e      	cmp	r6, r3
 80071b4:	f340 80fc 	ble.w	80073b0 <__ieee754_pow+0x3e0>
 80071b8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80071bc:	429e      	cmp	r6, r3
 80071be:	4b10      	ldr	r3, [pc, #64]	; (8007200 <__ieee754_pow+0x230>)
 80071c0:	dd07      	ble.n	80071d2 <__ieee754_pow+0x202>
 80071c2:	429c      	cmp	r4, r3
 80071c4:	dc0a      	bgt.n	80071dc <__ieee754_pow+0x20c>
 80071c6:	2f00      	cmp	r7, #0
 80071c8:	da84      	bge.n	80070d4 <__ieee754_pow+0x104>
 80071ca:	a307      	add	r3, pc, #28	; (adr r3, 80071e8 <__ieee754_pow+0x218>)
 80071cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d0:	e795      	b.n	80070fe <__ieee754_pow+0x12e>
 80071d2:	429c      	cmp	r4, r3
 80071d4:	dbf7      	blt.n	80071c6 <__ieee754_pow+0x1f6>
 80071d6:	4b09      	ldr	r3, [pc, #36]	; (80071fc <__ieee754_pow+0x22c>)
 80071d8:	429c      	cmp	r4, r3
 80071da:	dd17      	ble.n	800720c <__ieee754_pow+0x23c>
 80071dc:	2f00      	cmp	r7, #0
 80071de:	dcf4      	bgt.n	80071ca <__ieee754_pow+0x1fa>
 80071e0:	e778      	b.n	80070d4 <__ieee754_pow+0x104>
 80071e2:	bf00      	nop
 80071e4:	f3af 8000 	nop.w
 80071e8:	8800759c 	.word	0x8800759c
 80071ec:	7e37e43c 	.word	0x7e37e43c
 80071f0:	7ff00000 	.word	0x7ff00000
 80071f4:	08008585 	.word	0x08008585
 80071f8:	433fffff 	.word	0x433fffff
 80071fc:	3ff00000 	.word	0x3ff00000
 8007200:	3fefffff 	.word	0x3fefffff
 8007204:	3fe00000 	.word	0x3fe00000
 8007208:	41e00000 	.word	0x41e00000
 800720c:	4b64      	ldr	r3, [pc, #400]	; (80073a0 <__ieee754_pow+0x3d0>)
 800720e:	2200      	movs	r2, #0
 8007210:	f7f9 f832 	bl	8000278 <__aeabi_dsub>
 8007214:	a356      	add	r3, pc, #344	; (adr r3, 8007370 <__ieee754_pow+0x3a0>)
 8007216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800721a:	4604      	mov	r4, r0
 800721c:	460d      	mov	r5, r1
 800721e:	f7f9 f9e3 	bl	80005e8 <__aeabi_dmul>
 8007222:	a355      	add	r3, pc, #340	; (adr r3, 8007378 <__ieee754_pow+0x3a8>)
 8007224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007228:	4606      	mov	r6, r0
 800722a:	460f      	mov	r7, r1
 800722c:	4620      	mov	r0, r4
 800722e:	4629      	mov	r1, r5
 8007230:	f7f9 f9da 	bl	80005e8 <__aeabi_dmul>
 8007234:	4b5b      	ldr	r3, [pc, #364]	; (80073a4 <__ieee754_pow+0x3d4>)
 8007236:	4682      	mov	sl, r0
 8007238:	468b      	mov	fp, r1
 800723a:	2200      	movs	r2, #0
 800723c:	4620      	mov	r0, r4
 800723e:	4629      	mov	r1, r5
 8007240:	f7f9 f9d2 	bl	80005e8 <__aeabi_dmul>
 8007244:	4602      	mov	r2, r0
 8007246:	460b      	mov	r3, r1
 8007248:	a14d      	add	r1, pc, #308	; (adr r1, 8007380 <__ieee754_pow+0x3b0>)
 800724a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800724e:	f7f9 f813 	bl	8000278 <__aeabi_dsub>
 8007252:	4622      	mov	r2, r4
 8007254:	462b      	mov	r3, r5
 8007256:	f7f9 f9c7 	bl	80005e8 <__aeabi_dmul>
 800725a:	4602      	mov	r2, r0
 800725c:	460b      	mov	r3, r1
 800725e:	2000      	movs	r0, #0
 8007260:	4951      	ldr	r1, [pc, #324]	; (80073a8 <__ieee754_pow+0x3d8>)
 8007262:	f7f9 f809 	bl	8000278 <__aeabi_dsub>
 8007266:	4622      	mov	r2, r4
 8007268:	4680      	mov	r8, r0
 800726a:	4689      	mov	r9, r1
 800726c:	462b      	mov	r3, r5
 800726e:	4620      	mov	r0, r4
 8007270:	4629      	mov	r1, r5
 8007272:	f7f9 f9b9 	bl	80005e8 <__aeabi_dmul>
 8007276:	4602      	mov	r2, r0
 8007278:	460b      	mov	r3, r1
 800727a:	4640      	mov	r0, r8
 800727c:	4649      	mov	r1, r9
 800727e:	f7f9 f9b3 	bl	80005e8 <__aeabi_dmul>
 8007282:	a341      	add	r3, pc, #260	; (adr r3, 8007388 <__ieee754_pow+0x3b8>)
 8007284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007288:	f7f9 f9ae 	bl	80005e8 <__aeabi_dmul>
 800728c:	4602      	mov	r2, r0
 800728e:	460b      	mov	r3, r1
 8007290:	4650      	mov	r0, sl
 8007292:	4659      	mov	r1, fp
 8007294:	f7f8 fff0 	bl	8000278 <__aeabi_dsub>
 8007298:	4602      	mov	r2, r0
 800729a:	460b      	mov	r3, r1
 800729c:	4680      	mov	r8, r0
 800729e:	4689      	mov	r9, r1
 80072a0:	4630      	mov	r0, r6
 80072a2:	4639      	mov	r1, r7
 80072a4:	f7f8 ffea 	bl	800027c <__adddf3>
 80072a8:	2400      	movs	r4, #0
 80072aa:	4632      	mov	r2, r6
 80072ac:	463b      	mov	r3, r7
 80072ae:	4620      	mov	r0, r4
 80072b0:	460d      	mov	r5, r1
 80072b2:	f7f8 ffe1 	bl	8000278 <__aeabi_dsub>
 80072b6:	4602      	mov	r2, r0
 80072b8:	460b      	mov	r3, r1
 80072ba:	4640      	mov	r0, r8
 80072bc:	4649      	mov	r1, r9
 80072be:	f7f8 ffdb 	bl	8000278 <__aeabi_dsub>
 80072c2:	9b00      	ldr	r3, [sp, #0]
 80072c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072c6:	3b01      	subs	r3, #1
 80072c8:	4313      	orrs	r3, r2
 80072ca:	4682      	mov	sl, r0
 80072cc:	468b      	mov	fp, r1
 80072ce:	f040 81f1 	bne.w	80076b4 <__ieee754_pow+0x6e4>
 80072d2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8007390 <__ieee754_pow+0x3c0>
 80072d6:	eeb0 8a47 	vmov.f32	s16, s14
 80072da:	eef0 8a67 	vmov.f32	s17, s15
 80072de:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80072e2:	2600      	movs	r6, #0
 80072e4:	4632      	mov	r2, r6
 80072e6:	463b      	mov	r3, r7
 80072e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072ec:	f7f8 ffc4 	bl	8000278 <__aeabi_dsub>
 80072f0:	4622      	mov	r2, r4
 80072f2:	462b      	mov	r3, r5
 80072f4:	f7f9 f978 	bl	80005e8 <__aeabi_dmul>
 80072f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80072fc:	4680      	mov	r8, r0
 80072fe:	4689      	mov	r9, r1
 8007300:	4650      	mov	r0, sl
 8007302:	4659      	mov	r1, fp
 8007304:	f7f9 f970 	bl	80005e8 <__aeabi_dmul>
 8007308:	4602      	mov	r2, r0
 800730a:	460b      	mov	r3, r1
 800730c:	4640      	mov	r0, r8
 800730e:	4649      	mov	r1, r9
 8007310:	f7f8 ffb4 	bl	800027c <__adddf3>
 8007314:	4632      	mov	r2, r6
 8007316:	463b      	mov	r3, r7
 8007318:	4680      	mov	r8, r0
 800731a:	4689      	mov	r9, r1
 800731c:	4620      	mov	r0, r4
 800731e:	4629      	mov	r1, r5
 8007320:	f7f9 f962 	bl	80005e8 <__aeabi_dmul>
 8007324:	460b      	mov	r3, r1
 8007326:	4604      	mov	r4, r0
 8007328:	460d      	mov	r5, r1
 800732a:	4602      	mov	r2, r0
 800732c:	4649      	mov	r1, r9
 800732e:	4640      	mov	r0, r8
 8007330:	f7f8 ffa4 	bl	800027c <__adddf3>
 8007334:	4b1d      	ldr	r3, [pc, #116]	; (80073ac <__ieee754_pow+0x3dc>)
 8007336:	4299      	cmp	r1, r3
 8007338:	ec45 4b19 	vmov	d9, r4, r5
 800733c:	4606      	mov	r6, r0
 800733e:	460f      	mov	r7, r1
 8007340:	468b      	mov	fp, r1
 8007342:	f340 82fe 	ble.w	8007942 <__ieee754_pow+0x972>
 8007346:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800734a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800734e:	4303      	orrs	r3, r0
 8007350:	f000 81f0 	beq.w	8007734 <__ieee754_pow+0x764>
 8007354:	a310      	add	r3, pc, #64	; (adr r3, 8007398 <__ieee754_pow+0x3c8>)
 8007356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800735a:	ec51 0b18 	vmov	r0, r1, d8
 800735e:	f7f9 f943 	bl	80005e8 <__aeabi_dmul>
 8007362:	a30d      	add	r3, pc, #52	; (adr r3, 8007398 <__ieee754_pow+0x3c8>)
 8007364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007368:	e6cb      	b.n	8007102 <__ieee754_pow+0x132>
 800736a:	bf00      	nop
 800736c:	f3af 8000 	nop.w
 8007370:	60000000 	.word	0x60000000
 8007374:	3ff71547 	.word	0x3ff71547
 8007378:	f85ddf44 	.word	0xf85ddf44
 800737c:	3e54ae0b 	.word	0x3e54ae0b
 8007380:	55555555 	.word	0x55555555
 8007384:	3fd55555 	.word	0x3fd55555
 8007388:	652b82fe 	.word	0x652b82fe
 800738c:	3ff71547 	.word	0x3ff71547
 8007390:	00000000 	.word	0x00000000
 8007394:	bff00000 	.word	0xbff00000
 8007398:	8800759c 	.word	0x8800759c
 800739c:	7e37e43c 	.word	0x7e37e43c
 80073a0:	3ff00000 	.word	0x3ff00000
 80073a4:	3fd00000 	.word	0x3fd00000
 80073a8:	3fe00000 	.word	0x3fe00000
 80073ac:	408fffff 	.word	0x408fffff
 80073b0:	4bd7      	ldr	r3, [pc, #860]	; (8007710 <__ieee754_pow+0x740>)
 80073b2:	ea03 0309 	and.w	r3, r3, r9
 80073b6:	2200      	movs	r2, #0
 80073b8:	b92b      	cbnz	r3, 80073c6 <__ieee754_pow+0x3f6>
 80073ba:	4bd6      	ldr	r3, [pc, #856]	; (8007714 <__ieee754_pow+0x744>)
 80073bc:	f7f9 f914 	bl	80005e8 <__aeabi_dmul>
 80073c0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80073c4:	460c      	mov	r4, r1
 80073c6:	1523      	asrs	r3, r4, #20
 80073c8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80073cc:	4413      	add	r3, r2
 80073ce:	9309      	str	r3, [sp, #36]	; 0x24
 80073d0:	4bd1      	ldr	r3, [pc, #836]	; (8007718 <__ieee754_pow+0x748>)
 80073d2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80073d6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80073da:	429c      	cmp	r4, r3
 80073dc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80073e0:	dd08      	ble.n	80073f4 <__ieee754_pow+0x424>
 80073e2:	4bce      	ldr	r3, [pc, #824]	; (800771c <__ieee754_pow+0x74c>)
 80073e4:	429c      	cmp	r4, r3
 80073e6:	f340 8163 	ble.w	80076b0 <__ieee754_pow+0x6e0>
 80073ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073ec:	3301      	adds	r3, #1
 80073ee:	9309      	str	r3, [sp, #36]	; 0x24
 80073f0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80073f4:	2400      	movs	r4, #0
 80073f6:	00e3      	lsls	r3, r4, #3
 80073f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80073fa:	4bc9      	ldr	r3, [pc, #804]	; (8007720 <__ieee754_pow+0x750>)
 80073fc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007400:	ed93 7b00 	vldr	d7, [r3]
 8007404:	4629      	mov	r1, r5
 8007406:	ec53 2b17 	vmov	r2, r3, d7
 800740a:	eeb0 8a47 	vmov.f32	s16, s14
 800740e:	eef0 8a67 	vmov.f32	s17, s15
 8007412:	4682      	mov	sl, r0
 8007414:	f7f8 ff30 	bl	8000278 <__aeabi_dsub>
 8007418:	4652      	mov	r2, sl
 800741a:	4606      	mov	r6, r0
 800741c:	460f      	mov	r7, r1
 800741e:	462b      	mov	r3, r5
 8007420:	ec51 0b18 	vmov	r0, r1, d8
 8007424:	f7f8 ff2a 	bl	800027c <__adddf3>
 8007428:	4602      	mov	r2, r0
 800742a:	460b      	mov	r3, r1
 800742c:	2000      	movs	r0, #0
 800742e:	49bd      	ldr	r1, [pc, #756]	; (8007724 <__ieee754_pow+0x754>)
 8007430:	f7f9 fa04 	bl	800083c <__aeabi_ddiv>
 8007434:	ec41 0b19 	vmov	d9, r0, r1
 8007438:	4602      	mov	r2, r0
 800743a:	460b      	mov	r3, r1
 800743c:	4630      	mov	r0, r6
 800743e:	4639      	mov	r1, r7
 8007440:	f7f9 f8d2 	bl	80005e8 <__aeabi_dmul>
 8007444:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007448:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800744c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007450:	2300      	movs	r3, #0
 8007452:	9304      	str	r3, [sp, #16]
 8007454:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007458:	46ab      	mov	fp, r5
 800745a:	106d      	asrs	r5, r5, #1
 800745c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007460:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007464:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8007468:	2200      	movs	r2, #0
 800746a:	4640      	mov	r0, r8
 800746c:	4649      	mov	r1, r9
 800746e:	4614      	mov	r4, r2
 8007470:	461d      	mov	r5, r3
 8007472:	f7f9 f8b9 	bl	80005e8 <__aeabi_dmul>
 8007476:	4602      	mov	r2, r0
 8007478:	460b      	mov	r3, r1
 800747a:	4630      	mov	r0, r6
 800747c:	4639      	mov	r1, r7
 800747e:	f7f8 fefb 	bl	8000278 <__aeabi_dsub>
 8007482:	ec53 2b18 	vmov	r2, r3, d8
 8007486:	4606      	mov	r6, r0
 8007488:	460f      	mov	r7, r1
 800748a:	4620      	mov	r0, r4
 800748c:	4629      	mov	r1, r5
 800748e:	f7f8 fef3 	bl	8000278 <__aeabi_dsub>
 8007492:	4602      	mov	r2, r0
 8007494:	460b      	mov	r3, r1
 8007496:	4650      	mov	r0, sl
 8007498:	4659      	mov	r1, fp
 800749a:	f7f8 feed 	bl	8000278 <__aeabi_dsub>
 800749e:	4642      	mov	r2, r8
 80074a0:	464b      	mov	r3, r9
 80074a2:	f7f9 f8a1 	bl	80005e8 <__aeabi_dmul>
 80074a6:	4602      	mov	r2, r0
 80074a8:	460b      	mov	r3, r1
 80074aa:	4630      	mov	r0, r6
 80074ac:	4639      	mov	r1, r7
 80074ae:	f7f8 fee3 	bl	8000278 <__aeabi_dsub>
 80074b2:	ec53 2b19 	vmov	r2, r3, d9
 80074b6:	f7f9 f897 	bl	80005e8 <__aeabi_dmul>
 80074ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80074be:	ec41 0b18 	vmov	d8, r0, r1
 80074c2:	4610      	mov	r0, r2
 80074c4:	4619      	mov	r1, r3
 80074c6:	f7f9 f88f 	bl	80005e8 <__aeabi_dmul>
 80074ca:	a37d      	add	r3, pc, #500	; (adr r3, 80076c0 <__ieee754_pow+0x6f0>)
 80074cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d0:	4604      	mov	r4, r0
 80074d2:	460d      	mov	r5, r1
 80074d4:	f7f9 f888 	bl	80005e8 <__aeabi_dmul>
 80074d8:	a37b      	add	r3, pc, #492	; (adr r3, 80076c8 <__ieee754_pow+0x6f8>)
 80074da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074de:	f7f8 fecd 	bl	800027c <__adddf3>
 80074e2:	4622      	mov	r2, r4
 80074e4:	462b      	mov	r3, r5
 80074e6:	f7f9 f87f 	bl	80005e8 <__aeabi_dmul>
 80074ea:	a379      	add	r3, pc, #484	; (adr r3, 80076d0 <__ieee754_pow+0x700>)
 80074ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f0:	f7f8 fec4 	bl	800027c <__adddf3>
 80074f4:	4622      	mov	r2, r4
 80074f6:	462b      	mov	r3, r5
 80074f8:	f7f9 f876 	bl	80005e8 <__aeabi_dmul>
 80074fc:	a376      	add	r3, pc, #472	; (adr r3, 80076d8 <__ieee754_pow+0x708>)
 80074fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007502:	f7f8 febb 	bl	800027c <__adddf3>
 8007506:	4622      	mov	r2, r4
 8007508:	462b      	mov	r3, r5
 800750a:	f7f9 f86d 	bl	80005e8 <__aeabi_dmul>
 800750e:	a374      	add	r3, pc, #464	; (adr r3, 80076e0 <__ieee754_pow+0x710>)
 8007510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007514:	f7f8 feb2 	bl	800027c <__adddf3>
 8007518:	4622      	mov	r2, r4
 800751a:	462b      	mov	r3, r5
 800751c:	f7f9 f864 	bl	80005e8 <__aeabi_dmul>
 8007520:	a371      	add	r3, pc, #452	; (adr r3, 80076e8 <__ieee754_pow+0x718>)
 8007522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007526:	f7f8 fea9 	bl	800027c <__adddf3>
 800752a:	4622      	mov	r2, r4
 800752c:	4606      	mov	r6, r0
 800752e:	460f      	mov	r7, r1
 8007530:	462b      	mov	r3, r5
 8007532:	4620      	mov	r0, r4
 8007534:	4629      	mov	r1, r5
 8007536:	f7f9 f857 	bl	80005e8 <__aeabi_dmul>
 800753a:	4602      	mov	r2, r0
 800753c:	460b      	mov	r3, r1
 800753e:	4630      	mov	r0, r6
 8007540:	4639      	mov	r1, r7
 8007542:	f7f9 f851 	bl	80005e8 <__aeabi_dmul>
 8007546:	4642      	mov	r2, r8
 8007548:	4604      	mov	r4, r0
 800754a:	460d      	mov	r5, r1
 800754c:	464b      	mov	r3, r9
 800754e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007552:	f7f8 fe93 	bl	800027c <__adddf3>
 8007556:	ec53 2b18 	vmov	r2, r3, d8
 800755a:	f7f9 f845 	bl	80005e8 <__aeabi_dmul>
 800755e:	4622      	mov	r2, r4
 8007560:	462b      	mov	r3, r5
 8007562:	f7f8 fe8b 	bl	800027c <__adddf3>
 8007566:	4642      	mov	r2, r8
 8007568:	4682      	mov	sl, r0
 800756a:	468b      	mov	fp, r1
 800756c:	464b      	mov	r3, r9
 800756e:	4640      	mov	r0, r8
 8007570:	4649      	mov	r1, r9
 8007572:	f7f9 f839 	bl	80005e8 <__aeabi_dmul>
 8007576:	4b6c      	ldr	r3, [pc, #432]	; (8007728 <__ieee754_pow+0x758>)
 8007578:	2200      	movs	r2, #0
 800757a:	4606      	mov	r6, r0
 800757c:	460f      	mov	r7, r1
 800757e:	f7f8 fe7d 	bl	800027c <__adddf3>
 8007582:	4652      	mov	r2, sl
 8007584:	465b      	mov	r3, fp
 8007586:	f7f8 fe79 	bl	800027c <__adddf3>
 800758a:	9c04      	ldr	r4, [sp, #16]
 800758c:	460d      	mov	r5, r1
 800758e:	4622      	mov	r2, r4
 8007590:	460b      	mov	r3, r1
 8007592:	4640      	mov	r0, r8
 8007594:	4649      	mov	r1, r9
 8007596:	f7f9 f827 	bl	80005e8 <__aeabi_dmul>
 800759a:	4b63      	ldr	r3, [pc, #396]	; (8007728 <__ieee754_pow+0x758>)
 800759c:	4680      	mov	r8, r0
 800759e:	4689      	mov	r9, r1
 80075a0:	2200      	movs	r2, #0
 80075a2:	4620      	mov	r0, r4
 80075a4:	4629      	mov	r1, r5
 80075a6:	f7f8 fe67 	bl	8000278 <__aeabi_dsub>
 80075aa:	4632      	mov	r2, r6
 80075ac:	463b      	mov	r3, r7
 80075ae:	f7f8 fe63 	bl	8000278 <__aeabi_dsub>
 80075b2:	4602      	mov	r2, r0
 80075b4:	460b      	mov	r3, r1
 80075b6:	4650      	mov	r0, sl
 80075b8:	4659      	mov	r1, fp
 80075ba:	f7f8 fe5d 	bl	8000278 <__aeabi_dsub>
 80075be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80075c2:	f7f9 f811 	bl	80005e8 <__aeabi_dmul>
 80075c6:	4622      	mov	r2, r4
 80075c8:	4606      	mov	r6, r0
 80075ca:	460f      	mov	r7, r1
 80075cc:	462b      	mov	r3, r5
 80075ce:	ec51 0b18 	vmov	r0, r1, d8
 80075d2:	f7f9 f809 	bl	80005e8 <__aeabi_dmul>
 80075d6:	4602      	mov	r2, r0
 80075d8:	460b      	mov	r3, r1
 80075da:	4630      	mov	r0, r6
 80075dc:	4639      	mov	r1, r7
 80075de:	f7f8 fe4d 	bl	800027c <__adddf3>
 80075e2:	4606      	mov	r6, r0
 80075e4:	460f      	mov	r7, r1
 80075e6:	4602      	mov	r2, r0
 80075e8:	460b      	mov	r3, r1
 80075ea:	4640      	mov	r0, r8
 80075ec:	4649      	mov	r1, r9
 80075ee:	f7f8 fe45 	bl	800027c <__adddf3>
 80075f2:	9c04      	ldr	r4, [sp, #16]
 80075f4:	a33e      	add	r3, pc, #248	; (adr r3, 80076f0 <__ieee754_pow+0x720>)
 80075f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fa:	4620      	mov	r0, r4
 80075fc:	460d      	mov	r5, r1
 80075fe:	f7f8 fff3 	bl	80005e8 <__aeabi_dmul>
 8007602:	4642      	mov	r2, r8
 8007604:	ec41 0b18 	vmov	d8, r0, r1
 8007608:	464b      	mov	r3, r9
 800760a:	4620      	mov	r0, r4
 800760c:	4629      	mov	r1, r5
 800760e:	f7f8 fe33 	bl	8000278 <__aeabi_dsub>
 8007612:	4602      	mov	r2, r0
 8007614:	460b      	mov	r3, r1
 8007616:	4630      	mov	r0, r6
 8007618:	4639      	mov	r1, r7
 800761a:	f7f8 fe2d 	bl	8000278 <__aeabi_dsub>
 800761e:	a336      	add	r3, pc, #216	; (adr r3, 80076f8 <__ieee754_pow+0x728>)
 8007620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007624:	f7f8 ffe0 	bl	80005e8 <__aeabi_dmul>
 8007628:	a335      	add	r3, pc, #212	; (adr r3, 8007700 <__ieee754_pow+0x730>)
 800762a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800762e:	4606      	mov	r6, r0
 8007630:	460f      	mov	r7, r1
 8007632:	4620      	mov	r0, r4
 8007634:	4629      	mov	r1, r5
 8007636:	f7f8 ffd7 	bl	80005e8 <__aeabi_dmul>
 800763a:	4602      	mov	r2, r0
 800763c:	460b      	mov	r3, r1
 800763e:	4630      	mov	r0, r6
 8007640:	4639      	mov	r1, r7
 8007642:	f7f8 fe1b 	bl	800027c <__adddf3>
 8007646:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007648:	4b38      	ldr	r3, [pc, #224]	; (800772c <__ieee754_pow+0x75c>)
 800764a:	4413      	add	r3, r2
 800764c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007650:	f7f8 fe14 	bl	800027c <__adddf3>
 8007654:	4682      	mov	sl, r0
 8007656:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007658:	468b      	mov	fp, r1
 800765a:	f7f8 ff5b 	bl	8000514 <__aeabi_i2d>
 800765e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007660:	4b33      	ldr	r3, [pc, #204]	; (8007730 <__ieee754_pow+0x760>)
 8007662:	4413      	add	r3, r2
 8007664:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007668:	4606      	mov	r6, r0
 800766a:	460f      	mov	r7, r1
 800766c:	4652      	mov	r2, sl
 800766e:	465b      	mov	r3, fp
 8007670:	ec51 0b18 	vmov	r0, r1, d8
 8007674:	f7f8 fe02 	bl	800027c <__adddf3>
 8007678:	4642      	mov	r2, r8
 800767a:	464b      	mov	r3, r9
 800767c:	f7f8 fdfe 	bl	800027c <__adddf3>
 8007680:	4632      	mov	r2, r6
 8007682:	463b      	mov	r3, r7
 8007684:	f7f8 fdfa 	bl	800027c <__adddf3>
 8007688:	9c04      	ldr	r4, [sp, #16]
 800768a:	4632      	mov	r2, r6
 800768c:	463b      	mov	r3, r7
 800768e:	4620      	mov	r0, r4
 8007690:	460d      	mov	r5, r1
 8007692:	f7f8 fdf1 	bl	8000278 <__aeabi_dsub>
 8007696:	4642      	mov	r2, r8
 8007698:	464b      	mov	r3, r9
 800769a:	f7f8 fded 	bl	8000278 <__aeabi_dsub>
 800769e:	ec53 2b18 	vmov	r2, r3, d8
 80076a2:	f7f8 fde9 	bl	8000278 <__aeabi_dsub>
 80076a6:	4602      	mov	r2, r0
 80076a8:	460b      	mov	r3, r1
 80076aa:	4650      	mov	r0, sl
 80076ac:	4659      	mov	r1, fp
 80076ae:	e606      	b.n	80072be <__ieee754_pow+0x2ee>
 80076b0:	2401      	movs	r4, #1
 80076b2:	e6a0      	b.n	80073f6 <__ieee754_pow+0x426>
 80076b4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8007708 <__ieee754_pow+0x738>
 80076b8:	e60d      	b.n	80072d6 <__ieee754_pow+0x306>
 80076ba:	bf00      	nop
 80076bc:	f3af 8000 	nop.w
 80076c0:	4a454eef 	.word	0x4a454eef
 80076c4:	3fca7e28 	.word	0x3fca7e28
 80076c8:	93c9db65 	.word	0x93c9db65
 80076cc:	3fcd864a 	.word	0x3fcd864a
 80076d0:	a91d4101 	.word	0xa91d4101
 80076d4:	3fd17460 	.word	0x3fd17460
 80076d8:	518f264d 	.word	0x518f264d
 80076dc:	3fd55555 	.word	0x3fd55555
 80076e0:	db6fabff 	.word	0xdb6fabff
 80076e4:	3fdb6db6 	.word	0x3fdb6db6
 80076e8:	33333303 	.word	0x33333303
 80076ec:	3fe33333 	.word	0x3fe33333
 80076f0:	e0000000 	.word	0xe0000000
 80076f4:	3feec709 	.word	0x3feec709
 80076f8:	dc3a03fd 	.word	0xdc3a03fd
 80076fc:	3feec709 	.word	0x3feec709
 8007700:	145b01f5 	.word	0x145b01f5
 8007704:	be3e2fe0 	.word	0xbe3e2fe0
 8007708:	00000000 	.word	0x00000000
 800770c:	3ff00000 	.word	0x3ff00000
 8007710:	7ff00000 	.word	0x7ff00000
 8007714:	43400000 	.word	0x43400000
 8007718:	0003988e 	.word	0x0003988e
 800771c:	000bb679 	.word	0x000bb679
 8007720:	080085f8 	.word	0x080085f8
 8007724:	3ff00000 	.word	0x3ff00000
 8007728:	40080000 	.word	0x40080000
 800772c:	08008618 	.word	0x08008618
 8007730:	08008608 	.word	0x08008608
 8007734:	a3b5      	add	r3, pc, #724	; (adr r3, 8007a0c <__ieee754_pow+0xa3c>)
 8007736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800773a:	4640      	mov	r0, r8
 800773c:	4649      	mov	r1, r9
 800773e:	f7f8 fd9d 	bl	800027c <__adddf3>
 8007742:	4622      	mov	r2, r4
 8007744:	ec41 0b1a 	vmov	d10, r0, r1
 8007748:	462b      	mov	r3, r5
 800774a:	4630      	mov	r0, r6
 800774c:	4639      	mov	r1, r7
 800774e:	f7f8 fd93 	bl	8000278 <__aeabi_dsub>
 8007752:	4602      	mov	r2, r0
 8007754:	460b      	mov	r3, r1
 8007756:	ec51 0b1a 	vmov	r0, r1, d10
 800775a:	f7f9 f9d5 	bl	8000b08 <__aeabi_dcmpgt>
 800775e:	2800      	cmp	r0, #0
 8007760:	f47f adf8 	bne.w	8007354 <__ieee754_pow+0x384>
 8007764:	4aa4      	ldr	r2, [pc, #656]	; (80079f8 <__ieee754_pow+0xa28>)
 8007766:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800776a:	4293      	cmp	r3, r2
 800776c:	f340 810b 	ble.w	8007986 <__ieee754_pow+0x9b6>
 8007770:	151b      	asrs	r3, r3, #20
 8007772:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007776:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800777a:	fa4a f303 	asr.w	r3, sl, r3
 800777e:	445b      	add	r3, fp
 8007780:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007784:	4e9d      	ldr	r6, [pc, #628]	; (80079fc <__ieee754_pow+0xa2c>)
 8007786:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800778a:	4116      	asrs	r6, r2
 800778c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007790:	2000      	movs	r0, #0
 8007792:	ea23 0106 	bic.w	r1, r3, r6
 8007796:	f1c2 0214 	rsb	r2, r2, #20
 800779a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800779e:	fa4a fa02 	asr.w	sl, sl, r2
 80077a2:	f1bb 0f00 	cmp.w	fp, #0
 80077a6:	4602      	mov	r2, r0
 80077a8:	460b      	mov	r3, r1
 80077aa:	4620      	mov	r0, r4
 80077ac:	4629      	mov	r1, r5
 80077ae:	bfb8      	it	lt
 80077b0:	f1ca 0a00 	rsblt	sl, sl, #0
 80077b4:	f7f8 fd60 	bl	8000278 <__aeabi_dsub>
 80077b8:	ec41 0b19 	vmov	d9, r0, r1
 80077bc:	4642      	mov	r2, r8
 80077be:	464b      	mov	r3, r9
 80077c0:	ec51 0b19 	vmov	r0, r1, d9
 80077c4:	f7f8 fd5a 	bl	800027c <__adddf3>
 80077c8:	2400      	movs	r4, #0
 80077ca:	a379      	add	r3, pc, #484	; (adr r3, 80079b0 <__ieee754_pow+0x9e0>)
 80077cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d0:	4620      	mov	r0, r4
 80077d2:	460d      	mov	r5, r1
 80077d4:	f7f8 ff08 	bl	80005e8 <__aeabi_dmul>
 80077d8:	ec53 2b19 	vmov	r2, r3, d9
 80077dc:	4606      	mov	r6, r0
 80077de:	460f      	mov	r7, r1
 80077e0:	4620      	mov	r0, r4
 80077e2:	4629      	mov	r1, r5
 80077e4:	f7f8 fd48 	bl	8000278 <__aeabi_dsub>
 80077e8:	4602      	mov	r2, r0
 80077ea:	460b      	mov	r3, r1
 80077ec:	4640      	mov	r0, r8
 80077ee:	4649      	mov	r1, r9
 80077f0:	f7f8 fd42 	bl	8000278 <__aeabi_dsub>
 80077f4:	a370      	add	r3, pc, #448	; (adr r3, 80079b8 <__ieee754_pow+0x9e8>)
 80077f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077fa:	f7f8 fef5 	bl	80005e8 <__aeabi_dmul>
 80077fe:	a370      	add	r3, pc, #448	; (adr r3, 80079c0 <__ieee754_pow+0x9f0>)
 8007800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007804:	4680      	mov	r8, r0
 8007806:	4689      	mov	r9, r1
 8007808:	4620      	mov	r0, r4
 800780a:	4629      	mov	r1, r5
 800780c:	f7f8 feec 	bl	80005e8 <__aeabi_dmul>
 8007810:	4602      	mov	r2, r0
 8007812:	460b      	mov	r3, r1
 8007814:	4640      	mov	r0, r8
 8007816:	4649      	mov	r1, r9
 8007818:	f7f8 fd30 	bl	800027c <__adddf3>
 800781c:	4604      	mov	r4, r0
 800781e:	460d      	mov	r5, r1
 8007820:	4602      	mov	r2, r0
 8007822:	460b      	mov	r3, r1
 8007824:	4630      	mov	r0, r6
 8007826:	4639      	mov	r1, r7
 8007828:	f7f8 fd28 	bl	800027c <__adddf3>
 800782c:	4632      	mov	r2, r6
 800782e:	463b      	mov	r3, r7
 8007830:	4680      	mov	r8, r0
 8007832:	4689      	mov	r9, r1
 8007834:	f7f8 fd20 	bl	8000278 <__aeabi_dsub>
 8007838:	4602      	mov	r2, r0
 800783a:	460b      	mov	r3, r1
 800783c:	4620      	mov	r0, r4
 800783e:	4629      	mov	r1, r5
 8007840:	f7f8 fd1a 	bl	8000278 <__aeabi_dsub>
 8007844:	4642      	mov	r2, r8
 8007846:	4606      	mov	r6, r0
 8007848:	460f      	mov	r7, r1
 800784a:	464b      	mov	r3, r9
 800784c:	4640      	mov	r0, r8
 800784e:	4649      	mov	r1, r9
 8007850:	f7f8 feca 	bl	80005e8 <__aeabi_dmul>
 8007854:	a35c      	add	r3, pc, #368	; (adr r3, 80079c8 <__ieee754_pow+0x9f8>)
 8007856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800785a:	4604      	mov	r4, r0
 800785c:	460d      	mov	r5, r1
 800785e:	f7f8 fec3 	bl	80005e8 <__aeabi_dmul>
 8007862:	a35b      	add	r3, pc, #364	; (adr r3, 80079d0 <__ieee754_pow+0xa00>)
 8007864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007868:	f7f8 fd06 	bl	8000278 <__aeabi_dsub>
 800786c:	4622      	mov	r2, r4
 800786e:	462b      	mov	r3, r5
 8007870:	f7f8 feba 	bl	80005e8 <__aeabi_dmul>
 8007874:	a358      	add	r3, pc, #352	; (adr r3, 80079d8 <__ieee754_pow+0xa08>)
 8007876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800787a:	f7f8 fcff 	bl	800027c <__adddf3>
 800787e:	4622      	mov	r2, r4
 8007880:	462b      	mov	r3, r5
 8007882:	f7f8 feb1 	bl	80005e8 <__aeabi_dmul>
 8007886:	a356      	add	r3, pc, #344	; (adr r3, 80079e0 <__ieee754_pow+0xa10>)
 8007888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788c:	f7f8 fcf4 	bl	8000278 <__aeabi_dsub>
 8007890:	4622      	mov	r2, r4
 8007892:	462b      	mov	r3, r5
 8007894:	f7f8 fea8 	bl	80005e8 <__aeabi_dmul>
 8007898:	a353      	add	r3, pc, #332	; (adr r3, 80079e8 <__ieee754_pow+0xa18>)
 800789a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800789e:	f7f8 fced 	bl	800027c <__adddf3>
 80078a2:	4622      	mov	r2, r4
 80078a4:	462b      	mov	r3, r5
 80078a6:	f7f8 fe9f 	bl	80005e8 <__aeabi_dmul>
 80078aa:	4602      	mov	r2, r0
 80078ac:	460b      	mov	r3, r1
 80078ae:	4640      	mov	r0, r8
 80078b0:	4649      	mov	r1, r9
 80078b2:	f7f8 fce1 	bl	8000278 <__aeabi_dsub>
 80078b6:	4604      	mov	r4, r0
 80078b8:	460d      	mov	r5, r1
 80078ba:	4602      	mov	r2, r0
 80078bc:	460b      	mov	r3, r1
 80078be:	4640      	mov	r0, r8
 80078c0:	4649      	mov	r1, r9
 80078c2:	f7f8 fe91 	bl	80005e8 <__aeabi_dmul>
 80078c6:	2200      	movs	r2, #0
 80078c8:	ec41 0b19 	vmov	d9, r0, r1
 80078cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80078d0:	4620      	mov	r0, r4
 80078d2:	4629      	mov	r1, r5
 80078d4:	f7f8 fcd0 	bl	8000278 <__aeabi_dsub>
 80078d8:	4602      	mov	r2, r0
 80078da:	460b      	mov	r3, r1
 80078dc:	ec51 0b19 	vmov	r0, r1, d9
 80078e0:	f7f8 ffac 	bl	800083c <__aeabi_ddiv>
 80078e4:	4632      	mov	r2, r6
 80078e6:	4604      	mov	r4, r0
 80078e8:	460d      	mov	r5, r1
 80078ea:	463b      	mov	r3, r7
 80078ec:	4640      	mov	r0, r8
 80078ee:	4649      	mov	r1, r9
 80078f0:	f7f8 fe7a 	bl	80005e8 <__aeabi_dmul>
 80078f4:	4632      	mov	r2, r6
 80078f6:	463b      	mov	r3, r7
 80078f8:	f7f8 fcc0 	bl	800027c <__adddf3>
 80078fc:	4602      	mov	r2, r0
 80078fe:	460b      	mov	r3, r1
 8007900:	4620      	mov	r0, r4
 8007902:	4629      	mov	r1, r5
 8007904:	f7f8 fcb8 	bl	8000278 <__aeabi_dsub>
 8007908:	4642      	mov	r2, r8
 800790a:	464b      	mov	r3, r9
 800790c:	f7f8 fcb4 	bl	8000278 <__aeabi_dsub>
 8007910:	460b      	mov	r3, r1
 8007912:	4602      	mov	r2, r0
 8007914:	493a      	ldr	r1, [pc, #232]	; (8007a00 <__ieee754_pow+0xa30>)
 8007916:	2000      	movs	r0, #0
 8007918:	f7f8 fcae 	bl	8000278 <__aeabi_dsub>
 800791c:	e9cd 0100 	strd	r0, r1, [sp]
 8007920:	9b01      	ldr	r3, [sp, #4]
 8007922:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8007926:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800792a:	da2f      	bge.n	800798c <__ieee754_pow+0x9bc>
 800792c:	4650      	mov	r0, sl
 800792e:	ed9d 0b00 	vldr	d0, [sp]
 8007932:	f000 f9c5 	bl	8007cc0 <scalbn>
 8007936:	ec51 0b10 	vmov	r0, r1, d0
 800793a:	ec53 2b18 	vmov	r2, r3, d8
 800793e:	f7ff bbe0 	b.w	8007102 <__ieee754_pow+0x132>
 8007942:	4b30      	ldr	r3, [pc, #192]	; (8007a04 <__ieee754_pow+0xa34>)
 8007944:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007948:	429e      	cmp	r6, r3
 800794a:	f77f af0b 	ble.w	8007764 <__ieee754_pow+0x794>
 800794e:	4b2e      	ldr	r3, [pc, #184]	; (8007a08 <__ieee754_pow+0xa38>)
 8007950:	440b      	add	r3, r1
 8007952:	4303      	orrs	r3, r0
 8007954:	d00b      	beq.n	800796e <__ieee754_pow+0x99e>
 8007956:	a326      	add	r3, pc, #152	; (adr r3, 80079f0 <__ieee754_pow+0xa20>)
 8007958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800795c:	ec51 0b18 	vmov	r0, r1, d8
 8007960:	f7f8 fe42 	bl	80005e8 <__aeabi_dmul>
 8007964:	a322      	add	r3, pc, #136	; (adr r3, 80079f0 <__ieee754_pow+0xa20>)
 8007966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800796a:	f7ff bbca 	b.w	8007102 <__ieee754_pow+0x132>
 800796e:	4622      	mov	r2, r4
 8007970:	462b      	mov	r3, r5
 8007972:	f7f8 fc81 	bl	8000278 <__aeabi_dsub>
 8007976:	4642      	mov	r2, r8
 8007978:	464b      	mov	r3, r9
 800797a:	f7f9 f8bb 	bl	8000af4 <__aeabi_dcmpge>
 800797e:	2800      	cmp	r0, #0
 8007980:	f43f aef0 	beq.w	8007764 <__ieee754_pow+0x794>
 8007984:	e7e7      	b.n	8007956 <__ieee754_pow+0x986>
 8007986:	f04f 0a00 	mov.w	sl, #0
 800798a:	e717      	b.n	80077bc <__ieee754_pow+0x7ec>
 800798c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007990:	4619      	mov	r1, r3
 8007992:	e7d2      	b.n	800793a <__ieee754_pow+0x96a>
 8007994:	491a      	ldr	r1, [pc, #104]	; (8007a00 <__ieee754_pow+0xa30>)
 8007996:	2000      	movs	r0, #0
 8007998:	f7ff bb9e 	b.w	80070d8 <__ieee754_pow+0x108>
 800799c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079a0:	f7ff bb9a 	b.w	80070d8 <__ieee754_pow+0x108>
 80079a4:	9000      	str	r0, [sp, #0]
 80079a6:	f7ff bb76 	b.w	8007096 <__ieee754_pow+0xc6>
 80079aa:	2100      	movs	r1, #0
 80079ac:	f7ff bb60 	b.w	8007070 <__ieee754_pow+0xa0>
 80079b0:	00000000 	.word	0x00000000
 80079b4:	3fe62e43 	.word	0x3fe62e43
 80079b8:	fefa39ef 	.word	0xfefa39ef
 80079bc:	3fe62e42 	.word	0x3fe62e42
 80079c0:	0ca86c39 	.word	0x0ca86c39
 80079c4:	be205c61 	.word	0xbe205c61
 80079c8:	72bea4d0 	.word	0x72bea4d0
 80079cc:	3e663769 	.word	0x3e663769
 80079d0:	c5d26bf1 	.word	0xc5d26bf1
 80079d4:	3ebbbd41 	.word	0x3ebbbd41
 80079d8:	af25de2c 	.word	0xaf25de2c
 80079dc:	3f11566a 	.word	0x3f11566a
 80079e0:	16bebd93 	.word	0x16bebd93
 80079e4:	3f66c16c 	.word	0x3f66c16c
 80079e8:	5555553e 	.word	0x5555553e
 80079ec:	3fc55555 	.word	0x3fc55555
 80079f0:	c2f8f359 	.word	0xc2f8f359
 80079f4:	01a56e1f 	.word	0x01a56e1f
 80079f8:	3fe00000 	.word	0x3fe00000
 80079fc:	000fffff 	.word	0x000fffff
 8007a00:	3ff00000 	.word	0x3ff00000
 8007a04:	4090cbff 	.word	0x4090cbff
 8007a08:	3f6f3400 	.word	0x3f6f3400
 8007a0c:	652b82fe 	.word	0x652b82fe
 8007a10:	3c971547 	.word	0x3c971547

08007a14 <__ieee754_sqrt>:
 8007a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a18:	ec55 4b10 	vmov	r4, r5, d0
 8007a1c:	4e56      	ldr	r6, [pc, #344]	; (8007b78 <__ieee754_sqrt+0x164>)
 8007a1e:	43ae      	bics	r6, r5
 8007a20:	ee10 0a10 	vmov	r0, s0
 8007a24:	ee10 3a10 	vmov	r3, s0
 8007a28:	4629      	mov	r1, r5
 8007a2a:	462a      	mov	r2, r5
 8007a2c:	d110      	bne.n	8007a50 <__ieee754_sqrt+0x3c>
 8007a2e:	ee10 2a10 	vmov	r2, s0
 8007a32:	462b      	mov	r3, r5
 8007a34:	f7f8 fdd8 	bl	80005e8 <__aeabi_dmul>
 8007a38:	4602      	mov	r2, r0
 8007a3a:	460b      	mov	r3, r1
 8007a3c:	4620      	mov	r0, r4
 8007a3e:	4629      	mov	r1, r5
 8007a40:	f7f8 fc1c 	bl	800027c <__adddf3>
 8007a44:	4604      	mov	r4, r0
 8007a46:	460d      	mov	r5, r1
 8007a48:	ec45 4b10 	vmov	d0, r4, r5
 8007a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a50:	2d00      	cmp	r5, #0
 8007a52:	dc10      	bgt.n	8007a76 <__ieee754_sqrt+0x62>
 8007a54:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007a58:	4330      	orrs	r0, r6
 8007a5a:	d0f5      	beq.n	8007a48 <__ieee754_sqrt+0x34>
 8007a5c:	b15d      	cbz	r5, 8007a76 <__ieee754_sqrt+0x62>
 8007a5e:	ee10 2a10 	vmov	r2, s0
 8007a62:	462b      	mov	r3, r5
 8007a64:	ee10 0a10 	vmov	r0, s0
 8007a68:	f7f8 fc06 	bl	8000278 <__aeabi_dsub>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	460b      	mov	r3, r1
 8007a70:	f7f8 fee4 	bl	800083c <__aeabi_ddiv>
 8007a74:	e7e6      	b.n	8007a44 <__ieee754_sqrt+0x30>
 8007a76:	1509      	asrs	r1, r1, #20
 8007a78:	d076      	beq.n	8007b68 <__ieee754_sqrt+0x154>
 8007a7a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007a7e:	07ce      	lsls	r6, r1, #31
 8007a80:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8007a84:	bf5e      	ittt	pl
 8007a86:	0fda      	lsrpl	r2, r3, #31
 8007a88:	005b      	lslpl	r3, r3, #1
 8007a8a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8007a8e:	0fda      	lsrs	r2, r3, #31
 8007a90:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8007a94:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8007a98:	2000      	movs	r0, #0
 8007a9a:	106d      	asrs	r5, r5, #1
 8007a9c:	005b      	lsls	r3, r3, #1
 8007a9e:	f04f 0e16 	mov.w	lr, #22
 8007aa2:	4684      	mov	ip, r0
 8007aa4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007aa8:	eb0c 0401 	add.w	r4, ip, r1
 8007aac:	4294      	cmp	r4, r2
 8007aae:	bfde      	ittt	le
 8007ab0:	1b12      	suble	r2, r2, r4
 8007ab2:	eb04 0c01 	addle.w	ip, r4, r1
 8007ab6:	1840      	addle	r0, r0, r1
 8007ab8:	0052      	lsls	r2, r2, #1
 8007aba:	f1be 0e01 	subs.w	lr, lr, #1
 8007abe:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007ac2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007ac6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007aca:	d1ed      	bne.n	8007aa8 <__ieee754_sqrt+0x94>
 8007acc:	4671      	mov	r1, lr
 8007ace:	2720      	movs	r7, #32
 8007ad0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007ad4:	4562      	cmp	r2, ip
 8007ad6:	eb04 060e 	add.w	r6, r4, lr
 8007ada:	dc02      	bgt.n	8007ae2 <__ieee754_sqrt+0xce>
 8007adc:	d113      	bne.n	8007b06 <__ieee754_sqrt+0xf2>
 8007ade:	429e      	cmp	r6, r3
 8007ae0:	d811      	bhi.n	8007b06 <__ieee754_sqrt+0xf2>
 8007ae2:	2e00      	cmp	r6, #0
 8007ae4:	eb06 0e04 	add.w	lr, r6, r4
 8007ae8:	da43      	bge.n	8007b72 <__ieee754_sqrt+0x15e>
 8007aea:	f1be 0f00 	cmp.w	lr, #0
 8007aee:	db40      	blt.n	8007b72 <__ieee754_sqrt+0x15e>
 8007af0:	f10c 0801 	add.w	r8, ip, #1
 8007af4:	eba2 020c 	sub.w	r2, r2, ip
 8007af8:	429e      	cmp	r6, r3
 8007afa:	bf88      	it	hi
 8007afc:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8007b00:	1b9b      	subs	r3, r3, r6
 8007b02:	4421      	add	r1, r4
 8007b04:	46c4      	mov	ip, r8
 8007b06:	0052      	lsls	r2, r2, #1
 8007b08:	3f01      	subs	r7, #1
 8007b0a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007b0e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007b12:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007b16:	d1dd      	bne.n	8007ad4 <__ieee754_sqrt+0xc0>
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	d006      	beq.n	8007b2a <__ieee754_sqrt+0x116>
 8007b1c:	1c4c      	adds	r4, r1, #1
 8007b1e:	bf13      	iteet	ne
 8007b20:	3101      	addne	r1, #1
 8007b22:	3001      	addeq	r0, #1
 8007b24:	4639      	moveq	r1, r7
 8007b26:	f021 0101 	bicne.w	r1, r1, #1
 8007b2a:	1043      	asrs	r3, r0, #1
 8007b2c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007b30:	0849      	lsrs	r1, r1, #1
 8007b32:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007b36:	07c2      	lsls	r2, r0, #31
 8007b38:	bf48      	it	mi
 8007b3a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8007b3e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8007b42:	460c      	mov	r4, r1
 8007b44:	463d      	mov	r5, r7
 8007b46:	e77f      	b.n	8007a48 <__ieee754_sqrt+0x34>
 8007b48:	0ada      	lsrs	r2, r3, #11
 8007b4a:	3815      	subs	r0, #21
 8007b4c:	055b      	lsls	r3, r3, #21
 8007b4e:	2a00      	cmp	r2, #0
 8007b50:	d0fa      	beq.n	8007b48 <__ieee754_sqrt+0x134>
 8007b52:	02d7      	lsls	r7, r2, #11
 8007b54:	d50a      	bpl.n	8007b6c <__ieee754_sqrt+0x158>
 8007b56:	f1c1 0420 	rsb	r4, r1, #32
 8007b5a:	fa23 f404 	lsr.w	r4, r3, r4
 8007b5e:	1e4d      	subs	r5, r1, #1
 8007b60:	408b      	lsls	r3, r1
 8007b62:	4322      	orrs	r2, r4
 8007b64:	1b41      	subs	r1, r0, r5
 8007b66:	e788      	b.n	8007a7a <__ieee754_sqrt+0x66>
 8007b68:	4608      	mov	r0, r1
 8007b6a:	e7f0      	b.n	8007b4e <__ieee754_sqrt+0x13a>
 8007b6c:	0052      	lsls	r2, r2, #1
 8007b6e:	3101      	adds	r1, #1
 8007b70:	e7ef      	b.n	8007b52 <__ieee754_sqrt+0x13e>
 8007b72:	46e0      	mov	r8, ip
 8007b74:	e7be      	b.n	8007af4 <__ieee754_sqrt+0xe0>
 8007b76:	bf00      	nop
 8007b78:	7ff00000 	.word	0x7ff00000

08007b7c <finite>:
 8007b7c:	b082      	sub	sp, #8
 8007b7e:	ed8d 0b00 	vstr	d0, [sp]
 8007b82:	9801      	ldr	r0, [sp, #4]
 8007b84:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8007b88:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007b8c:	0fc0      	lsrs	r0, r0, #31
 8007b8e:	b002      	add	sp, #8
 8007b90:	4770      	bx	lr
 8007b92:	0000      	movs	r0, r0
 8007b94:	0000      	movs	r0, r0
	...

08007b98 <nan>:
 8007b98:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007ba0 <nan+0x8>
 8007b9c:	4770      	bx	lr
 8007b9e:	bf00      	nop
 8007ba0:	00000000 	.word	0x00000000
 8007ba4:	7ff80000 	.word	0x7ff80000

08007ba8 <rint>:
 8007ba8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007baa:	ec51 0b10 	vmov	r0, r1, d0
 8007bae:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007bb2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8007bb6:	2e13      	cmp	r6, #19
 8007bb8:	ee10 4a10 	vmov	r4, s0
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8007bc2:	dc58      	bgt.n	8007c76 <rint+0xce>
 8007bc4:	2e00      	cmp	r6, #0
 8007bc6:	da2b      	bge.n	8007c20 <rint+0x78>
 8007bc8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8007bcc:	4302      	orrs	r2, r0
 8007bce:	d023      	beq.n	8007c18 <rint+0x70>
 8007bd0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8007bd4:	4302      	orrs	r2, r0
 8007bd6:	4254      	negs	r4, r2
 8007bd8:	4314      	orrs	r4, r2
 8007bda:	0c4b      	lsrs	r3, r1, #17
 8007bdc:	0b24      	lsrs	r4, r4, #12
 8007bde:	045b      	lsls	r3, r3, #17
 8007be0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8007be4:	ea44 0103 	orr.w	r1, r4, r3
 8007be8:	4b32      	ldr	r3, [pc, #200]	; (8007cb4 <rint+0x10c>)
 8007bea:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007bee:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	4630      	mov	r0, r6
 8007bf8:	4639      	mov	r1, r7
 8007bfa:	f7f8 fb3f 	bl	800027c <__adddf3>
 8007bfe:	e9cd 0100 	strd	r0, r1, [sp]
 8007c02:	463b      	mov	r3, r7
 8007c04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c08:	4632      	mov	r2, r6
 8007c0a:	f7f8 fb35 	bl	8000278 <__aeabi_dsub>
 8007c0e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007c12:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8007c16:	4639      	mov	r1, r7
 8007c18:	ec41 0b10 	vmov	d0, r0, r1
 8007c1c:	b003      	add	sp, #12
 8007c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c20:	4a25      	ldr	r2, [pc, #148]	; (8007cb8 <rint+0x110>)
 8007c22:	4132      	asrs	r2, r6
 8007c24:	ea01 0702 	and.w	r7, r1, r2
 8007c28:	4307      	orrs	r7, r0
 8007c2a:	d0f5      	beq.n	8007c18 <rint+0x70>
 8007c2c:	0851      	lsrs	r1, r2, #1
 8007c2e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8007c32:	4314      	orrs	r4, r2
 8007c34:	d00c      	beq.n	8007c50 <rint+0xa8>
 8007c36:	ea23 0201 	bic.w	r2, r3, r1
 8007c3a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007c3e:	2e13      	cmp	r6, #19
 8007c40:	fa43 f606 	asr.w	r6, r3, r6
 8007c44:	bf0c      	ite	eq
 8007c46:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8007c4a:	2400      	movne	r4, #0
 8007c4c:	ea42 0306 	orr.w	r3, r2, r6
 8007c50:	4918      	ldr	r1, [pc, #96]	; (8007cb4 <rint+0x10c>)
 8007c52:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8007c56:	4622      	mov	r2, r4
 8007c58:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007c5c:	4620      	mov	r0, r4
 8007c5e:	4629      	mov	r1, r5
 8007c60:	f7f8 fb0c 	bl	800027c <__adddf3>
 8007c64:	e9cd 0100 	strd	r0, r1, [sp]
 8007c68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c6c:	4622      	mov	r2, r4
 8007c6e:	462b      	mov	r3, r5
 8007c70:	f7f8 fb02 	bl	8000278 <__aeabi_dsub>
 8007c74:	e7d0      	b.n	8007c18 <rint+0x70>
 8007c76:	2e33      	cmp	r6, #51	; 0x33
 8007c78:	dd07      	ble.n	8007c8a <rint+0xe2>
 8007c7a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007c7e:	d1cb      	bne.n	8007c18 <rint+0x70>
 8007c80:	ee10 2a10 	vmov	r2, s0
 8007c84:	f7f8 fafa 	bl	800027c <__adddf3>
 8007c88:	e7c6      	b.n	8007c18 <rint+0x70>
 8007c8a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8007c8e:	f04f 36ff 	mov.w	r6, #4294967295
 8007c92:	40d6      	lsrs	r6, r2
 8007c94:	4230      	tst	r0, r6
 8007c96:	d0bf      	beq.n	8007c18 <rint+0x70>
 8007c98:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8007c9c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8007ca0:	bf1f      	itttt	ne
 8007ca2:	ea24 0101 	bicne.w	r1, r4, r1
 8007ca6:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8007caa:	fa44 f202 	asrne.w	r2, r4, r2
 8007cae:	ea41 0402 	orrne.w	r4, r1, r2
 8007cb2:	e7cd      	b.n	8007c50 <rint+0xa8>
 8007cb4:	08008628 	.word	0x08008628
 8007cb8:	000fffff 	.word	0x000fffff
 8007cbc:	00000000 	.word	0x00000000

08007cc0 <scalbn>:
 8007cc0:	b570      	push	{r4, r5, r6, lr}
 8007cc2:	ec55 4b10 	vmov	r4, r5, d0
 8007cc6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007cca:	4606      	mov	r6, r0
 8007ccc:	462b      	mov	r3, r5
 8007cce:	b99a      	cbnz	r2, 8007cf8 <scalbn+0x38>
 8007cd0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007cd4:	4323      	orrs	r3, r4
 8007cd6:	d036      	beq.n	8007d46 <scalbn+0x86>
 8007cd8:	4b39      	ldr	r3, [pc, #228]	; (8007dc0 <scalbn+0x100>)
 8007cda:	4629      	mov	r1, r5
 8007cdc:	ee10 0a10 	vmov	r0, s0
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f7f8 fc81 	bl	80005e8 <__aeabi_dmul>
 8007ce6:	4b37      	ldr	r3, [pc, #220]	; (8007dc4 <scalbn+0x104>)
 8007ce8:	429e      	cmp	r6, r3
 8007cea:	4604      	mov	r4, r0
 8007cec:	460d      	mov	r5, r1
 8007cee:	da10      	bge.n	8007d12 <scalbn+0x52>
 8007cf0:	a32b      	add	r3, pc, #172	; (adr r3, 8007da0 <scalbn+0xe0>)
 8007cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf6:	e03a      	b.n	8007d6e <scalbn+0xae>
 8007cf8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007cfc:	428a      	cmp	r2, r1
 8007cfe:	d10c      	bne.n	8007d1a <scalbn+0x5a>
 8007d00:	ee10 2a10 	vmov	r2, s0
 8007d04:	4620      	mov	r0, r4
 8007d06:	4629      	mov	r1, r5
 8007d08:	f7f8 fab8 	bl	800027c <__adddf3>
 8007d0c:	4604      	mov	r4, r0
 8007d0e:	460d      	mov	r5, r1
 8007d10:	e019      	b.n	8007d46 <scalbn+0x86>
 8007d12:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007d16:	460b      	mov	r3, r1
 8007d18:	3a36      	subs	r2, #54	; 0x36
 8007d1a:	4432      	add	r2, r6
 8007d1c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007d20:	428a      	cmp	r2, r1
 8007d22:	dd08      	ble.n	8007d36 <scalbn+0x76>
 8007d24:	2d00      	cmp	r5, #0
 8007d26:	a120      	add	r1, pc, #128	; (adr r1, 8007da8 <scalbn+0xe8>)
 8007d28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d2c:	da1c      	bge.n	8007d68 <scalbn+0xa8>
 8007d2e:	a120      	add	r1, pc, #128	; (adr r1, 8007db0 <scalbn+0xf0>)
 8007d30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d34:	e018      	b.n	8007d68 <scalbn+0xa8>
 8007d36:	2a00      	cmp	r2, #0
 8007d38:	dd08      	ble.n	8007d4c <scalbn+0x8c>
 8007d3a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007d3e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007d42:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007d46:	ec45 4b10 	vmov	d0, r4, r5
 8007d4a:	bd70      	pop	{r4, r5, r6, pc}
 8007d4c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007d50:	da19      	bge.n	8007d86 <scalbn+0xc6>
 8007d52:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007d56:	429e      	cmp	r6, r3
 8007d58:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8007d5c:	dd0a      	ble.n	8007d74 <scalbn+0xb4>
 8007d5e:	a112      	add	r1, pc, #72	; (adr r1, 8007da8 <scalbn+0xe8>)
 8007d60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d1e2      	bne.n	8007d2e <scalbn+0x6e>
 8007d68:	a30f      	add	r3, pc, #60	; (adr r3, 8007da8 <scalbn+0xe8>)
 8007d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d6e:	f7f8 fc3b 	bl	80005e8 <__aeabi_dmul>
 8007d72:	e7cb      	b.n	8007d0c <scalbn+0x4c>
 8007d74:	a10a      	add	r1, pc, #40	; (adr r1, 8007da0 <scalbn+0xe0>)
 8007d76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d0b8      	beq.n	8007cf0 <scalbn+0x30>
 8007d7e:	a10e      	add	r1, pc, #56	; (adr r1, 8007db8 <scalbn+0xf8>)
 8007d80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d84:	e7b4      	b.n	8007cf0 <scalbn+0x30>
 8007d86:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007d8a:	3236      	adds	r2, #54	; 0x36
 8007d8c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007d90:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007d94:	4620      	mov	r0, r4
 8007d96:	4b0c      	ldr	r3, [pc, #48]	; (8007dc8 <scalbn+0x108>)
 8007d98:	2200      	movs	r2, #0
 8007d9a:	e7e8      	b.n	8007d6e <scalbn+0xae>
 8007d9c:	f3af 8000 	nop.w
 8007da0:	c2f8f359 	.word	0xc2f8f359
 8007da4:	01a56e1f 	.word	0x01a56e1f
 8007da8:	8800759c 	.word	0x8800759c
 8007dac:	7e37e43c 	.word	0x7e37e43c
 8007db0:	8800759c 	.word	0x8800759c
 8007db4:	fe37e43c 	.word	0xfe37e43c
 8007db8:	c2f8f359 	.word	0xc2f8f359
 8007dbc:	81a56e1f 	.word	0x81a56e1f
 8007dc0:	43500000 	.word	0x43500000
 8007dc4:	ffff3cb0 	.word	0xffff3cb0
 8007dc8:	3c900000 	.word	0x3c900000

08007dcc <_init>:
 8007dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dce:	bf00      	nop
 8007dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dd2:	bc08      	pop	{r3}
 8007dd4:	469e      	mov	lr, r3
 8007dd6:	4770      	bx	lr

08007dd8 <_fini>:
 8007dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dda:	bf00      	nop
 8007ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dde:	bc08      	pop	{r3}
 8007de0:	469e      	mov	lr, r3
 8007de2:	4770      	bx	lr
